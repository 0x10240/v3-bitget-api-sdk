/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TraderTotalProfitResult struct for TraderTotalProfitResult
type TraderTotalProfitResult struct {
	SumProfit            *string `json:"sumProfit,omitempty"`
	WaitProfit           *string `json:"waitProfit,omitempty"`
	YesterdaySplitProfit *string `json:"yesterdaySplitProfit,omitempty"`
	YesterdayTimeStamp   *string `json:"yesterdayTimeStamp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TraderTotalProfitResult TraderTotalProfitResult

// NewTraderTotalProfitResult instantiates a new TraderTotalProfitResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraderTotalProfitResult() *TraderTotalProfitResult {
	this := TraderTotalProfitResult{}
	return &this
}

// NewTraderTotalProfitResultWithDefaults instantiates a new TraderTotalProfitResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraderTotalProfitResultWithDefaults() *TraderTotalProfitResult {
	this := TraderTotalProfitResult{}
	return &this
}

// GetSumProfit returns the SumProfit field value if set, zero value otherwise.
func (o *TraderTotalProfitResult) GetSumProfit() string {
	if o == nil || isNil(o.SumProfit) {
		var ret string
		return ret
	}
	return *o.SumProfit
}

// GetSumProfitOk returns a tuple with the SumProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderTotalProfitResult) GetSumProfitOk() (*string, bool) {
	if o == nil || isNil(o.SumProfit) {
		return nil, false
	}
	return o.SumProfit, true
}

// HasSumProfit returns a boolean if a field has been set.
func (o *TraderTotalProfitResult) HasSumProfit() bool {
	if o != nil && !isNil(o.SumProfit) {
		return true
	}

	return false
}

// SetSumProfit gets a reference to the given string and assigns it to the SumProfit field.
func (o *TraderTotalProfitResult) SetSumProfit(v string) {
	o.SumProfit = &v
}

// GetWaitProfit returns the WaitProfit field value if set, zero value otherwise.
func (o *TraderTotalProfitResult) GetWaitProfit() string {
	if o == nil || isNil(o.WaitProfit) {
		var ret string
		return ret
	}
	return *o.WaitProfit
}

// GetWaitProfitOk returns a tuple with the WaitProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderTotalProfitResult) GetWaitProfitOk() (*string, bool) {
	if o == nil || isNil(o.WaitProfit) {
		return nil, false
	}
	return o.WaitProfit, true
}

// HasWaitProfit returns a boolean if a field has been set.
func (o *TraderTotalProfitResult) HasWaitProfit() bool {
	if o != nil && !isNil(o.WaitProfit) {
		return true
	}

	return false
}

// SetWaitProfit gets a reference to the given string and assigns it to the WaitProfit field.
func (o *TraderTotalProfitResult) SetWaitProfit(v string) {
	o.WaitProfit = &v
}

// GetYesterdaySplitProfit returns the YesterdaySplitProfit field value if set, zero value otherwise.
func (o *TraderTotalProfitResult) GetYesterdaySplitProfit() string {
	if o == nil || isNil(o.YesterdaySplitProfit) {
		var ret string
		return ret
	}
	return *o.YesterdaySplitProfit
}

// GetYesterdaySplitProfitOk returns a tuple with the YesterdaySplitProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderTotalProfitResult) GetYesterdaySplitProfitOk() (*string, bool) {
	if o == nil || isNil(o.YesterdaySplitProfit) {
		return nil, false
	}
	return o.YesterdaySplitProfit, true
}

// HasYesterdaySplitProfit returns a boolean if a field has been set.
func (o *TraderTotalProfitResult) HasYesterdaySplitProfit() bool {
	if o != nil && !isNil(o.YesterdaySplitProfit) {
		return true
	}

	return false
}

// SetYesterdaySplitProfit gets a reference to the given string and assigns it to the YesterdaySplitProfit field.
func (o *TraderTotalProfitResult) SetYesterdaySplitProfit(v string) {
	o.YesterdaySplitProfit = &v
}

// GetYesterdayTimeStamp returns the YesterdayTimeStamp field value if set, zero value otherwise.
func (o *TraderTotalProfitResult) GetYesterdayTimeStamp() string {
	if o == nil || isNil(o.YesterdayTimeStamp) {
		var ret string
		return ret
	}
	return *o.YesterdayTimeStamp
}

// GetYesterdayTimeStampOk returns a tuple with the YesterdayTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderTotalProfitResult) GetYesterdayTimeStampOk() (*string, bool) {
	if o == nil || isNil(o.YesterdayTimeStamp) {
		return nil, false
	}
	return o.YesterdayTimeStamp, true
}

// HasYesterdayTimeStamp returns a boolean if a field has been set.
func (o *TraderTotalProfitResult) HasYesterdayTimeStamp() bool {
	if o != nil && !isNil(o.YesterdayTimeStamp) {
		return true
	}

	return false
}

// SetYesterdayTimeStamp gets a reference to the given string and assigns it to the YesterdayTimeStamp field.
func (o *TraderTotalProfitResult) SetYesterdayTimeStamp(v string) {
	o.YesterdayTimeStamp = &v
}

func (o TraderTotalProfitResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SumProfit) {
		toSerialize["sumProfit"] = o.SumProfit
	}
	if !isNil(o.WaitProfit) {
		toSerialize["waitProfit"] = o.WaitProfit
	}
	if !isNil(o.YesterdaySplitProfit) {
		toSerialize["yesterdaySplitProfit"] = o.YesterdaySplitProfit
	}
	if !isNil(o.YesterdayTimeStamp) {
		toSerialize["yesterdayTimeStamp"] = o.YesterdayTimeStamp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TraderTotalProfitResult) UnmarshalJSON(bytes []byte) (err error) {
	varTraderTotalProfitResult := _TraderTotalProfitResult{}

	if err = json.Unmarshal(bytes, &varTraderTotalProfitResult); err == nil {
		*o = TraderTotalProfitResult(varTraderTotalProfitResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "sumProfit")
		delete(additionalProperties, "waitProfit")
		delete(additionalProperties, "yesterdaySplitProfit")
		delete(additionalProperties, "yesterdayTimeStamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraderTotalProfitResult struct {
	value *TraderTotalProfitResult
	isSet bool
}

func (v NullableTraderTotalProfitResult) Get() *TraderTotalProfitResult {
	return v.value
}

func (v *NullableTraderTotalProfitResult) Set(val *TraderTotalProfitResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTraderTotalProfitResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTraderTotalProfitResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraderTotalProfitResult(val *TraderTotalProfitResult) *NullableTraderTotalProfitResult {
	return &NullableTraderTotalProfitResult{value: val, isSet: true}
}

func (v NullableTraderTotalProfitResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraderTotalProfitResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
