/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TraceConfigRequest struct for TraceConfigRequest
type TraceConfigRequest struct {
	Setting []TraceConfigSettingRequest `json:"setting,omitempty"`
	// settingType
	SettingType string `json:"settingType"`
	// traderUserId
	TraderUserId         string `json:"traderUserId"`
	AdditionalProperties map[string]interface{}
}

type _TraceConfigRequest TraceConfigRequest

// NewTraceConfigRequest instantiates a new TraceConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceConfigRequest(settingType string, traderUserId string) *TraceConfigRequest {
	this := TraceConfigRequest{}
	this.SettingType = settingType
	this.TraderUserId = traderUserId
	return &this
}

// NewTraceConfigRequestWithDefaults instantiates a new TraceConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceConfigRequestWithDefaults() *TraceConfigRequest {
	this := TraceConfigRequest{}
	return &this
}

// GetSetting returns the Setting field value if set, zero value otherwise.
func (o *TraceConfigRequest) GetSetting() []TraceConfigSettingRequest {
	if o == nil || isNil(o.Setting) {
		var ret []TraceConfigSettingRequest
		return ret
	}
	return o.Setting
}

// GetSettingOk returns a tuple with the Setting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceConfigRequest) GetSettingOk() ([]TraceConfigSettingRequest, bool) {
	if o == nil || isNil(o.Setting) {
		return nil, false
	}
	return o.Setting, true
}

// HasSetting returns a boolean if a field has been set.
func (o *TraceConfigRequest) HasSetting() bool {
	if o != nil && !isNil(o.Setting) {
		return true
	}

	return false
}

// SetSetting gets a reference to the given []TraceConfigSettingRequest and assigns it to the Setting field.
func (o *TraceConfigRequest) SetSetting(v []TraceConfigSettingRequest) {
	o.Setting = v
}

// GetSettingType returns the SettingType field value
func (o *TraceConfigRequest) GetSettingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SettingType
}

// GetSettingTypeOk returns a tuple with the SettingType field value
// and a boolean to check if the value has been set.
func (o *TraceConfigRequest) GetSettingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SettingType, true
}

// SetSettingType sets field value
func (o *TraceConfigRequest) SetSettingType(v string) {
	o.SettingType = v
}

// GetTraderUserId returns the TraderUserId field value
func (o *TraceConfigRequest) GetTraderUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraderUserId
}

// GetTraderUserIdOk returns a tuple with the TraderUserId field value
// and a boolean to check if the value has been set.
func (o *TraceConfigRequest) GetTraderUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraderUserId, true
}

// SetTraderUserId sets field value
func (o *TraceConfigRequest) SetTraderUserId(v string) {
	o.TraderUserId = v
}

func (o TraceConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Setting) {
		toSerialize["setting"] = o.Setting
	}
	if true {
		toSerialize["settingType"] = o.SettingType
	}
	if true {
		toSerialize["traderUserId"] = o.TraderUserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TraceConfigRequest) UnmarshalJSON(bytes []byte) (err error) {
	varTraceConfigRequest := _TraceConfigRequest{}

	if err = json.Unmarshal(bytes, &varTraceConfigRequest); err == nil {
		*o = TraceConfigRequest(varTraceConfigRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "setting")
		delete(additionalProperties, "settingType")
		delete(additionalProperties, "traderUserId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraceConfigRequest struct {
	value *TraceConfigRequest
	isSet bool
}

func (v NullableTraceConfigRequest) Get() *TraceConfigRequest {
	return v.value
}

func (v *NullableTraceConfigRequest) Set(val *TraceConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceConfigRequest(val *TraceConfigRequest) *NullableTraceConfigRequest {
	return &NullableTraceConfigRequest{value: val, isSet: true}
}

func (v NullableTraceConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
