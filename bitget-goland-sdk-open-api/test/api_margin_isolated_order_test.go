/*
Bitget Open API

Testing MarginIsolatedOrderApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	openapiclient "github.com/bitget/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_MarginIsolatedOrderApiService(t *testing.T) {

	apiClient := openapiclient.NewAPIClient(openapiclient.NewDefaultConfiguration())

	t.Run("Test MarginIsolatedOrderApiService MarginIsolatedBatchCancelOrder", func(t *testing.T) {

		param := *openapiclient.NewMarginOrderRequestWithDefaults() // MarginOrderRequest | param
		param.SetSymbol("BTCUSDT")
		param.SetSide("buy")
		param.SetOrderType("limit")
		param.SetPrice("17000")
		param.SetBaseQuantity("0.01")
		param.SetTimeInForce("gtc")
		param.SetQuoteAmount("10")
		param.SetLoanType("normal")
		orderResp, httpRes, err := apiClient.MarginIsolatedOrderApi.MarginIsolatedPlaceOrder(context.Background()).MarginOrderRequest(param).Execute()

		item := *openapiclient.NewMarginBatchCancelOrderRequestWithDefaults() // MarginOrderRequest | param
		itemArray := []string{*orderResp.GetData().OrderId}
		item.SetOrderIds(itemArray)
		item.SetSymbol("BTCUSDT")
		resp, httpRes, err := apiClient.MarginIsolatedOrderApi.MarginIsolatedBatchCancelOrder(context.Background()).MarginBatchCancelOrderRequest(item).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		for i, item := range resp.GetData().ResultList {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetOrderId())

		}

	})

	t.Run("Test MarginIsolatedOrderApiService MarginIsolatedBatchPlaceOrder", func(t *testing.T) {

		item := *openapiclient.NewMarginOrderRequestWithDefaults() // MarginOrderRequest | param
		item.SetSymbol("BTCUSDT")
		item.SetSide("buy")
		item.SetPrice("14000")
		item.SetOrderType("limit")
		item.SetTimeInForce("gtc")
		item.SetBaseQuantity("0.01")
		item.SetLoanType("normal")
		var itemArray = []openapiclient.MarginOrderRequest{item}

		param := *openapiclient.NewMarginBatchOrdersRequestWithDefaults() // MarginOrderRequest | param
		param.SetSymbol("BTCUSDT")
		param.SetOrderList(itemArray)
		resp, httpRes, err := apiClient.MarginIsolatedOrderApi.MarginIsolatedBatchPlaceOrder(context.Background()).MarginOrderRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetResultList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetOrderId())

		}

	})

	t.Run("Test MarginIsolatedOrderApiService MarginIsolatedCancelOrder", func(t *testing.T) {

		param := *openapiclient.NewMarginOrderRequestWithDefaults() // NewMarginCrossLimitRequestWithDefaults | param
		param.SetSymbol("BTCUSDT")
		param.SetSide("buy")
		param.SetOrderType("limit")
		param.SetPrice("14000")
		param.SetTimeInForce("gtc")
		param.SetBaseQuantity("0.01")
		param.SetLoanType("normal")
		orderResp, httpRes, err := apiClient.MarginIsolatedOrderApi.MarginIsolatedPlaceOrder(context.Background()).MarginOrderRequest(param).Execute()
		orderData := orderResp.GetData()

		cancelOrderParam := *openapiclient.NewMarginCancelOrderRequestWithDefaults()
		cancelOrderParam.SetSymbol("BTCUSDT")
		cancelOrderParam.SetOrderId(orderData.GetOrderId())
		resp, httpRes, err := apiClient.MarginIsolatedOrderApi.MarginIsolatedCancelOrder(context.Background()).MarginCancelOrderRequest(cancelOrderParam).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetResultList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetOrderId())

		}
	})

	t.Run("Test MarginIsolatedOrderApiService MarginIsolatedFills", func(t *testing.T) {

		resp, httpRes, err := apiClient.MarginIsolatedOrderApi.MarginIsolatedFills(context.Background()).Symbol("BTCUSDT").StartTime("1677274167003").EndTime("1680057356760").PageSize("10").Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetFills() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetOrderId())
			assert.NotEmpty(t, item.GetOrderType())
			assert.NotEmpty(t, item.GetFillPrice())
			assert.NotEmpty(t, item.GetFillTotalAmount())
			assert.NotEmpty(t, item.GetFillTotalAmount())
			assert.NotEmpty(t, item.GetSide())
			assert.NotEmpty(t, item.GetFillQuantity())
		}

	})

	t.Run("Test MarginIsolatedOrderApiService MarginIsolatedHistoryOrders", func(t *testing.T) {

		resp, httpRes, err := apiClient.MarginIsolatedOrderApi.MarginIsolatedHistoryOrders(context.Background()).Symbol("BTCUSDT").StartTime("1677274167003").EndTime("1680057356760").PageSize("10").Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetOrderList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetSymbol())
			assert.NotEmpty(t, item.GetOrderType())
			assert.NotEmpty(t, item.GetLoanType())
			assert.NotEmpty(t, item.GetPrice())
			assert.NotEmpty(t, item.GetFillPrice())
			assert.NotEmpty(t, item.GetFillTotalAmount())
			assert.NotEmpty(t, item.GetSide())
			assert.NotEmpty(t, item.GetSource())
			assert.NotEmpty(t, item.GetStatus())
		}

	})

	t.Run("Test MarginIsolatedOrderApiService MarginIsolatedOpenOrders", func(t *testing.T) {

		resp, httpRes, err := apiClient.MarginIsolatedOrderApi.MarginIsolatedOpenOrders(context.Background()).Symbol("BTCUSDT").StartTime("1677274167003").EndTime("1680057356760").PageSize("10").Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetOrderList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetSymbol())
			assert.NotEmpty(t, item.GetOrderType())
			assert.NotEmpty(t, item.GetLoanType())
			assert.NotEmpty(t, item.GetPrice())
			assert.NotEmpty(t, item.GetFillPrice())
			assert.NotEmpty(t, item.GetFillTotalAmount())
			assert.NotEmpty(t, item.GetSide())
			assert.NotEmpty(t, item.GetSource())
			assert.NotEmpty(t, item.GetStatus())
		}

	})

	t.Run("Test MarginIsolatedOrderApiService MarginIsolatedPlaceOrder", func(t *testing.T) {

		param := *openapiclient.NewMarginOrderRequestWithDefaults() // NewMarginCrossLimitRequestWithDefaults | param
		param.SetSymbol("BTCUSDT")
		param.SetSide("buy")
		param.SetOrderType("limit")
		param.SetPrice("14000")
		param.SetTimeInForce("gtc")
		param.SetBaseQuantity("0.01")
		param.SetLoanType("normal")
		resp, httpRes, err := apiClient.MarginIsolatedOrderApi.MarginIsolatedPlaceOrder(context.Background()).MarginOrderRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		data := resp.GetData()
		assert.NotNil(t, data.GetOrderId())
		assert.NotNil(t, data.GetClientOid())
	})

}
