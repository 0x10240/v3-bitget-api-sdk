/*
Bitget Open API

Testing SpotTraceOrderApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	openapiclient "github.com/bitget/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_SpotTraceOrderApiService(t *testing.T) {

	apiClient := openapiclient.NewAPIClient(openapiclient.NewDefaultConfiguration())

	t.Run("Test SpotTraceOrderApiService SpotTraceCloseTrackingOrder", func(t *testing.T) {
		param := *openapiclient.NewCloseTrackingOrderRequestWithDefaults()
		param.SetSymbolId("BTCUSDT_SPBL")
		itemArray := []string{"1032884851114008576"}
		param.SetTrackingOrderNos(itemArray)
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceCloseTrackingOrder(context.Background()).CloseTrackingOrderRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceEndOrder", func(t *testing.T) {
		param := *openapiclient.NewEndOrderRequestWithDefaults()
		itemArray := []string{"1032884851114008576"}
		param.SetTrackingOrderNos(itemArray)
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceEndOrder(context.Background()).EndOrderRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())

	})

	t.Run("Test SpotTraceOrderApiService SpotTraceGetTraceSettings", func(t *testing.T) {
		param := *openapiclient.NewTraceSettingsRequestWithDefaults()
		param.SetTraderUserId("2856507104")
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceGetTraceSettings(context.Background()).TraceSettingsRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetTraceProductConfigs() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetMinTraceAmount())
			assert.NotEmpty(t, item.GetMaxTraceRation())
		}
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceGetTraderSettings", func(t *testing.T) {
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceGetTraderSettings(context.Background()).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetSupportProductCodes() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetProductCode())
			assert.NotEmpty(t, item.GetProductName())
		}
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceMyTracers", func(t *testing.T) {
		param := *openapiclient.NewMyTracersRequestWithDefaults()
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceMyTracers(context.Background()).MyTracersRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetResultList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotNil(t, item.GetTracerHeadPic())
			assert.NotEmpty(t, item.GetTracerNickName())
			assert.NotEmpty(t, item.GetTracerUserId())
		}
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceMyTraders", func(t *testing.T) {
		param := *openapiclient.NewMyTradersRequestWithDefaults()
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceMyTraders(context.Background()).MyTradersRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetResultList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotNil(t, item.GetTraderUid())
			assert.NotEmpty(t, item.GetTraceTotalAmount())
			assert.NotEmpty(t, item.GetTraceTotalProfit())
		}
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceOrderCurrentList", func(t *testing.T) {
		param := *openapiclient.NewCurrentOrderListRequestWithDefaults()
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceOrderCurrentList(context.Background()).CurrentOrderListRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetResultList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotNil(t, item.GetBuyDelegateCount())
			assert.NotEmpty(t, item.GetSymbolId())
			assert.NotEmpty(t, item.GetTrackingNo())
		}
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceOrderHistoryList", func(t *testing.T) {
		param := *openapiclient.NewHistoryOrderListRequestWithDefaults()
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceOrderHistoryList(context.Background()).HistoryOrderListRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetResultList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotNil(t, item.GetTrackingNo())
			assert.NotEmpty(t, item.GetSymbolId())
			assert.NotEmpty(t, item.GetProfit())
		}
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceRemoveTrader", func(t *testing.T) {
		param := *openapiclient.NewRemoveTraderRequestWithDefaults()
		param.SetTraderUserId("1682406073417")
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceRemoveTrader(context.Background()).RemoveTraderRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceSetProductCode", func(t *testing.T) {
		param := *openapiclient.NewProductCodeRequestWithDefaults()
		itemArray := []string{"BTCUSDT_SPBL", "ETHUSDT_SPBL", "BGBUSDT_SPBL"}
		param.SetSymbolIds(itemArray)
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceSetProductCode(context.Background()).ProductCodeRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceSetTraceConfig", func(t *testing.T) {
		item := *openapiclient.NewTraceConfigSettingRequestWithDefaults() // MarginOrderRequest | param
		item.SetSymbolId("ETHUSDT_SPBL")
		item.SetStopLossRation("10")
		item.SetStopProfitRation("10")
		item.SetMaxHoldCount("50000")
		item.SetTraceValue("1000")
		item.SetTraceType("2")
		var itemArray = []openapiclient.TraceConfigSettingRequest{item}

		param := *openapiclient.NewTraceConfigRequestWithDefaults()
		param.SetTraderUserId("2856507104")
		param.SetSettingType("0")
		param.SetSetting(itemArray)
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceSetTraceConfig(context.Background()).TraceConfigRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceSpotInfoList", func(t *testing.T) {
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceSpotInfoList(context.Background()).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data {
			fmt.Printf("%d %v\n", i, item)
			assert.NotNil(t, item.GetMaxCount())
			assert.NotEmpty(t, item.GetSymbolId())
			assert.NotEmpty(t, item.GetSurplusCount())
		}
	})

	t.Run("Test SpotTraceOrderApiService SpotTraceUpdateTpsl", func(t *testing.T) {
		param := *openapiclient.NewUpdateTpslRequestWithDefaults()
		param.SetTrackingNo("1032830954928365568")
		param.SetStopLossPrice("32100")
		param.SetStopProfitPrice("32600")
		resp, httpRes, err := apiClient.SpotTraceOrderApi.SpotTraceUpdateTpsl(context.Background()).UpdateTpslRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
	})

}
