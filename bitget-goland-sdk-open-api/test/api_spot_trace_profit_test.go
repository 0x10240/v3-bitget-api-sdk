/*
Bitget Open API

Testing SpotTraceProfitApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	openapiclient "github.com/bitget/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_SpotTraceProfitApiService(t *testing.T) {

	apiClient := openapiclient.NewAPIClient(openapiclient.NewDefaultConfiguration())

	t.Run("Test SpotTraceProfitApiService SpotTraceProfitHisDetailList", func(t *testing.T) {
		param := *openapiclient.NewTotalProfitHisDetailListRequestWithDefaults()
		param.SetCoinName("USDT")
		param.SetDate("1681985100000")
		resp, httpRes, err := apiClient.SpotTraceProfitApi.SpotTraceProfitHisDetailList(context.Background()).TotalProfitHisDetailListRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetResultList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetCoinName())
			assert.NotEmpty(t, item.GetNickName())
			assert.NotEmpty(t, item.GetProfit())
		}
	})

	t.Run("Test SpotTraceProfitApiService SpotTraceProfitHisList", func(t *testing.T) {
		param := *openapiclient.NewTotalProfitHisListRequestWithDefaults()
		resp, httpRes, err := apiClient.SpotTraceProfitApi.SpotTraceProfitHisList(context.Background()).TotalProfitHisListRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetResultList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetCoinName())
			assert.NotEmpty(t, item.GetDate())
			assert.NotEmpty(t, item.GetProfit())
		}
	})

	t.Run("Test SpotTraceProfitApiService SpotTraceTotalProfitInfo", func(t *testing.T) {
		resp, httpRes, err := apiClient.SpotTraceProfitApi.SpotTraceTotalProfitInfo(context.Background()).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
	})

	t.Run("Test SpotTraceProfitApiService SpotTraceTotalProfitList", func(t *testing.T) {
		param := *openapiclient.NewTotalProfitListRequestWithDefaults()
		resp, httpRes, err := apiClient.SpotTraceProfitApi.SpotTraceTotalProfitList(context.Background()).TotalProfitListRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetProductCode())
			assert.NotEmpty(t, item.GetProfit())
		}
	})

	t.Run("Test SpotTraceProfitApiService SpotTraceWaitProfitDetailList", func(t *testing.T) {
		param := *openapiclient.NewWaitProfitDetailListRequestWithDefaults()
		resp, httpRes, err := apiClient.SpotTraceProfitApi.SpotTraceWaitProfitDetailList(context.Background()).WaitProfitDetailListRequest(param).Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		data := resp.GetData()
		for i, item := range data.GetResultList() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetCoinName())
			assert.NotEmpty(t, item.GetDistributeRatio())
			assert.NotEmpty(t, item.GetProfit())
		}
	})
}
