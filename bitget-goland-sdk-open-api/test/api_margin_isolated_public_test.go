/*
Bitget Open API

Testing MarginIsolatedPublicApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	openapiclient "github.com/bitget/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_MarginIsolatedPublicApiService(t *testing.T) {

	apiClient := openapiclient.NewAPIClient(openapiclient.NewDefaultConfiguration())

	t.Run("Test MarginIsolatedPublicApiService MarginIsolatedPublicInterestRateAndLimit", func(t *testing.T) {

		resp, httpRes, err := apiClient.MarginIsolatedPublicApi.MarginIsolatedPublicInterestRateAndLimit(context.Background()).Symbol("BTCUSDT").Execute()
		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)

		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		assert.NotNil(t, resp.GetData())
		for i, item := range resp.GetData() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetSymbol())
			assert.NotEmpty(t, item.GetLeverage())
			assert.NotEmpty(t, item.GetBaseCoin())
			assert.NotEmpty(t, item.GetBaseTransferInAble())
			assert.NotEmpty(t, item.GetBaseBorrowAble())
			assert.NotEmpty(t, item.GetBaseDailyInterestRate())
			assert.NotEmpty(t, item.GetBaseYearlyInterestRate())
			assert.NotEmpty(t, item.GetBaseMaxBorrowableAmount())
			assert.NotEmpty(t, item.GetBaseVips())
			for i, item := range item.GetBaseVips() {
				fmt.Printf("%d %v\n", i, item)
				assert.NotEmpty(t, item.GetLevel())
				assert.NotEmpty(t, item.GetDailyInterestRate())
				assert.NotEmpty(t, item.GetYearlyInterestRate())
				assert.NotEmpty(t, item.GetDiscountRate())
			}
			assert.NotEmpty(t, item.GetQuoteCoin())
			assert.NotEmpty(t, item.GetQuoteBorrowAble())
			assert.NotEmpty(t, item.GetQuoteDailyInterestRate())
			assert.NotEmpty(t, item.GetQuoteMaxBorrowableAmount())
			assert.NotEmpty(t, item.GetQuoteTransferInAble())
			assert.NotEmpty(t, item.GetQuoteYearlyInterestRate())
			assert.NotEmpty(t, item.GetQuoteVips())
			for i, item := range item.GetQuoteVips() {
				fmt.Printf("%d %v\n", i, item)
				assert.NotEmpty(t, item.GetLevel())
				assert.NotEmpty(t, item.GetDailyInterestRate())
				assert.NotEmpty(t, item.GetYearlyInterestRate())
				assert.NotEmpty(t, item.GetDiscountRate())
			}
		}
	})

	t.Run("Test MarginIsolatedPublicApiService MarginIsolatedPublicTierData", func(t *testing.T) {

		resp, httpRes, err := apiClient.MarginIsolatedPublicApi.MarginIsolatedPublicTierData(context.Background()).Symbol("BTCUSDT").Execute()

		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		require.NotNil(t, resp)

		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		assert.NotNil(t, resp.GetData())
		for i, item := range resp.GetData() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetSymbol())
			assert.NotEmpty(t, item.GetTier())
			assert.NotEmpty(t, item.GetLeverage())
			assert.NotEmpty(t, item.GetBaseCoin())
			assert.NotEmpty(t, item.GetQuoteCoin())
			assert.NotEmpty(t, item.GetBaseMaxBorrowableAmount())
			assert.NotEmpty(t, item.GetQuoteMaxBorrowableAmount())
			assert.NotEmpty(t, item.GetMaintainMarginRate())
			assert.NotEmpty(t, item.GetInitRate())
		}

	})

}
