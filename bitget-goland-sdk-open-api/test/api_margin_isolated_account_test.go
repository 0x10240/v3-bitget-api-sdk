/*
Bitget Open API

Testing MarginIsolatedAccountApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	openapiclient "github.com/bitget/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_MarginIsolatedAccountApiService(t *testing.T) {

	apiClient := openapiclient.NewAPIClient(openapiclient.NewDefaultConfiguration())

	t.Run("Test MarginIsolatedAccountApiService MarginIsolatedAccountAssets", func(t *testing.T) {

		resp, httpRes, err := apiClient.MarginIsolatedAccountApi.MarginIsolatedAccountAssets(context.Background()).Symbol("BTCUSDT").Execute()
		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())

		for i, item := range resp.GetData() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetAvailable())
			assert.NotEmpty(t, item.GetBorrow())
			assert.NotEmpty(t, item.GetCoin())
			assert.NotEmpty(t, item.GetInterest())
			assert.NotEmpty(t, item.GetTotalAmount())
		}

	})

	t.Run("Test MarginIsolatedAccountApiService MarginIsolatedAccountBorrow", func(t *testing.T) {

		param := *openapiclient.NewMarginIsolatedLimitRequestWithDefaults()
		param.SetCoin("USDT")
		param.SetBorrowAmount("1")
		param.SetSymbol("BTCUSDT")
		resp, httpRes, err := apiClient.MarginIsolatedAccountApi.MarginIsolatedAccountBorrow(context.Background()).MarginIsolatedLimitRequest(param).Execute()
		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		data := resp.GetData()
		assert.NotNil(t, data.GetBorrowAmount())
		assert.NotNil(t, data.Coin)
		assert.NotNil(t, data.Symbol)

	})

	t.Run("Test MarginIsolatedAccountApiService MarginIsolatedAccountMaxBorrowableAmount", func(t *testing.T) {

		param := *openapiclient.NewMarginIsolatedMaxBorrowRequestWithDefaults()
		param.SetCoin("USDT")
		param.SetSymbol("BTCUSDT")
		resp, httpRes, err := apiClient.MarginIsolatedAccountApi.MarginIsolatedAccountMaxBorrowableAmount(context.Background()).MarginIsolatedMaxBorrowRequest(param).Execute()
		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		data := resp.GetData()
		assert.NotNil(t, data.GetMaxBorrowableAmount())
		assert.NotNil(t, data.Coin)
		assert.NotNil(t, data.Symbol)

	})

	t.Run("Test MarginIsolatedAccountApiService MarginIsolatedAccountMaxTransferOutAmount", func(t *testing.T) {

		resp, httpRes, err := apiClient.MarginIsolatedAccountApi.MarginIsolatedAccountMaxTransferOutAmount(context.Background()).Symbol("BTCUSDT").Coin("USDT").Execute()
		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		data := resp.GetData()
		assert.NotNil(t, data.MaxTransferOutAmount)
		assert.NotNil(t, data.Coin)
		assert.NotNil(t, data.Symbol)

	})

	t.Run("Test MarginIsolatedAccountApiService MarginIsolatedAccountRepay", func(t *testing.T) {

		param := *openapiclient.NewMarginIsolatedRepayRequestWithDefaults()
		param.SetCoin("USDT")
		param.SetSymbol("BTCUSDT")
		param.SetRepayAmount("1")
		resp, httpRes, err := apiClient.MarginIsolatedAccountApi.MarginIsolatedAccountRepay(context.Background()).MarginIsolatedRepayRequest(param).Execute()
		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		data := resp.GetData()
		assert.NotNil(t, data.RepayAmount)
		assert.NotNil(t, data.Coin)
		assert.NotNil(t, data.Symbol)

	})

	t.Run("Test MarginIsolatedAccountApiService MarginIsolatedAccountRiskRate", func(t *testing.T) {

		param := *openapiclient.NewMarginIsolatedAssetsRiskRequestWithDefaults()
		param.SetSymbol("BTCUSDT")

		resp, httpRes, err := apiClient.MarginIsolatedAccountApi.MarginIsolatedAccountRiskRate(context.Background()).MarginIsolatedAssetsRiskRequest(param).Execute()
		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		for i, item := range resp.GetData() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.Symbol)
			assert.NotEmpty(t, item.RiskRate)
		}

	})

}
