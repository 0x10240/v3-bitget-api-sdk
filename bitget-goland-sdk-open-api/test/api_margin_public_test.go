/*
Bitget Open API

Testing MarginPublicApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	openapiclient "github.com/bitget/openapi"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_MarginPublicApiService(t *testing.T) {

	apiClient := openapiclient.NewAPIClient(openapiclient.NewDefaultConfiguration())

	t.Run("Test MarginPublicApiService MarginPublicCurrencies", func(t *testing.T) {

		resp, httpRes, err := apiClient.MarginPublicApi.MarginPublicCurrencies(context.Background()).Execute()
		bs, _ := json.Marshal(resp)
		var out bytes.Buffer
		json.Indent(&out, bs, "", "\t")
		fmt.Printf("result=%v\n", out.String())

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		require.NotNil(t, resp)

		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "00000", resp.GetCode())
		assert.Equal(t, "success", resp.GetMsg())
		assert.NotNil(t, resp.GetData())
		assert.NotNil(t, resp.GetData())

		for i, item := range resp.GetData() {
			fmt.Printf("%d %v\n", i, item)
			assert.NotEmpty(t, item.GetSymbol())
			assert.NotEmpty(t, item.GetBaseCoin())
			assert.NotEmpty(t, item.GetQuoteCoin())
			assert.NotEmpty(t, item.GetMaxCrossLeverage())
			assert.NotEmpty(t, item.GetMaxIsolatedLeverage())
			assert.NotEmpty(t, item.GetWarningRiskRatio())
			assert.NotEmpty(t, item.GetLiquidationRiskRatio())
			assert.NotEmpty(t, item.GetMinTradeAmount())
			assert.NotEmpty(t, item.GetMaxTradeAmount())
			assert.NotEmpty(t, item.GetTakerFeeRate())
			assert.NotEmpty(t, item.GetMakerFeeRate())
			assert.NotEmpty(t, item.GetPriceScale())
			assert.NotEmpty(t, item.GetQuantityScale())
			assert.NotEmpty(t, item.GetMinTradeUSDT())
			assert.NotEmpty(t, item.GetIsBorrowable())
			assert.NotEmpty(t, item.GetUserMinBorrow())
			assert.NotEmpty(t, item.GetStatus())

		}

	})

}
