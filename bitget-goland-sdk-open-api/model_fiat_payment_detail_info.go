/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FiatPaymentDetailInfo struct for FiatPaymentDetailInfo
type FiatPaymentDetailInfo struct {
	Name                 *string `json:"name,omitempty"`
	Required             *bool   `json:"required,omitempty"`
	Type                 *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FiatPaymentDetailInfo FiatPaymentDetailInfo

// NewFiatPaymentDetailInfo instantiates a new FiatPaymentDetailInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiatPaymentDetailInfo() *FiatPaymentDetailInfo {
	this := FiatPaymentDetailInfo{}
	return &this
}

// NewFiatPaymentDetailInfoWithDefaults instantiates a new FiatPaymentDetailInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiatPaymentDetailInfoWithDefaults() *FiatPaymentDetailInfo {
	this := FiatPaymentDetailInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FiatPaymentDetailInfo) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiatPaymentDetailInfo) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FiatPaymentDetailInfo) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FiatPaymentDetailInfo) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *FiatPaymentDetailInfo) GetRequired() bool {
	if o == nil || isNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiatPaymentDetailInfo) GetRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *FiatPaymentDetailInfo) HasRequired() bool {
	if o != nil && !isNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *FiatPaymentDetailInfo) SetRequired(v bool) {
	o.Required = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FiatPaymentDetailInfo) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiatPaymentDetailInfo) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FiatPaymentDetailInfo) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FiatPaymentDetailInfo) SetType(v string) {
	o.Type = &v
}

func (o FiatPaymentDetailInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *FiatPaymentDetailInfo) UnmarshalJSON(bytes []byte) (err error) {
	varFiatPaymentDetailInfo := _FiatPaymentDetailInfo{}

	if err = json.Unmarshal(bytes, &varFiatPaymentDetailInfo); err == nil {
		*o = FiatPaymentDetailInfo(varFiatPaymentDetailInfo)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "required")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFiatPaymentDetailInfo struct {
	value *FiatPaymentDetailInfo
	isSet bool
}

func (v NullableFiatPaymentDetailInfo) Get() *FiatPaymentDetailInfo {
	return v.value
}

func (v *NullableFiatPaymentDetailInfo) Set(val *FiatPaymentDetailInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFiatPaymentDetailInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFiatPaymentDetailInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiatPaymentDetailInfo(val *FiatPaymentDetailInfo) *NullableFiatPaymentDetailInfo {
	return &NullableFiatPaymentDetailInfo{value: val, isSet: true}
}

func (v NullableFiatPaymentDetailInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiatPaymentDetailInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
