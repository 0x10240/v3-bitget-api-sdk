/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TraceSettingsRequest struct for TraceSettingsRequest
type TraceSettingsRequest struct {
	// traderUserId
	TraderUserId         string `json:"traderUserId"`
	AdditionalProperties map[string]interface{}
}

type _TraceSettingsRequest TraceSettingsRequest

// NewTraceSettingsRequest instantiates a new TraceSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceSettingsRequest(traderUserId string) *TraceSettingsRequest {
	this := TraceSettingsRequest{}
	this.TraderUserId = traderUserId
	return &this
}

// NewTraceSettingsRequestWithDefaults instantiates a new TraceSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceSettingsRequestWithDefaults() *TraceSettingsRequest {
	this := TraceSettingsRequest{}
	return &this
}

// GetTraderUserId returns the TraderUserId field value
func (o *TraceSettingsRequest) GetTraderUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraderUserId
}

// GetTraderUserIdOk returns a tuple with the TraderUserId field value
// and a boolean to check if the value has been set.
func (o *TraceSettingsRequest) GetTraderUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraderUserId, true
}

// SetTraderUserId sets field value
func (o *TraceSettingsRequest) SetTraderUserId(v string) {
	o.TraderUserId = v
}

func (o TraceSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["traderUserId"] = o.TraderUserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TraceSettingsRequest) UnmarshalJSON(bytes []byte) (err error) {
	varTraceSettingsRequest := _TraceSettingsRequest{}

	if err = json.Unmarshal(bytes, &varTraceSettingsRequest); err == nil {
		*o = TraceSettingsRequest(varTraceSettingsRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "traderUserId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraceSettingsRequest struct {
	value *TraceSettingsRequest
	isSet bool
}

func (v NullableTraceSettingsRequest) Get() *TraceSettingsRequest {
	return v.value
}

func (v *NullableTraceSettingsRequest) Set(val *TraceSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceSettingsRequest(val *TraceSettingsRequest) *NullableTraceSettingsRequest {
	return &NullableTraceSettingsRequest{value: val, isSet: true}
}

func (v NullableTraceSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
