/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MyTraderResult struct for MyTraderResult
type MyTraderResult struct {
	CertificationType    *string `json:"certificationType,omitempty"`
	HeadPic              *string `json:"headPic,omitempty"`
	TraceTotalAmount     *string `json:"traceTotalAmount,omitempty"`
	TraceTotalNetProfit  *string `json:"traceTotalNetProfit,omitempty"`
	TraceTotalProfit     *string `json:"traceTotalProfit,omitempty"`
	TradeNickName        *string `json:"tradeNickName,omitempty"`
	TraderUid            *string `json:"traderUid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MyTraderResult MyTraderResult

// NewMyTraderResult instantiates a new MyTraderResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMyTraderResult() *MyTraderResult {
	this := MyTraderResult{}
	return &this
}

// NewMyTraderResultWithDefaults instantiates a new MyTraderResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMyTraderResultWithDefaults() *MyTraderResult {
	this := MyTraderResult{}
	return &this
}

// GetCertificationType returns the CertificationType field value if set, zero value otherwise.
func (o *MyTraderResult) GetCertificationType() string {
	if o == nil || isNil(o.CertificationType) {
		var ret string
		return ret
	}
	return *o.CertificationType
}

// GetCertificationTypeOk returns a tuple with the CertificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTraderResult) GetCertificationTypeOk() (*string, bool) {
	if o == nil || isNil(o.CertificationType) {
		return nil, false
	}
	return o.CertificationType, true
}

// HasCertificationType returns a boolean if a field has been set.
func (o *MyTraderResult) HasCertificationType() bool {
	if o != nil && !isNil(o.CertificationType) {
		return true
	}

	return false
}

// SetCertificationType gets a reference to the given string and assigns it to the CertificationType field.
func (o *MyTraderResult) SetCertificationType(v string) {
	o.CertificationType = &v
}

// GetHeadPic returns the HeadPic field value if set, zero value otherwise.
func (o *MyTraderResult) GetHeadPic() string {
	if o == nil || isNil(o.HeadPic) {
		var ret string
		return ret
	}
	return *o.HeadPic
}

// GetHeadPicOk returns a tuple with the HeadPic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTraderResult) GetHeadPicOk() (*string, bool) {
	if o == nil || isNil(o.HeadPic) {
		return nil, false
	}
	return o.HeadPic, true
}

// HasHeadPic returns a boolean if a field has been set.
func (o *MyTraderResult) HasHeadPic() bool {
	if o != nil && !isNil(o.HeadPic) {
		return true
	}

	return false
}

// SetHeadPic gets a reference to the given string and assigns it to the HeadPic field.
func (o *MyTraderResult) SetHeadPic(v string) {
	o.HeadPic = &v
}

// GetTraceTotalAmount returns the TraceTotalAmount field value if set, zero value otherwise.
func (o *MyTraderResult) GetTraceTotalAmount() string {
	if o == nil || isNil(o.TraceTotalAmount) {
		var ret string
		return ret
	}
	return *o.TraceTotalAmount
}

// GetTraceTotalAmountOk returns a tuple with the TraceTotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTraderResult) GetTraceTotalAmountOk() (*string, bool) {
	if o == nil || isNil(o.TraceTotalAmount) {
		return nil, false
	}
	return o.TraceTotalAmount, true
}

// HasTraceTotalAmount returns a boolean if a field has been set.
func (o *MyTraderResult) HasTraceTotalAmount() bool {
	if o != nil && !isNil(o.TraceTotalAmount) {
		return true
	}

	return false
}

// SetTraceTotalAmount gets a reference to the given string and assigns it to the TraceTotalAmount field.
func (o *MyTraderResult) SetTraceTotalAmount(v string) {
	o.TraceTotalAmount = &v
}

// GetTraceTotalNetProfit returns the TraceTotalNetProfit field value if set, zero value otherwise.
func (o *MyTraderResult) GetTraceTotalNetProfit() string {
	if o == nil || isNil(o.TraceTotalNetProfit) {
		var ret string
		return ret
	}
	return *o.TraceTotalNetProfit
}

// GetTraceTotalNetProfitOk returns a tuple with the TraceTotalNetProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTraderResult) GetTraceTotalNetProfitOk() (*string, bool) {
	if o == nil || isNil(o.TraceTotalNetProfit) {
		return nil, false
	}
	return o.TraceTotalNetProfit, true
}

// HasTraceTotalNetProfit returns a boolean if a field has been set.
func (o *MyTraderResult) HasTraceTotalNetProfit() bool {
	if o != nil && !isNil(o.TraceTotalNetProfit) {
		return true
	}

	return false
}

// SetTraceTotalNetProfit gets a reference to the given string and assigns it to the TraceTotalNetProfit field.
func (o *MyTraderResult) SetTraceTotalNetProfit(v string) {
	o.TraceTotalNetProfit = &v
}

// GetTraceTotalProfit returns the TraceTotalProfit field value if set, zero value otherwise.
func (o *MyTraderResult) GetTraceTotalProfit() string {
	if o == nil || isNil(o.TraceTotalProfit) {
		var ret string
		return ret
	}
	return *o.TraceTotalProfit
}

// GetTraceTotalProfitOk returns a tuple with the TraceTotalProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTraderResult) GetTraceTotalProfitOk() (*string, bool) {
	if o == nil || isNil(o.TraceTotalProfit) {
		return nil, false
	}
	return o.TraceTotalProfit, true
}

// HasTraceTotalProfit returns a boolean if a field has been set.
func (o *MyTraderResult) HasTraceTotalProfit() bool {
	if o != nil && !isNil(o.TraceTotalProfit) {
		return true
	}

	return false
}

// SetTraceTotalProfit gets a reference to the given string and assigns it to the TraceTotalProfit field.
func (o *MyTraderResult) SetTraceTotalProfit(v string) {
	o.TraceTotalProfit = &v
}

// GetTradeNickName returns the TradeNickName field value if set, zero value otherwise.
func (o *MyTraderResult) GetTradeNickName() string {
	if o == nil || isNil(o.TradeNickName) {
		var ret string
		return ret
	}
	return *o.TradeNickName
}

// GetTradeNickNameOk returns a tuple with the TradeNickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTraderResult) GetTradeNickNameOk() (*string, bool) {
	if o == nil || isNil(o.TradeNickName) {
		return nil, false
	}
	return o.TradeNickName, true
}

// HasTradeNickName returns a boolean if a field has been set.
func (o *MyTraderResult) HasTradeNickName() bool {
	if o != nil && !isNil(o.TradeNickName) {
		return true
	}

	return false
}

// SetTradeNickName gets a reference to the given string and assigns it to the TradeNickName field.
func (o *MyTraderResult) SetTradeNickName(v string) {
	o.TradeNickName = &v
}

// GetTraderUid returns the TraderUid field value if set, zero value otherwise.
func (o *MyTraderResult) GetTraderUid() string {
	if o == nil || isNil(o.TraderUid) {
		var ret string
		return ret
	}
	return *o.TraderUid
}

// GetTraderUidOk returns a tuple with the TraderUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyTraderResult) GetTraderUidOk() (*string, bool) {
	if o == nil || isNil(o.TraderUid) {
		return nil, false
	}
	return o.TraderUid, true
}

// HasTraderUid returns a boolean if a field has been set.
func (o *MyTraderResult) HasTraderUid() bool {
	if o != nil && !isNil(o.TraderUid) {
		return true
	}

	return false
}

// SetTraderUid gets a reference to the given string and assigns it to the TraderUid field.
func (o *MyTraderResult) SetTraderUid(v string) {
	o.TraderUid = &v
}

func (o MyTraderResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CertificationType) {
		toSerialize["certificationType"] = o.CertificationType
	}
	if !isNil(o.HeadPic) {
		toSerialize["headPic"] = o.HeadPic
	}
	if !isNil(o.TraceTotalAmount) {
		toSerialize["traceTotalAmount"] = o.TraceTotalAmount
	}
	if !isNil(o.TraceTotalNetProfit) {
		toSerialize["traceTotalNetProfit"] = o.TraceTotalNetProfit
	}
	if !isNil(o.TraceTotalProfit) {
		toSerialize["traceTotalProfit"] = o.TraceTotalProfit
	}
	if !isNil(o.TradeNickName) {
		toSerialize["tradeNickName"] = o.TradeNickName
	}
	if !isNil(o.TraderUid) {
		toSerialize["traderUid"] = o.TraderUid
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MyTraderResult) UnmarshalJSON(bytes []byte) (err error) {
	varMyTraderResult := _MyTraderResult{}

	if err = json.Unmarshal(bytes, &varMyTraderResult); err == nil {
		*o = MyTraderResult(varMyTraderResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "certificationType")
		delete(additionalProperties, "headPic")
		delete(additionalProperties, "traceTotalAmount")
		delete(additionalProperties, "traceTotalNetProfit")
		delete(additionalProperties, "traceTotalProfit")
		delete(additionalProperties, "tradeNickName")
		delete(additionalProperties, "traderUid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMyTraderResult struct {
	value *MyTraderResult
	isSet bool
}

func (v NullableMyTraderResult) Get() *MyTraderResult {
	return v.value
}

func (v *NullableMyTraderResult) Set(val *MyTraderResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMyTraderResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMyTraderResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMyTraderResult(val *MyTraderResult) *NullableMyTraderResult {
	return &NullableMyTraderResult{value: val, isSet: true}
}

func (v NullableMyTraderResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMyTraderResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
