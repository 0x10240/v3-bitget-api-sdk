/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrderHistoryResult struct for OrderHistoryResult
type OrderHistoryResult struct {
	BuyLeftTokenId       *string `json:"buyLeftTokenId,omitempty"`
	BuyPrice             *string `json:"buyPrice,omitempty"`
	BuyRightTokenId      *string `json:"buyRightTokenId,omitempty"`
	BuyTime              *string `json:"buyTime,omitempty"`
	DealCount            *string `json:"dealCount,omitempty"`
	NetProfit            *string `json:"netProfit,omitempty"`
	Profit               *string `json:"profit,omitempty"`
	ProfitRate           *string `json:"profitRate,omitempty"`
	SellPrice            *string `json:"sellPrice,omitempty"`
	SellTime             *string `json:"sellTime,omitempty"`
	SymbolDisplayName    *string `json:"symbolDisplayName,omitempty"`
	SymbolId             *string `json:"symbolId,omitempty"`
	TrackingNo           *string `json:"trackingNo,omitempty"`
	TraderUserId         *string `json:"traderUserId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderHistoryResult OrderHistoryResult

// NewOrderHistoryResult instantiates a new OrderHistoryResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderHistoryResult() *OrderHistoryResult {
	this := OrderHistoryResult{}
	return &this
}

// NewOrderHistoryResultWithDefaults instantiates a new OrderHistoryResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderHistoryResultWithDefaults() *OrderHistoryResult {
	this := OrderHistoryResult{}
	return &this
}

// GetBuyLeftTokenId returns the BuyLeftTokenId field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetBuyLeftTokenId() string {
	if o == nil || isNil(o.BuyLeftTokenId) {
		var ret string
		return ret
	}
	return *o.BuyLeftTokenId
}

// GetBuyLeftTokenIdOk returns a tuple with the BuyLeftTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetBuyLeftTokenIdOk() (*string, bool) {
	if o == nil || isNil(o.BuyLeftTokenId) {
		return nil, false
	}
	return o.BuyLeftTokenId, true
}

// HasBuyLeftTokenId returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasBuyLeftTokenId() bool {
	if o != nil && !isNil(o.BuyLeftTokenId) {
		return true
	}

	return false
}

// SetBuyLeftTokenId gets a reference to the given string and assigns it to the BuyLeftTokenId field.
func (o *OrderHistoryResult) SetBuyLeftTokenId(v string) {
	o.BuyLeftTokenId = &v
}

// GetBuyPrice returns the BuyPrice field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetBuyPrice() string {
	if o == nil || isNil(o.BuyPrice) {
		var ret string
		return ret
	}
	return *o.BuyPrice
}

// GetBuyPriceOk returns a tuple with the BuyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetBuyPriceOk() (*string, bool) {
	if o == nil || isNil(o.BuyPrice) {
		return nil, false
	}
	return o.BuyPrice, true
}

// HasBuyPrice returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasBuyPrice() bool {
	if o != nil && !isNil(o.BuyPrice) {
		return true
	}

	return false
}

// SetBuyPrice gets a reference to the given string and assigns it to the BuyPrice field.
func (o *OrderHistoryResult) SetBuyPrice(v string) {
	o.BuyPrice = &v
}

// GetBuyRightTokenId returns the BuyRightTokenId field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetBuyRightTokenId() string {
	if o == nil || isNil(o.BuyRightTokenId) {
		var ret string
		return ret
	}
	return *o.BuyRightTokenId
}

// GetBuyRightTokenIdOk returns a tuple with the BuyRightTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetBuyRightTokenIdOk() (*string, bool) {
	if o == nil || isNil(o.BuyRightTokenId) {
		return nil, false
	}
	return o.BuyRightTokenId, true
}

// HasBuyRightTokenId returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasBuyRightTokenId() bool {
	if o != nil && !isNil(o.BuyRightTokenId) {
		return true
	}

	return false
}

// SetBuyRightTokenId gets a reference to the given string and assigns it to the BuyRightTokenId field.
func (o *OrderHistoryResult) SetBuyRightTokenId(v string) {
	o.BuyRightTokenId = &v
}

// GetBuyTime returns the BuyTime field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetBuyTime() string {
	if o == nil || isNil(o.BuyTime) {
		var ret string
		return ret
	}
	return *o.BuyTime
}

// GetBuyTimeOk returns a tuple with the BuyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetBuyTimeOk() (*string, bool) {
	if o == nil || isNil(o.BuyTime) {
		return nil, false
	}
	return o.BuyTime, true
}

// HasBuyTime returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasBuyTime() bool {
	if o != nil && !isNil(o.BuyTime) {
		return true
	}

	return false
}

// SetBuyTime gets a reference to the given string and assigns it to the BuyTime field.
func (o *OrderHistoryResult) SetBuyTime(v string) {
	o.BuyTime = &v
}

// GetDealCount returns the DealCount field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetDealCount() string {
	if o == nil || isNil(o.DealCount) {
		var ret string
		return ret
	}
	return *o.DealCount
}

// GetDealCountOk returns a tuple with the DealCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetDealCountOk() (*string, bool) {
	if o == nil || isNil(o.DealCount) {
		return nil, false
	}
	return o.DealCount, true
}

// HasDealCount returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasDealCount() bool {
	if o != nil && !isNil(o.DealCount) {
		return true
	}

	return false
}

// SetDealCount gets a reference to the given string and assigns it to the DealCount field.
func (o *OrderHistoryResult) SetDealCount(v string) {
	o.DealCount = &v
}

// GetNetProfit returns the NetProfit field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetNetProfit() string {
	if o == nil || isNil(o.NetProfit) {
		var ret string
		return ret
	}
	return *o.NetProfit
}

// GetNetProfitOk returns a tuple with the NetProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetNetProfitOk() (*string, bool) {
	if o == nil || isNil(o.NetProfit) {
		return nil, false
	}
	return o.NetProfit, true
}

// HasNetProfit returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasNetProfit() bool {
	if o != nil && !isNil(o.NetProfit) {
		return true
	}

	return false
}

// SetNetProfit gets a reference to the given string and assigns it to the NetProfit field.
func (o *OrderHistoryResult) SetNetProfit(v string) {
	o.NetProfit = &v
}

// GetProfit returns the Profit field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetProfit() string {
	if o == nil || isNil(o.Profit) {
		var ret string
		return ret
	}
	return *o.Profit
}

// GetProfitOk returns a tuple with the Profit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetProfitOk() (*string, bool) {
	if o == nil || isNil(o.Profit) {
		return nil, false
	}
	return o.Profit, true
}

// HasProfit returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasProfit() bool {
	if o != nil && !isNil(o.Profit) {
		return true
	}

	return false
}

// SetProfit gets a reference to the given string and assigns it to the Profit field.
func (o *OrderHistoryResult) SetProfit(v string) {
	o.Profit = &v
}

// GetProfitRate returns the ProfitRate field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetProfitRate() string {
	if o == nil || isNil(o.ProfitRate) {
		var ret string
		return ret
	}
	return *o.ProfitRate
}

// GetProfitRateOk returns a tuple with the ProfitRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetProfitRateOk() (*string, bool) {
	if o == nil || isNil(o.ProfitRate) {
		return nil, false
	}
	return o.ProfitRate, true
}

// HasProfitRate returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasProfitRate() bool {
	if o != nil && !isNil(o.ProfitRate) {
		return true
	}

	return false
}

// SetProfitRate gets a reference to the given string and assigns it to the ProfitRate field.
func (o *OrderHistoryResult) SetProfitRate(v string) {
	o.ProfitRate = &v
}

// GetSellPrice returns the SellPrice field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetSellPrice() string {
	if o == nil || isNil(o.SellPrice) {
		var ret string
		return ret
	}
	return *o.SellPrice
}

// GetSellPriceOk returns a tuple with the SellPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetSellPriceOk() (*string, bool) {
	if o == nil || isNil(o.SellPrice) {
		return nil, false
	}
	return o.SellPrice, true
}

// HasSellPrice returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasSellPrice() bool {
	if o != nil && !isNil(o.SellPrice) {
		return true
	}

	return false
}

// SetSellPrice gets a reference to the given string and assigns it to the SellPrice field.
func (o *OrderHistoryResult) SetSellPrice(v string) {
	o.SellPrice = &v
}

// GetSellTime returns the SellTime field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetSellTime() string {
	if o == nil || isNil(o.SellTime) {
		var ret string
		return ret
	}
	return *o.SellTime
}

// GetSellTimeOk returns a tuple with the SellTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetSellTimeOk() (*string, bool) {
	if o == nil || isNil(o.SellTime) {
		return nil, false
	}
	return o.SellTime, true
}

// HasSellTime returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasSellTime() bool {
	if o != nil && !isNil(o.SellTime) {
		return true
	}

	return false
}

// SetSellTime gets a reference to the given string and assigns it to the SellTime field.
func (o *OrderHistoryResult) SetSellTime(v string) {
	o.SellTime = &v
}

// GetSymbolDisplayName returns the SymbolDisplayName field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetSymbolDisplayName() string {
	if o == nil || isNil(o.SymbolDisplayName) {
		var ret string
		return ret
	}
	return *o.SymbolDisplayName
}

// GetSymbolDisplayNameOk returns a tuple with the SymbolDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetSymbolDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.SymbolDisplayName) {
		return nil, false
	}
	return o.SymbolDisplayName, true
}

// HasSymbolDisplayName returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasSymbolDisplayName() bool {
	if o != nil && !isNil(o.SymbolDisplayName) {
		return true
	}

	return false
}

// SetSymbolDisplayName gets a reference to the given string and assigns it to the SymbolDisplayName field.
func (o *OrderHistoryResult) SetSymbolDisplayName(v string) {
	o.SymbolDisplayName = &v
}

// GetSymbolId returns the SymbolId field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetSymbolId() string {
	if o == nil || isNil(o.SymbolId) {
		var ret string
		return ret
	}
	return *o.SymbolId
}

// GetSymbolIdOk returns a tuple with the SymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetSymbolIdOk() (*string, bool) {
	if o == nil || isNil(o.SymbolId) {
		return nil, false
	}
	return o.SymbolId, true
}

// HasSymbolId returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasSymbolId() bool {
	if o != nil && !isNil(o.SymbolId) {
		return true
	}

	return false
}

// SetSymbolId gets a reference to the given string and assigns it to the SymbolId field.
func (o *OrderHistoryResult) SetSymbolId(v string) {
	o.SymbolId = &v
}

// GetTrackingNo returns the TrackingNo field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetTrackingNo() string {
	if o == nil || isNil(o.TrackingNo) {
		var ret string
		return ret
	}
	return *o.TrackingNo
}

// GetTrackingNoOk returns a tuple with the TrackingNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetTrackingNoOk() (*string, bool) {
	if o == nil || isNil(o.TrackingNo) {
		return nil, false
	}
	return o.TrackingNo, true
}

// HasTrackingNo returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasTrackingNo() bool {
	if o != nil && !isNil(o.TrackingNo) {
		return true
	}

	return false
}

// SetTrackingNo gets a reference to the given string and assigns it to the TrackingNo field.
func (o *OrderHistoryResult) SetTrackingNo(v string) {
	o.TrackingNo = &v
}

// GetTraderUserId returns the TraderUserId field value if set, zero value otherwise.
func (o *OrderHistoryResult) GetTraderUserId() string {
	if o == nil || isNil(o.TraderUserId) {
		var ret string
		return ret
	}
	return *o.TraderUserId
}

// GetTraderUserIdOk returns a tuple with the TraderUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderHistoryResult) GetTraderUserIdOk() (*string, bool) {
	if o == nil || isNil(o.TraderUserId) {
		return nil, false
	}
	return o.TraderUserId, true
}

// HasTraderUserId returns a boolean if a field has been set.
func (o *OrderHistoryResult) HasTraderUserId() bool {
	if o != nil && !isNil(o.TraderUserId) {
		return true
	}

	return false
}

// SetTraderUserId gets a reference to the given string and assigns it to the TraderUserId field.
func (o *OrderHistoryResult) SetTraderUserId(v string) {
	o.TraderUserId = &v
}

func (o OrderHistoryResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BuyLeftTokenId) {
		toSerialize["buyLeftTokenId"] = o.BuyLeftTokenId
	}
	if !isNil(o.BuyPrice) {
		toSerialize["buyPrice"] = o.BuyPrice
	}
	if !isNil(o.BuyRightTokenId) {
		toSerialize["buyRightTokenId"] = o.BuyRightTokenId
	}
	if !isNil(o.BuyTime) {
		toSerialize["buyTime"] = o.BuyTime
	}
	if !isNil(o.DealCount) {
		toSerialize["dealCount"] = o.DealCount
	}
	if !isNil(o.NetProfit) {
		toSerialize["netProfit"] = o.NetProfit
	}
	if !isNil(o.Profit) {
		toSerialize["profit"] = o.Profit
	}
	if !isNil(o.ProfitRate) {
		toSerialize["profitRate"] = o.ProfitRate
	}
	if !isNil(o.SellPrice) {
		toSerialize["sellPrice"] = o.SellPrice
	}
	if !isNil(o.SellTime) {
		toSerialize["sellTime"] = o.SellTime
	}
	if !isNil(o.SymbolDisplayName) {
		toSerialize["symbolDisplayName"] = o.SymbolDisplayName
	}
	if !isNil(o.SymbolId) {
		toSerialize["symbolId"] = o.SymbolId
	}
	if !isNil(o.TrackingNo) {
		toSerialize["trackingNo"] = o.TrackingNo
	}
	if !isNil(o.TraderUserId) {
		toSerialize["traderUserId"] = o.TraderUserId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OrderHistoryResult) UnmarshalJSON(bytes []byte) (err error) {
	varOrderHistoryResult := _OrderHistoryResult{}

	if err = json.Unmarshal(bytes, &varOrderHistoryResult); err == nil {
		*o = OrderHistoryResult(varOrderHistoryResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "buyLeftTokenId")
		delete(additionalProperties, "buyPrice")
		delete(additionalProperties, "buyRightTokenId")
		delete(additionalProperties, "buyTime")
		delete(additionalProperties, "dealCount")
		delete(additionalProperties, "netProfit")
		delete(additionalProperties, "profit")
		delete(additionalProperties, "profitRate")
		delete(additionalProperties, "sellPrice")
		delete(additionalProperties, "sellTime")
		delete(additionalProperties, "symbolDisplayName")
		delete(additionalProperties, "symbolId")
		delete(additionalProperties, "trackingNo")
		delete(additionalProperties, "traderUserId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderHistoryResult struct {
	value *OrderHistoryResult
	isSet bool
}

func (v NullableOrderHistoryResult) Get() *OrderHistoryResult {
	return v.value
}

func (v *NullableOrderHistoryResult) Set(val *OrderHistoryResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderHistoryResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderHistoryResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderHistoryResult(val *OrderHistoryResult) *NullableOrderHistoryResult {
	return &NullableOrderHistoryResult{value: val, isSet: true}
}

func (v NullableOrderHistoryResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderHistoryResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
