/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SpotInfoResult struct for SpotInfoResult
type SpotInfoResult struct {
	MaxCount             *string `json:"maxCount,omitempty"`
	SurplusCount         *string `json:"surplusCount,omitempty"`
	SymbolId             *string `json:"symbolId,omitempty"`
	SymbolName           *string `json:"symbolName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SpotInfoResult SpotInfoResult

// NewSpotInfoResult instantiates a new SpotInfoResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpotInfoResult() *SpotInfoResult {
	this := SpotInfoResult{}
	return &this
}

// NewSpotInfoResultWithDefaults instantiates a new SpotInfoResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpotInfoResultWithDefaults() *SpotInfoResult {
	this := SpotInfoResult{}
	return &this
}

// GetMaxCount returns the MaxCount field value if set, zero value otherwise.
func (o *SpotInfoResult) GetMaxCount() string {
	if o == nil || isNil(o.MaxCount) {
		var ret string
		return ret
	}
	return *o.MaxCount
}

// GetMaxCountOk returns a tuple with the MaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotInfoResult) GetMaxCountOk() (*string, bool) {
	if o == nil || isNil(o.MaxCount) {
		return nil, false
	}
	return o.MaxCount, true
}

// HasMaxCount returns a boolean if a field has been set.
func (o *SpotInfoResult) HasMaxCount() bool {
	if o != nil && !isNil(o.MaxCount) {
		return true
	}

	return false
}

// SetMaxCount gets a reference to the given string and assigns it to the MaxCount field.
func (o *SpotInfoResult) SetMaxCount(v string) {
	o.MaxCount = &v
}

// GetSurplusCount returns the SurplusCount field value if set, zero value otherwise.
func (o *SpotInfoResult) GetSurplusCount() string {
	if o == nil || isNil(o.SurplusCount) {
		var ret string
		return ret
	}
	return *o.SurplusCount
}

// GetSurplusCountOk returns a tuple with the SurplusCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotInfoResult) GetSurplusCountOk() (*string, bool) {
	if o == nil || isNil(o.SurplusCount) {
		return nil, false
	}
	return o.SurplusCount, true
}

// HasSurplusCount returns a boolean if a field has been set.
func (o *SpotInfoResult) HasSurplusCount() bool {
	if o != nil && !isNil(o.SurplusCount) {
		return true
	}

	return false
}

// SetSurplusCount gets a reference to the given string and assigns it to the SurplusCount field.
func (o *SpotInfoResult) SetSurplusCount(v string) {
	o.SurplusCount = &v
}

// GetSymbolId returns the SymbolId field value if set, zero value otherwise.
func (o *SpotInfoResult) GetSymbolId() string {
	if o == nil || isNil(o.SymbolId) {
		var ret string
		return ret
	}
	return *o.SymbolId
}

// GetSymbolIdOk returns a tuple with the SymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotInfoResult) GetSymbolIdOk() (*string, bool) {
	if o == nil || isNil(o.SymbolId) {
		return nil, false
	}
	return o.SymbolId, true
}

// HasSymbolId returns a boolean if a field has been set.
func (o *SpotInfoResult) HasSymbolId() bool {
	if o != nil && !isNil(o.SymbolId) {
		return true
	}

	return false
}

// SetSymbolId gets a reference to the given string and assigns it to the SymbolId field.
func (o *SpotInfoResult) SetSymbolId(v string) {
	o.SymbolId = &v
}

// GetSymbolName returns the SymbolName field value if set, zero value otherwise.
func (o *SpotInfoResult) GetSymbolName() string {
	if o == nil || isNil(o.SymbolName) {
		var ret string
		return ret
	}
	return *o.SymbolName
}

// GetSymbolNameOk returns a tuple with the SymbolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpotInfoResult) GetSymbolNameOk() (*string, bool) {
	if o == nil || isNil(o.SymbolName) {
		return nil, false
	}
	return o.SymbolName, true
}

// HasSymbolName returns a boolean if a field has been set.
func (o *SpotInfoResult) HasSymbolName() bool {
	if o != nil && !isNil(o.SymbolName) {
		return true
	}

	return false
}

// SetSymbolName gets a reference to the given string and assigns it to the SymbolName field.
func (o *SpotInfoResult) SetSymbolName(v string) {
	o.SymbolName = &v
}

func (o SpotInfoResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MaxCount) {
		toSerialize["maxCount"] = o.MaxCount
	}
	if !isNil(o.SurplusCount) {
		toSerialize["surplusCount"] = o.SurplusCount
	}
	if !isNil(o.SymbolId) {
		toSerialize["symbolId"] = o.SymbolId
	}
	if !isNil(o.SymbolName) {
		toSerialize["symbolName"] = o.SymbolName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SpotInfoResult) UnmarshalJSON(bytes []byte) (err error) {
	varSpotInfoResult := _SpotInfoResult{}

	if err = json.Unmarshal(bytes, &varSpotInfoResult); err == nil {
		*o = SpotInfoResult(varSpotInfoResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "maxCount")
		delete(additionalProperties, "surplusCount")
		delete(additionalProperties, "symbolId")
		delete(additionalProperties, "symbolName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpotInfoResult struct {
	value *SpotInfoResult
	isSet bool
}

func (v NullableSpotInfoResult) Get() *SpotInfoResult {
	return v.value
}

func (v *NullableSpotInfoResult) Set(val *SpotInfoResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSpotInfoResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSpotInfoResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpotInfoResult(val *SpotInfoResult) *NullableSpotInfoResult {
	return &NullableSpotInfoResult{value: val, isSet: true}
}

func (v NullableSpotInfoResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpotInfoResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
