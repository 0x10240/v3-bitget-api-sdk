/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TraderProfitHisDetailListResult struct for TraderProfitHisDetailListResult
type TraderProfitHisDetailListResult struct {
	NextFlag             *bool                         `json:"nextFlag,omitempty"`
	ResultList           []TraderProfitHisDetailResult `json:"resultList,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TraderProfitHisDetailListResult TraderProfitHisDetailListResult

// NewTraderProfitHisDetailListResult instantiates a new TraderProfitHisDetailListResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraderProfitHisDetailListResult() *TraderProfitHisDetailListResult {
	this := TraderProfitHisDetailListResult{}
	return &this
}

// NewTraderProfitHisDetailListResultWithDefaults instantiates a new TraderProfitHisDetailListResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraderProfitHisDetailListResultWithDefaults() *TraderProfitHisDetailListResult {
	this := TraderProfitHisDetailListResult{}
	return &this
}

// GetNextFlag returns the NextFlag field value if set, zero value otherwise.
func (o *TraderProfitHisDetailListResult) GetNextFlag() bool {
	if o == nil || isNil(o.NextFlag) {
		var ret bool
		return ret
	}
	return *o.NextFlag
}

// GetNextFlagOk returns a tuple with the NextFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisDetailListResult) GetNextFlagOk() (*bool, bool) {
	if o == nil || isNil(o.NextFlag) {
		return nil, false
	}
	return o.NextFlag, true
}

// HasNextFlag returns a boolean if a field has been set.
func (o *TraderProfitHisDetailListResult) HasNextFlag() bool {
	if o != nil && !isNil(o.NextFlag) {
		return true
	}

	return false
}

// SetNextFlag gets a reference to the given bool and assigns it to the NextFlag field.
func (o *TraderProfitHisDetailListResult) SetNextFlag(v bool) {
	o.NextFlag = &v
}

// GetResultList returns the ResultList field value if set, zero value otherwise.
func (o *TraderProfitHisDetailListResult) GetResultList() []TraderProfitHisDetailResult {
	if o == nil || isNil(o.ResultList) {
		var ret []TraderProfitHisDetailResult
		return ret
	}
	return o.ResultList
}

// GetResultListOk returns a tuple with the ResultList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisDetailListResult) GetResultListOk() ([]TraderProfitHisDetailResult, bool) {
	if o == nil || isNil(o.ResultList) {
		return nil, false
	}
	return o.ResultList, true
}

// HasResultList returns a boolean if a field has been set.
func (o *TraderProfitHisDetailListResult) HasResultList() bool {
	if o != nil && !isNil(o.ResultList) {
		return true
	}

	return false
}

// SetResultList gets a reference to the given []TraderProfitHisDetailResult and assigns it to the ResultList field.
func (o *TraderProfitHisDetailListResult) SetResultList(v []TraderProfitHisDetailResult) {
	o.ResultList = v
}

func (o TraderProfitHisDetailListResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NextFlag) {
		toSerialize["nextFlag"] = o.NextFlag
	}
	if !isNil(o.ResultList) {
		toSerialize["resultList"] = o.ResultList
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TraderProfitHisDetailListResult) UnmarshalJSON(bytes []byte) (err error) {
	varTraderProfitHisDetailListResult := _TraderProfitHisDetailListResult{}

	if err = json.Unmarshal(bytes, &varTraderProfitHisDetailListResult); err == nil {
		*o = TraderProfitHisDetailListResult(varTraderProfitHisDetailListResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "nextFlag")
		delete(additionalProperties, "resultList")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraderProfitHisDetailListResult struct {
	value *TraderProfitHisDetailListResult
	isSet bool
}

func (v NullableTraderProfitHisDetailListResult) Get() *TraderProfitHisDetailListResult {
	return v.value
}

func (v *NullableTraderProfitHisDetailListResult) Set(val *TraderProfitHisDetailListResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTraderProfitHisDetailListResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTraderProfitHisDetailListResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraderProfitHisDetailListResult(val *TraderProfitHisDetailListResult) *NullableTraderProfitHisDetailListResult {
	return &NullableTraderProfitHisDetailListResult{value: val, isSet: true}
}

func (v NullableTraderProfitHisDetailListResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraderProfitHisDetailListResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
