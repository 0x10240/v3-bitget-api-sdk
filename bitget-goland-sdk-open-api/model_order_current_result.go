/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrderCurrentResult struct for OrderCurrentResult
type OrderCurrentResult struct {
	BuyDelegateCount     *string `json:"buyDelegateCount,omitempty"`
	BuyPrice             *string `json:"buyPrice,omitempty"`
	BuyTime              *string `json:"buyTime,omitempty"`
	DealCount            *string `json:"dealCount,omitempty"`
	HoldCount            *string `json:"holdCount,omitempty"`
	Profit               *string `json:"profit,omitempty"`
	ProfitRate           *string `json:"profitRate,omitempty"`
	StopLossPrice        *string `json:"stopLossPrice,omitempty"`
	StopProfitPrice      *string `json:"stopProfitPrice,omitempty"`
	SymbolDisplayName    *string `json:"symbolDisplayName,omitempty"`
	SymbolId             *string `json:"symbolId,omitempty"`
	TrackingNo           *string `json:"trackingNo,omitempty"`
	TrackingType         *string `json:"trackingType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderCurrentResult OrderCurrentResult

// NewOrderCurrentResult instantiates a new OrderCurrentResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderCurrentResult() *OrderCurrentResult {
	this := OrderCurrentResult{}
	return &this
}

// NewOrderCurrentResultWithDefaults instantiates a new OrderCurrentResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderCurrentResultWithDefaults() *OrderCurrentResult {
	this := OrderCurrentResult{}
	return &this
}

// GetBuyDelegateCount returns the BuyDelegateCount field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetBuyDelegateCount() string {
	if o == nil || isNil(o.BuyDelegateCount) {
		var ret string
		return ret
	}
	return *o.BuyDelegateCount
}

// GetBuyDelegateCountOk returns a tuple with the BuyDelegateCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetBuyDelegateCountOk() (*string, bool) {
	if o == nil || isNil(o.BuyDelegateCount) {
		return nil, false
	}
	return o.BuyDelegateCount, true
}

// HasBuyDelegateCount returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasBuyDelegateCount() bool {
	if o != nil && !isNil(o.BuyDelegateCount) {
		return true
	}

	return false
}

// SetBuyDelegateCount gets a reference to the given string and assigns it to the BuyDelegateCount field.
func (o *OrderCurrentResult) SetBuyDelegateCount(v string) {
	o.BuyDelegateCount = &v
}

// GetBuyPrice returns the BuyPrice field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetBuyPrice() string {
	if o == nil || isNil(o.BuyPrice) {
		var ret string
		return ret
	}
	return *o.BuyPrice
}

// GetBuyPriceOk returns a tuple with the BuyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetBuyPriceOk() (*string, bool) {
	if o == nil || isNil(o.BuyPrice) {
		return nil, false
	}
	return o.BuyPrice, true
}

// HasBuyPrice returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasBuyPrice() bool {
	if o != nil && !isNil(o.BuyPrice) {
		return true
	}

	return false
}

// SetBuyPrice gets a reference to the given string and assigns it to the BuyPrice field.
func (o *OrderCurrentResult) SetBuyPrice(v string) {
	o.BuyPrice = &v
}

// GetBuyTime returns the BuyTime field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetBuyTime() string {
	if o == nil || isNil(o.BuyTime) {
		var ret string
		return ret
	}
	return *o.BuyTime
}

// GetBuyTimeOk returns a tuple with the BuyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetBuyTimeOk() (*string, bool) {
	if o == nil || isNil(o.BuyTime) {
		return nil, false
	}
	return o.BuyTime, true
}

// HasBuyTime returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasBuyTime() bool {
	if o != nil && !isNil(o.BuyTime) {
		return true
	}

	return false
}

// SetBuyTime gets a reference to the given string and assigns it to the BuyTime field.
func (o *OrderCurrentResult) SetBuyTime(v string) {
	o.BuyTime = &v
}

// GetDealCount returns the DealCount field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetDealCount() string {
	if o == nil || isNil(o.DealCount) {
		var ret string
		return ret
	}
	return *o.DealCount
}

// GetDealCountOk returns a tuple with the DealCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetDealCountOk() (*string, bool) {
	if o == nil || isNil(o.DealCount) {
		return nil, false
	}
	return o.DealCount, true
}

// HasDealCount returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasDealCount() bool {
	if o != nil && !isNil(o.DealCount) {
		return true
	}

	return false
}

// SetDealCount gets a reference to the given string and assigns it to the DealCount field.
func (o *OrderCurrentResult) SetDealCount(v string) {
	o.DealCount = &v
}

// GetHoldCount returns the HoldCount field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetHoldCount() string {
	if o == nil || isNil(o.HoldCount) {
		var ret string
		return ret
	}
	return *o.HoldCount
}

// GetHoldCountOk returns a tuple with the HoldCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetHoldCountOk() (*string, bool) {
	if o == nil || isNil(o.HoldCount) {
		return nil, false
	}
	return o.HoldCount, true
}

// HasHoldCount returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasHoldCount() bool {
	if o != nil && !isNil(o.HoldCount) {
		return true
	}

	return false
}

// SetHoldCount gets a reference to the given string and assigns it to the HoldCount field.
func (o *OrderCurrentResult) SetHoldCount(v string) {
	o.HoldCount = &v
}

// GetProfit returns the Profit field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetProfit() string {
	if o == nil || isNil(o.Profit) {
		var ret string
		return ret
	}
	return *o.Profit
}

// GetProfitOk returns a tuple with the Profit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetProfitOk() (*string, bool) {
	if o == nil || isNil(o.Profit) {
		return nil, false
	}
	return o.Profit, true
}

// HasProfit returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasProfit() bool {
	if o != nil && !isNil(o.Profit) {
		return true
	}

	return false
}

// SetProfit gets a reference to the given string and assigns it to the Profit field.
func (o *OrderCurrentResult) SetProfit(v string) {
	o.Profit = &v
}

// GetProfitRate returns the ProfitRate field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetProfitRate() string {
	if o == nil || isNil(o.ProfitRate) {
		var ret string
		return ret
	}
	return *o.ProfitRate
}

// GetProfitRateOk returns a tuple with the ProfitRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetProfitRateOk() (*string, bool) {
	if o == nil || isNil(o.ProfitRate) {
		return nil, false
	}
	return o.ProfitRate, true
}

// HasProfitRate returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasProfitRate() bool {
	if o != nil && !isNil(o.ProfitRate) {
		return true
	}

	return false
}

// SetProfitRate gets a reference to the given string and assigns it to the ProfitRate field.
func (o *OrderCurrentResult) SetProfitRate(v string) {
	o.ProfitRate = &v
}

// GetStopLossPrice returns the StopLossPrice field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetStopLossPrice() string {
	if o == nil || isNil(o.StopLossPrice) {
		var ret string
		return ret
	}
	return *o.StopLossPrice
}

// GetStopLossPriceOk returns a tuple with the StopLossPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetStopLossPriceOk() (*string, bool) {
	if o == nil || isNil(o.StopLossPrice) {
		return nil, false
	}
	return o.StopLossPrice, true
}

// HasStopLossPrice returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasStopLossPrice() bool {
	if o != nil && !isNil(o.StopLossPrice) {
		return true
	}

	return false
}

// SetStopLossPrice gets a reference to the given string and assigns it to the StopLossPrice field.
func (o *OrderCurrentResult) SetStopLossPrice(v string) {
	o.StopLossPrice = &v
}

// GetStopProfitPrice returns the StopProfitPrice field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetStopProfitPrice() string {
	if o == nil || isNil(o.StopProfitPrice) {
		var ret string
		return ret
	}
	return *o.StopProfitPrice
}

// GetStopProfitPriceOk returns a tuple with the StopProfitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetStopProfitPriceOk() (*string, bool) {
	if o == nil || isNil(o.StopProfitPrice) {
		return nil, false
	}
	return o.StopProfitPrice, true
}

// HasStopProfitPrice returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasStopProfitPrice() bool {
	if o != nil && !isNil(o.StopProfitPrice) {
		return true
	}

	return false
}

// SetStopProfitPrice gets a reference to the given string and assigns it to the StopProfitPrice field.
func (o *OrderCurrentResult) SetStopProfitPrice(v string) {
	o.StopProfitPrice = &v
}

// GetSymbolDisplayName returns the SymbolDisplayName field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetSymbolDisplayName() string {
	if o == nil || isNil(o.SymbolDisplayName) {
		var ret string
		return ret
	}
	return *o.SymbolDisplayName
}

// GetSymbolDisplayNameOk returns a tuple with the SymbolDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetSymbolDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.SymbolDisplayName) {
		return nil, false
	}
	return o.SymbolDisplayName, true
}

// HasSymbolDisplayName returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasSymbolDisplayName() bool {
	if o != nil && !isNil(o.SymbolDisplayName) {
		return true
	}

	return false
}

// SetSymbolDisplayName gets a reference to the given string and assigns it to the SymbolDisplayName field.
func (o *OrderCurrentResult) SetSymbolDisplayName(v string) {
	o.SymbolDisplayName = &v
}

// GetSymbolId returns the SymbolId field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetSymbolId() string {
	if o == nil || isNil(o.SymbolId) {
		var ret string
		return ret
	}
	return *o.SymbolId
}

// GetSymbolIdOk returns a tuple with the SymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetSymbolIdOk() (*string, bool) {
	if o == nil || isNil(o.SymbolId) {
		return nil, false
	}
	return o.SymbolId, true
}

// HasSymbolId returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasSymbolId() bool {
	if o != nil && !isNil(o.SymbolId) {
		return true
	}

	return false
}

// SetSymbolId gets a reference to the given string and assigns it to the SymbolId field.
func (o *OrderCurrentResult) SetSymbolId(v string) {
	o.SymbolId = &v
}

// GetTrackingNo returns the TrackingNo field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetTrackingNo() string {
	if o == nil || isNil(o.TrackingNo) {
		var ret string
		return ret
	}
	return *o.TrackingNo
}

// GetTrackingNoOk returns a tuple with the TrackingNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetTrackingNoOk() (*string, bool) {
	if o == nil || isNil(o.TrackingNo) {
		return nil, false
	}
	return o.TrackingNo, true
}

// HasTrackingNo returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasTrackingNo() bool {
	if o != nil && !isNil(o.TrackingNo) {
		return true
	}

	return false
}

// SetTrackingNo gets a reference to the given string and assigns it to the TrackingNo field.
func (o *OrderCurrentResult) SetTrackingNo(v string) {
	o.TrackingNo = &v
}

// GetTrackingType returns the TrackingType field value if set, zero value otherwise.
func (o *OrderCurrentResult) GetTrackingType() string {
	if o == nil || isNil(o.TrackingType) {
		var ret string
		return ret
	}
	return *o.TrackingType
}

// GetTrackingTypeOk returns a tuple with the TrackingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCurrentResult) GetTrackingTypeOk() (*string, bool) {
	if o == nil || isNil(o.TrackingType) {
		return nil, false
	}
	return o.TrackingType, true
}

// HasTrackingType returns a boolean if a field has been set.
func (o *OrderCurrentResult) HasTrackingType() bool {
	if o != nil && !isNil(o.TrackingType) {
		return true
	}

	return false
}

// SetTrackingType gets a reference to the given string and assigns it to the TrackingType field.
func (o *OrderCurrentResult) SetTrackingType(v string) {
	o.TrackingType = &v
}

func (o OrderCurrentResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BuyDelegateCount) {
		toSerialize["buyDelegateCount"] = o.BuyDelegateCount
	}
	if !isNil(o.BuyPrice) {
		toSerialize["buyPrice"] = o.BuyPrice
	}
	if !isNil(o.BuyTime) {
		toSerialize["buyTime"] = o.BuyTime
	}
	if !isNil(o.DealCount) {
		toSerialize["dealCount"] = o.DealCount
	}
	if !isNil(o.HoldCount) {
		toSerialize["holdCount"] = o.HoldCount
	}
	if !isNil(o.Profit) {
		toSerialize["profit"] = o.Profit
	}
	if !isNil(o.ProfitRate) {
		toSerialize["profitRate"] = o.ProfitRate
	}
	if !isNil(o.StopLossPrice) {
		toSerialize["stopLossPrice"] = o.StopLossPrice
	}
	if !isNil(o.StopProfitPrice) {
		toSerialize["stopProfitPrice"] = o.StopProfitPrice
	}
	if !isNil(o.SymbolDisplayName) {
		toSerialize["symbolDisplayName"] = o.SymbolDisplayName
	}
	if !isNil(o.SymbolId) {
		toSerialize["symbolId"] = o.SymbolId
	}
	if !isNil(o.TrackingNo) {
		toSerialize["trackingNo"] = o.TrackingNo
	}
	if !isNil(o.TrackingType) {
		toSerialize["trackingType"] = o.TrackingType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OrderCurrentResult) UnmarshalJSON(bytes []byte) (err error) {
	varOrderCurrentResult := _OrderCurrentResult{}

	if err = json.Unmarshal(bytes, &varOrderCurrentResult); err == nil {
		*o = OrderCurrentResult(varOrderCurrentResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "buyDelegateCount")
		delete(additionalProperties, "buyPrice")
		delete(additionalProperties, "buyTime")
		delete(additionalProperties, "dealCount")
		delete(additionalProperties, "holdCount")
		delete(additionalProperties, "profit")
		delete(additionalProperties, "profitRate")
		delete(additionalProperties, "stopLossPrice")
		delete(additionalProperties, "stopProfitPrice")
		delete(additionalProperties, "symbolDisplayName")
		delete(additionalProperties, "symbolId")
		delete(additionalProperties, "trackingNo")
		delete(additionalProperties, "trackingType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderCurrentResult struct {
	value *OrderCurrentResult
	isSet bool
}

func (v NullableOrderCurrentResult) Get() *OrderCurrentResult {
	return v.value
}

func (v *NullableOrderCurrentResult) Set(val *OrderCurrentResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderCurrentResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderCurrentResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderCurrentResult(val *OrderCurrentResult) *NullableOrderCurrentResult {
	return &NullableOrderCurrentResult{value: val, isSet: true}
}

func (v NullableOrderCurrentResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderCurrentResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
