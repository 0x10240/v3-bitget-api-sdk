/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TraderProfitHisResult struct for TraderProfitHisResult
type TraderProfitHisResult struct {
	CoinName             *string `json:"coinName,omitempty"`
	Date                 *string `json:"date,omitempty"`
	Profit               *string `json:"profit,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TraderProfitHisResult TraderProfitHisResult

// NewTraderProfitHisResult instantiates a new TraderProfitHisResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraderProfitHisResult() *TraderProfitHisResult {
	this := TraderProfitHisResult{}
	return &this
}

// NewTraderProfitHisResultWithDefaults instantiates a new TraderProfitHisResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraderProfitHisResultWithDefaults() *TraderProfitHisResult {
	this := TraderProfitHisResult{}
	return &this
}

// GetCoinName returns the CoinName field value if set, zero value otherwise.
func (o *TraderProfitHisResult) GetCoinName() string {
	if o == nil || isNil(o.CoinName) {
		var ret string
		return ret
	}
	return *o.CoinName
}

// GetCoinNameOk returns a tuple with the CoinName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisResult) GetCoinNameOk() (*string, bool) {
	if o == nil || isNil(o.CoinName) {
		return nil, false
	}
	return o.CoinName, true
}

// HasCoinName returns a boolean if a field has been set.
func (o *TraderProfitHisResult) HasCoinName() bool {
	if o != nil && !isNil(o.CoinName) {
		return true
	}

	return false
}

// SetCoinName gets a reference to the given string and assigns it to the CoinName field.
func (o *TraderProfitHisResult) SetCoinName(v string) {
	o.CoinName = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *TraderProfitHisResult) GetDate() string {
	if o == nil || isNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisResult) GetDateOk() (*string, bool) {
	if o == nil || isNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *TraderProfitHisResult) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *TraderProfitHisResult) SetDate(v string) {
	o.Date = &v
}

// GetProfit returns the Profit field value if set, zero value otherwise.
func (o *TraderProfitHisResult) GetProfit() string {
	if o == nil || isNil(o.Profit) {
		var ret string
		return ret
	}
	return *o.Profit
}

// GetProfitOk returns a tuple with the Profit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisResult) GetProfitOk() (*string, bool) {
	if o == nil || isNil(o.Profit) {
		return nil, false
	}
	return o.Profit, true
}

// HasProfit returns a boolean if a field has been set.
func (o *TraderProfitHisResult) HasProfit() bool {
	if o != nil && !isNil(o.Profit) {
		return true
	}

	return false
}

// SetProfit gets a reference to the given string and assigns it to the Profit field.
func (o *TraderProfitHisResult) SetProfit(v string) {
	o.Profit = &v
}

func (o TraderProfitHisResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CoinName) {
		toSerialize["coinName"] = o.CoinName
	}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.Profit) {
		toSerialize["profit"] = o.Profit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TraderProfitHisResult) UnmarshalJSON(bytes []byte) (err error) {
	varTraderProfitHisResult := _TraderProfitHisResult{}

	if err = json.Unmarshal(bytes, &varTraderProfitHisResult); err == nil {
		*o = TraderProfitHisResult(varTraderProfitHisResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "coinName")
		delete(additionalProperties, "date")
		delete(additionalProperties, "profit")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraderProfitHisResult struct {
	value *TraderProfitHisResult
	isSet bool
}

func (v NullableTraderProfitHisResult) Get() *TraderProfitHisResult {
	return v.value
}

func (v *NullableTraderProfitHisResult) Set(val *TraderProfitHisResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTraderProfitHisResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTraderProfitHisResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraderProfitHisResult(val *TraderProfitHisResult) *NullableTraderProfitHisResult {
	return &NullableTraderProfitHisResult{value: val, isSet: true}
}

func (v NullableTraderProfitHisResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraderProfitHisResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
