/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MerchantOrderResult struct for MerchantOrderResult
type MerchantOrderResult struct {
	MinId                *string             `json:"minId,omitempty"`
	OrderList            []MerchantOrderInfo `json:"orderList,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MerchantOrderResult MerchantOrderResult

// NewMerchantOrderResult instantiates a new MerchantOrderResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantOrderResult() *MerchantOrderResult {
	this := MerchantOrderResult{}
	return &this
}

// NewMerchantOrderResultWithDefaults instantiates a new MerchantOrderResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantOrderResultWithDefaults() *MerchantOrderResult {
	this := MerchantOrderResult{}
	return &this
}

// GetMinId returns the MinId field value if set, zero value otherwise.
func (o *MerchantOrderResult) GetMinId() string {
	if o == nil || isNil(o.MinId) {
		var ret string
		return ret
	}
	return *o.MinId
}

// GetMinIdOk returns a tuple with the MinId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantOrderResult) GetMinIdOk() (*string, bool) {
	if o == nil || isNil(o.MinId) {
		return nil, false
	}
	return o.MinId, true
}

// HasMinId returns a boolean if a field has been set.
func (o *MerchantOrderResult) HasMinId() bool {
	if o != nil && !isNil(o.MinId) {
		return true
	}

	return false
}

// SetMinId gets a reference to the given string and assigns it to the MinId field.
func (o *MerchantOrderResult) SetMinId(v string) {
	o.MinId = &v
}

// GetOrderList returns the OrderList field value if set, zero value otherwise.
func (o *MerchantOrderResult) GetOrderList() []MerchantOrderInfo {
	if o == nil || isNil(o.OrderList) {
		var ret []MerchantOrderInfo
		return ret
	}
	return o.OrderList
}

// GetOrderListOk returns a tuple with the OrderList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantOrderResult) GetOrderListOk() ([]MerchantOrderInfo, bool) {
	if o == nil || isNil(o.OrderList) {
		return nil, false
	}
	return o.OrderList, true
}

// HasOrderList returns a boolean if a field has been set.
func (o *MerchantOrderResult) HasOrderList() bool {
	if o != nil && !isNil(o.OrderList) {
		return true
	}

	return false
}

// SetOrderList gets a reference to the given []MerchantOrderInfo and assigns it to the OrderList field.
func (o *MerchantOrderResult) SetOrderList(v []MerchantOrderInfo) {
	o.OrderList = v
}

func (o MerchantOrderResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MinId) {
		toSerialize["minId"] = o.MinId
	}
	if !isNil(o.OrderList) {
		toSerialize["orderList"] = o.OrderList
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MerchantOrderResult) UnmarshalJSON(bytes []byte) (err error) {
	varMerchantOrderResult := _MerchantOrderResult{}

	if err = json.Unmarshal(bytes, &varMerchantOrderResult); err == nil {
		*o = MerchantOrderResult(varMerchantOrderResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "minId")
		delete(additionalProperties, "orderList")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMerchantOrderResult struct {
	value *MerchantOrderResult
	isSet bool
}

func (v NullableMerchantOrderResult) Get() *MerchantOrderResult {
	return v.value
}

func (v *NullableMerchantOrderResult) Set(val *MerchantOrderResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantOrderResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantOrderResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantOrderResult(val *MerchantOrderResult) *NullableMerchantOrderResult {
	return &NullableMerchantOrderResult{value: val, isSet: true}
}

func (v NullableMerchantOrderResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantOrderResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
