/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrderPaymentDetailInfo struct for OrderPaymentDetailInfo
type OrderPaymentDetailInfo struct {
	Name                 *string `json:"name,omitempty"`
	Required             *bool   `json:"required,omitempty"`
	Type                 *string `json:"type,omitempty"`
	Value                *string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderPaymentDetailInfo OrderPaymentDetailInfo

// NewOrderPaymentDetailInfo instantiates a new OrderPaymentDetailInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderPaymentDetailInfo() *OrderPaymentDetailInfo {
	this := OrderPaymentDetailInfo{}
	return &this
}

// NewOrderPaymentDetailInfoWithDefaults instantiates a new OrderPaymentDetailInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderPaymentDetailInfoWithDefaults() *OrderPaymentDetailInfo {
	this := OrderPaymentDetailInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrderPaymentDetailInfo) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPaymentDetailInfo) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrderPaymentDetailInfo) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrderPaymentDetailInfo) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *OrderPaymentDetailInfo) GetRequired() bool {
	if o == nil || isNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPaymentDetailInfo) GetRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *OrderPaymentDetailInfo) HasRequired() bool {
	if o != nil && !isNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *OrderPaymentDetailInfo) SetRequired(v bool) {
	o.Required = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OrderPaymentDetailInfo) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPaymentDetailInfo) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OrderPaymentDetailInfo) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OrderPaymentDetailInfo) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OrderPaymentDetailInfo) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderPaymentDetailInfo) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OrderPaymentDetailInfo) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *OrderPaymentDetailInfo) SetValue(v string) {
	o.Value = &v
}

func (o OrderPaymentDetailInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OrderPaymentDetailInfo) UnmarshalJSON(bytes []byte) (err error) {
	varOrderPaymentDetailInfo := _OrderPaymentDetailInfo{}

	if err = json.Unmarshal(bytes, &varOrderPaymentDetailInfo); err == nil {
		*o = OrderPaymentDetailInfo(varOrderPaymentDetailInfo)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "required")
		delete(additionalProperties, "type")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderPaymentDetailInfo struct {
	value *OrderPaymentDetailInfo
	isSet bool
}

func (v NullableOrderPaymentDetailInfo) Get() *OrderPaymentDetailInfo {
	return v.value
}

func (v *NullableOrderPaymentDetailInfo) Set(val *OrderPaymentDetailInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderPaymentDetailInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderPaymentDetailInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderPaymentDetailInfo(val *OrderPaymentDetailInfo) *NullableOrderPaymentDetailInfo {
	return &NullableOrderPaymentDetailInfo{value: val, isSet: true}
}

func (v NullableOrderPaymentDetailInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderPaymentDetailInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
