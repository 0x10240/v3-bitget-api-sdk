/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MarginIsolatedAssetsResult struct for MarginIsolatedAssetsResult
type MarginIsolatedAssetsResult struct {
	Coin                 *string `json:"coin,omitempty"`
	MaxTransferOutAmount *string `json:"maxTransferOutAmount,omitempty"`
	Symbol               *string `json:"symbol,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MarginIsolatedAssetsResult MarginIsolatedAssetsResult

// NewMarginIsolatedAssetsResult instantiates a new MarginIsolatedAssetsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarginIsolatedAssetsResult() *MarginIsolatedAssetsResult {
	this := MarginIsolatedAssetsResult{}
	return &this
}

// NewMarginIsolatedAssetsResultWithDefaults instantiates a new MarginIsolatedAssetsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarginIsolatedAssetsResultWithDefaults() *MarginIsolatedAssetsResult {
	this := MarginIsolatedAssetsResult{}
	return &this
}

// GetCoin returns the Coin field value if set, zero value otherwise.
func (o *MarginIsolatedAssetsResult) GetCoin() string {
	if o == nil || isNil(o.Coin) {
		var ret string
		return ret
	}
	return *o.Coin
}

// GetCoinOk returns a tuple with the Coin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginIsolatedAssetsResult) GetCoinOk() (*string, bool) {
	if o == nil || isNil(o.Coin) {
		return nil, false
	}
	return o.Coin, true
}

// HasCoin returns a boolean if a field has been set.
func (o *MarginIsolatedAssetsResult) HasCoin() bool {
	if o != nil && !isNil(o.Coin) {
		return true
	}

	return false
}

// SetCoin gets a reference to the given string and assigns it to the Coin field.
func (o *MarginIsolatedAssetsResult) SetCoin(v string) {
	o.Coin = &v
}

// GetMaxTransferOutAmount returns the MaxTransferOutAmount field value if set, zero value otherwise.
func (o *MarginIsolatedAssetsResult) GetMaxTransferOutAmount() string {
	if o == nil || isNil(o.MaxTransferOutAmount) {
		var ret string
		return ret
	}
	return *o.MaxTransferOutAmount
}

// GetMaxTransferOutAmountOk returns a tuple with the MaxTransferOutAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginIsolatedAssetsResult) GetMaxTransferOutAmountOk() (*string, bool) {
	if o == nil || isNil(o.MaxTransferOutAmount) {
		return nil, false
	}
	return o.MaxTransferOutAmount, true
}

// HasMaxTransferOutAmount returns a boolean if a field has been set.
func (o *MarginIsolatedAssetsResult) HasMaxTransferOutAmount() bool {
	if o != nil && !isNil(o.MaxTransferOutAmount) {
		return true
	}

	return false
}

// SetMaxTransferOutAmount gets a reference to the given string and assigns it to the MaxTransferOutAmount field.
func (o *MarginIsolatedAssetsResult) SetMaxTransferOutAmount(v string) {
	o.MaxTransferOutAmount = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *MarginIsolatedAssetsResult) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarginIsolatedAssetsResult) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *MarginIsolatedAssetsResult) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *MarginIsolatedAssetsResult) SetSymbol(v string) {
	o.Symbol = &v
}

func (o MarginIsolatedAssetsResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Coin) {
		toSerialize["coin"] = o.Coin
	}
	if !isNil(o.MaxTransferOutAmount) {
		toSerialize["maxTransferOutAmount"] = o.MaxTransferOutAmount
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MarginIsolatedAssetsResult) UnmarshalJSON(bytes []byte) (err error) {
	varMarginIsolatedAssetsResult := _MarginIsolatedAssetsResult{}

	if err = json.Unmarshal(bytes, &varMarginIsolatedAssetsResult); err == nil {
		*o = MarginIsolatedAssetsResult(varMarginIsolatedAssetsResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "coin")
		delete(additionalProperties, "maxTransferOutAmount")
		delete(additionalProperties, "symbol")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMarginIsolatedAssetsResult struct {
	value *MarginIsolatedAssetsResult
	isSet bool
}

func (v NullableMarginIsolatedAssetsResult) Get() *MarginIsolatedAssetsResult {
	return v.value
}

func (v *NullableMarginIsolatedAssetsResult) Set(val *MarginIsolatedAssetsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMarginIsolatedAssetsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMarginIsolatedAssetsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarginIsolatedAssetsResult(val *MarginIsolatedAssetsResult) *NullableMarginIsolatedAssetsResult {
	return &NullableMarginIsolatedAssetsResult{value: val, isSet: true}
}

func (v NullableMarginIsolatedAssetsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarginIsolatedAssetsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
