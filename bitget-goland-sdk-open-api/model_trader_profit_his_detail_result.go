/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TraderProfitHisDetailResult struct for TraderProfitHisDetailResult
type TraderProfitHisDetailResult struct {
	CoinName             *string `json:"coinName,omitempty"`
	DistributeRatio      *string `json:"distributeRatio,omitempty"`
	HeadPic              *string `json:"headPic,omitempty"`
	NickName             *string `json:"nickName,omitempty"`
	Profit               *string `json:"profit,omitempty"`
	TracerNickName       *string `json:"tracerNickName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TraderProfitHisDetailResult TraderProfitHisDetailResult

// NewTraderProfitHisDetailResult instantiates a new TraderProfitHisDetailResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraderProfitHisDetailResult() *TraderProfitHisDetailResult {
	this := TraderProfitHisDetailResult{}
	return &this
}

// NewTraderProfitHisDetailResultWithDefaults instantiates a new TraderProfitHisDetailResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraderProfitHisDetailResultWithDefaults() *TraderProfitHisDetailResult {
	this := TraderProfitHisDetailResult{}
	return &this
}

// GetCoinName returns the CoinName field value if set, zero value otherwise.
func (o *TraderProfitHisDetailResult) GetCoinName() string {
	if o == nil || isNil(o.CoinName) {
		var ret string
		return ret
	}
	return *o.CoinName
}

// GetCoinNameOk returns a tuple with the CoinName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisDetailResult) GetCoinNameOk() (*string, bool) {
	if o == nil || isNil(o.CoinName) {
		return nil, false
	}
	return o.CoinName, true
}

// HasCoinName returns a boolean if a field has been set.
func (o *TraderProfitHisDetailResult) HasCoinName() bool {
	if o != nil && !isNil(o.CoinName) {
		return true
	}

	return false
}

// SetCoinName gets a reference to the given string and assigns it to the CoinName field.
func (o *TraderProfitHisDetailResult) SetCoinName(v string) {
	o.CoinName = &v
}

// GetDistributeRatio returns the DistributeRatio field value if set, zero value otherwise.
func (o *TraderProfitHisDetailResult) GetDistributeRatio() string {
	if o == nil || isNil(o.DistributeRatio) {
		var ret string
		return ret
	}
	return *o.DistributeRatio
}

// GetDistributeRatioOk returns a tuple with the DistributeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisDetailResult) GetDistributeRatioOk() (*string, bool) {
	if o == nil || isNil(o.DistributeRatio) {
		return nil, false
	}
	return o.DistributeRatio, true
}

// HasDistributeRatio returns a boolean if a field has been set.
func (o *TraderProfitHisDetailResult) HasDistributeRatio() bool {
	if o != nil && !isNil(o.DistributeRatio) {
		return true
	}

	return false
}

// SetDistributeRatio gets a reference to the given string and assigns it to the DistributeRatio field.
func (o *TraderProfitHisDetailResult) SetDistributeRatio(v string) {
	o.DistributeRatio = &v
}

// GetHeadPic returns the HeadPic field value if set, zero value otherwise.
func (o *TraderProfitHisDetailResult) GetHeadPic() string {
	if o == nil || isNil(o.HeadPic) {
		var ret string
		return ret
	}
	return *o.HeadPic
}

// GetHeadPicOk returns a tuple with the HeadPic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisDetailResult) GetHeadPicOk() (*string, bool) {
	if o == nil || isNil(o.HeadPic) {
		return nil, false
	}
	return o.HeadPic, true
}

// HasHeadPic returns a boolean if a field has been set.
func (o *TraderProfitHisDetailResult) HasHeadPic() bool {
	if o != nil && !isNil(o.HeadPic) {
		return true
	}

	return false
}

// SetHeadPic gets a reference to the given string and assigns it to the HeadPic field.
func (o *TraderProfitHisDetailResult) SetHeadPic(v string) {
	o.HeadPic = &v
}

// GetNickName returns the NickName field value if set, zero value otherwise.
func (o *TraderProfitHisDetailResult) GetNickName() string {
	if o == nil || isNil(o.NickName) {
		var ret string
		return ret
	}
	return *o.NickName
}

// GetNickNameOk returns a tuple with the NickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisDetailResult) GetNickNameOk() (*string, bool) {
	if o == nil || isNil(o.NickName) {
		return nil, false
	}
	return o.NickName, true
}

// HasNickName returns a boolean if a field has been set.
func (o *TraderProfitHisDetailResult) HasNickName() bool {
	if o != nil && !isNil(o.NickName) {
		return true
	}

	return false
}

// SetNickName gets a reference to the given string and assigns it to the NickName field.
func (o *TraderProfitHisDetailResult) SetNickName(v string) {
	o.NickName = &v
}

// GetProfit returns the Profit field value if set, zero value otherwise.
func (o *TraderProfitHisDetailResult) GetProfit() string {
	if o == nil || isNil(o.Profit) {
		var ret string
		return ret
	}
	return *o.Profit
}

// GetProfitOk returns a tuple with the Profit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisDetailResult) GetProfitOk() (*string, bool) {
	if o == nil || isNil(o.Profit) {
		return nil, false
	}
	return o.Profit, true
}

// HasProfit returns a boolean if a field has been set.
func (o *TraderProfitHisDetailResult) HasProfit() bool {
	if o != nil && !isNil(o.Profit) {
		return true
	}

	return false
}

// SetProfit gets a reference to the given string and assigns it to the Profit field.
func (o *TraderProfitHisDetailResult) SetProfit(v string) {
	o.Profit = &v
}

// GetTracerNickName returns the TracerNickName field value if set, zero value otherwise.
func (o *TraderProfitHisDetailResult) GetTracerNickName() string {
	if o == nil || isNil(o.TracerNickName) {
		var ret string
		return ret
	}
	return *o.TracerNickName
}

// GetTracerNickNameOk returns a tuple with the TracerNickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderProfitHisDetailResult) GetTracerNickNameOk() (*string, bool) {
	if o == nil || isNil(o.TracerNickName) {
		return nil, false
	}
	return o.TracerNickName, true
}

// HasTracerNickName returns a boolean if a field has been set.
func (o *TraderProfitHisDetailResult) HasTracerNickName() bool {
	if o != nil && !isNil(o.TracerNickName) {
		return true
	}

	return false
}

// SetTracerNickName gets a reference to the given string and assigns it to the TracerNickName field.
func (o *TraderProfitHisDetailResult) SetTracerNickName(v string) {
	o.TracerNickName = &v
}

func (o TraderProfitHisDetailResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CoinName) {
		toSerialize["coinName"] = o.CoinName
	}
	if !isNil(o.DistributeRatio) {
		toSerialize["distributeRatio"] = o.DistributeRatio
	}
	if !isNil(o.HeadPic) {
		toSerialize["headPic"] = o.HeadPic
	}
	if !isNil(o.NickName) {
		toSerialize["nickName"] = o.NickName
	}
	if !isNil(o.Profit) {
		toSerialize["profit"] = o.Profit
	}
	if !isNil(o.TracerNickName) {
		toSerialize["tracerNickName"] = o.TracerNickName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TraderProfitHisDetailResult) UnmarshalJSON(bytes []byte) (err error) {
	varTraderProfitHisDetailResult := _TraderProfitHisDetailResult{}

	if err = json.Unmarshal(bytes, &varTraderProfitHisDetailResult); err == nil {
		*o = TraderProfitHisDetailResult(varTraderProfitHisDetailResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "coinName")
		delete(additionalProperties, "distributeRatio")
		delete(additionalProperties, "headPic")
		delete(additionalProperties, "nickName")
		delete(additionalProperties, "profit")
		delete(additionalProperties, "tracerNickName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraderProfitHisDetailResult struct {
	value *TraderProfitHisDetailResult
	isSet bool
}

func (v NullableTraderProfitHisDetailResult) Get() *TraderProfitHisDetailResult {
	return v.value
}

func (v *NullableTraderProfitHisDetailResult) Set(val *TraderProfitHisDetailResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTraderProfitHisDetailResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTraderProfitHisDetailResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraderProfitHisDetailResult(val *TraderProfitHisDetailResult) *NullableTraderProfitHisDetailResult {
	return &NullableTraderProfitHisDetailResult{value: val, isSet: true}
}

func (v NullableTraderProfitHisDetailResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraderProfitHisDetailResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
