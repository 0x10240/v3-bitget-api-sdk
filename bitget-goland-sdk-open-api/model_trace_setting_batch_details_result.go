/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TraceSettingBatchDetailsResult struct for TraceSettingBatchDetailsResult
type TraceSettingBatchDetailsResult struct {
	BusinessLineCode     *string `json:"businessLineCode,omitempty"`
	MaxTraceAmount       *string `json:"maxTraceAmount,omitempty"`
	StopLossRation       *string `json:"stopLossRation,omitempty"`
	StopProfitRation     *string `json:"stopProfitRation,omitempty"`
	SymbolDisplayName    *string `json:"symbolDisplayName,omitempty"`
	SymbolId             *string `json:"symbolId,omitempty"`
	TraceType            *string `json:"traceType,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TraceSettingBatchDetailsResult TraceSettingBatchDetailsResult

// NewTraceSettingBatchDetailsResult instantiates a new TraceSettingBatchDetailsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraceSettingBatchDetailsResult() *TraceSettingBatchDetailsResult {
	this := TraceSettingBatchDetailsResult{}
	return &this
}

// NewTraceSettingBatchDetailsResultWithDefaults instantiates a new TraceSettingBatchDetailsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceSettingBatchDetailsResultWithDefaults() *TraceSettingBatchDetailsResult {
	this := TraceSettingBatchDetailsResult{}
	return &this
}

// GetBusinessLineCode returns the BusinessLineCode field value if set, zero value otherwise.
func (o *TraceSettingBatchDetailsResult) GetBusinessLineCode() string {
	if o == nil || isNil(o.BusinessLineCode) {
		var ret string
		return ret
	}
	return *o.BusinessLineCode
}

// GetBusinessLineCodeOk returns a tuple with the BusinessLineCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSettingBatchDetailsResult) GetBusinessLineCodeOk() (*string, bool) {
	if o == nil || isNil(o.BusinessLineCode) {
		return nil, false
	}
	return o.BusinessLineCode, true
}

// HasBusinessLineCode returns a boolean if a field has been set.
func (o *TraceSettingBatchDetailsResult) HasBusinessLineCode() bool {
	if o != nil && !isNil(o.BusinessLineCode) {
		return true
	}

	return false
}

// SetBusinessLineCode gets a reference to the given string and assigns it to the BusinessLineCode field.
func (o *TraceSettingBatchDetailsResult) SetBusinessLineCode(v string) {
	o.BusinessLineCode = &v
}

// GetMaxTraceAmount returns the MaxTraceAmount field value if set, zero value otherwise.
func (o *TraceSettingBatchDetailsResult) GetMaxTraceAmount() string {
	if o == nil || isNil(o.MaxTraceAmount) {
		var ret string
		return ret
	}
	return *o.MaxTraceAmount
}

// GetMaxTraceAmountOk returns a tuple with the MaxTraceAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSettingBatchDetailsResult) GetMaxTraceAmountOk() (*string, bool) {
	if o == nil || isNil(o.MaxTraceAmount) {
		return nil, false
	}
	return o.MaxTraceAmount, true
}

// HasMaxTraceAmount returns a boolean if a field has been set.
func (o *TraceSettingBatchDetailsResult) HasMaxTraceAmount() bool {
	if o != nil && !isNil(o.MaxTraceAmount) {
		return true
	}

	return false
}

// SetMaxTraceAmount gets a reference to the given string and assigns it to the MaxTraceAmount field.
func (o *TraceSettingBatchDetailsResult) SetMaxTraceAmount(v string) {
	o.MaxTraceAmount = &v
}

// GetStopLossRation returns the StopLossRation field value if set, zero value otherwise.
func (o *TraceSettingBatchDetailsResult) GetStopLossRation() string {
	if o == nil || isNil(o.StopLossRation) {
		var ret string
		return ret
	}
	return *o.StopLossRation
}

// GetStopLossRationOk returns a tuple with the StopLossRation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSettingBatchDetailsResult) GetStopLossRationOk() (*string, bool) {
	if o == nil || isNil(o.StopLossRation) {
		return nil, false
	}
	return o.StopLossRation, true
}

// HasStopLossRation returns a boolean if a field has been set.
func (o *TraceSettingBatchDetailsResult) HasStopLossRation() bool {
	if o != nil && !isNil(o.StopLossRation) {
		return true
	}

	return false
}

// SetStopLossRation gets a reference to the given string and assigns it to the StopLossRation field.
func (o *TraceSettingBatchDetailsResult) SetStopLossRation(v string) {
	o.StopLossRation = &v
}

// GetStopProfitRation returns the StopProfitRation field value if set, zero value otherwise.
func (o *TraceSettingBatchDetailsResult) GetStopProfitRation() string {
	if o == nil || isNil(o.StopProfitRation) {
		var ret string
		return ret
	}
	return *o.StopProfitRation
}

// GetStopProfitRationOk returns a tuple with the StopProfitRation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSettingBatchDetailsResult) GetStopProfitRationOk() (*string, bool) {
	if o == nil || isNil(o.StopProfitRation) {
		return nil, false
	}
	return o.StopProfitRation, true
}

// HasStopProfitRation returns a boolean if a field has been set.
func (o *TraceSettingBatchDetailsResult) HasStopProfitRation() bool {
	if o != nil && !isNil(o.StopProfitRation) {
		return true
	}

	return false
}

// SetStopProfitRation gets a reference to the given string and assigns it to the StopProfitRation field.
func (o *TraceSettingBatchDetailsResult) SetStopProfitRation(v string) {
	o.StopProfitRation = &v
}

// GetSymbolDisplayName returns the SymbolDisplayName field value if set, zero value otherwise.
func (o *TraceSettingBatchDetailsResult) GetSymbolDisplayName() string {
	if o == nil || isNil(o.SymbolDisplayName) {
		var ret string
		return ret
	}
	return *o.SymbolDisplayName
}

// GetSymbolDisplayNameOk returns a tuple with the SymbolDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSettingBatchDetailsResult) GetSymbolDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.SymbolDisplayName) {
		return nil, false
	}
	return o.SymbolDisplayName, true
}

// HasSymbolDisplayName returns a boolean if a field has been set.
func (o *TraceSettingBatchDetailsResult) HasSymbolDisplayName() bool {
	if o != nil && !isNil(o.SymbolDisplayName) {
		return true
	}

	return false
}

// SetSymbolDisplayName gets a reference to the given string and assigns it to the SymbolDisplayName field.
func (o *TraceSettingBatchDetailsResult) SetSymbolDisplayName(v string) {
	o.SymbolDisplayName = &v
}

// GetSymbolId returns the SymbolId field value if set, zero value otherwise.
func (o *TraceSettingBatchDetailsResult) GetSymbolId() string {
	if o == nil || isNil(o.SymbolId) {
		var ret string
		return ret
	}
	return *o.SymbolId
}

// GetSymbolIdOk returns a tuple with the SymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSettingBatchDetailsResult) GetSymbolIdOk() (*string, bool) {
	if o == nil || isNil(o.SymbolId) {
		return nil, false
	}
	return o.SymbolId, true
}

// HasSymbolId returns a boolean if a field has been set.
func (o *TraceSettingBatchDetailsResult) HasSymbolId() bool {
	if o != nil && !isNil(o.SymbolId) {
		return true
	}

	return false
}

// SetSymbolId gets a reference to the given string and assigns it to the SymbolId field.
func (o *TraceSettingBatchDetailsResult) SetSymbolId(v string) {
	o.SymbolId = &v
}

// GetTraceType returns the TraceType field value if set, zero value otherwise.
func (o *TraceSettingBatchDetailsResult) GetTraceType() string {
	if o == nil || isNil(o.TraceType) {
		var ret string
		return ret
	}
	return *o.TraceType
}

// GetTraceTypeOk returns a tuple with the TraceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraceSettingBatchDetailsResult) GetTraceTypeOk() (*string, bool) {
	if o == nil || isNil(o.TraceType) {
		return nil, false
	}
	return o.TraceType, true
}

// HasTraceType returns a boolean if a field has been set.
func (o *TraceSettingBatchDetailsResult) HasTraceType() bool {
	if o != nil && !isNil(o.TraceType) {
		return true
	}

	return false
}

// SetTraceType gets a reference to the given string and assigns it to the TraceType field.
func (o *TraceSettingBatchDetailsResult) SetTraceType(v string) {
	o.TraceType = &v
}

func (o TraceSettingBatchDetailsResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BusinessLineCode) {
		toSerialize["businessLineCode"] = o.BusinessLineCode
	}
	if !isNil(o.MaxTraceAmount) {
		toSerialize["maxTraceAmount"] = o.MaxTraceAmount
	}
	if !isNil(o.StopLossRation) {
		toSerialize["stopLossRation"] = o.StopLossRation
	}
	if !isNil(o.StopProfitRation) {
		toSerialize["stopProfitRation"] = o.StopProfitRation
	}
	if !isNil(o.SymbolDisplayName) {
		toSerialize["symbolDisplayName"] = o.SymbolDisplayName
	}
	if !isNil(o.SymbolId) {
		toSerialize["symbolId"] = o.SymbolId
	}
	if !isNil(o.TraceType) {
		toSerialize["traceType"] = o.TraceType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TraceSettingBatchDetailsResult) UnmarshalJSON(bytes []byte) (err error) {
	varTraceSettingBatchDetailsResult := _TraceSettingBatchDetailsResult{}

	if err = json.Unmarshal(bytes, &varTraceSettingBatchDetailsResult); err == nil {
		*o = TraceSettingBatchDetailsResult(varTraceSettingBatchDetailsResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "businessLineCode")
		delete(additionalProperties, "maxTraceAmount")
		delete(additionalProperties, "stopLossRation")
		delete(additionalProperties, "stopProfitRation")
		delete(additionalProperties, "symbolDisplayName")
		delete(additionalProperties, "symbolId")
		delete(additionalProperties, "traceType")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraceSettingBatchDetailsResult struct {
	value *TraceSettingBatchDetailsResult
	isSet bool
}

func (v NullableTraceSettingBatchDetailsResult) Get() *TraceSettingBatchDetailsResult {
	return v.value
}

func (v *NullableTraceSettingBatchDetailsResult) Set(val *TraceSettingBatchDetailsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTraceSettingBatchDetailsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTraceSettingBatchDetailsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraceSettingBatchDetailsResult(val *TraceSettingBatchDetailsResult) *NullableTraceSettingBatchDetailsResult {
	return &NullableTraceSettingBatchDetailsResult{value: val, isSet: true}
}

func (v NullableTraceSettingBatchDetailsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraceSettingBatchDetailsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
