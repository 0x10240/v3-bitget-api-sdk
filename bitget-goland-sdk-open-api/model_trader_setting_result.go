/*
Bitget Open API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TraderSettingResult struct for TraderSettingResult
type TraderSettingResult struct {
	Labels               []TraderSettingLablesResult         `json:"labels,omitempty"`
	OpenProduct          *bool                               `json:"openProduct,omitempty"`
	ShowAssetsMap        *bool                               `json:"showAssetsMap,omitempty"`
	ShowEquity           *bool                               `json:"showEquity,omitempty"`
	SupportProductCodes  []TraderSettingSupportProductResult `json:"supportProductCodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TraderSettingResult TraderSettingResult

// NewTraderSettingResult instantiates a new TraderSettingResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTraderSettingResult() *TraderSettingResult {
	this := TraderSettingResult{}
	return &this
}

// NewTraderSettingResultWithDefaults instantiates a new TraderSettingResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraderSettingResultWithDefaults() *TraderSettingResult {
	this := TraderSettingResult{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *TraderSettingResult) GetLabels() []TraderSettingLablesResult {
	if o == nil || isNil(o.Labels) {
		var ret []TraderSettingLablesResult
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderSettingResult) GetLabelsOk() ([]TraderSettingLablesResult, bool) {
	if o == nil || isNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *TraderSettingResult) HasLabels() bool {
	if o != nil && !isNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []TraderSettingLablesResult and assigns it to the Labels field.
func (o *TraderSettingResult) SetLabels(v []TraderSettingLablesResult) {
	o.Labels = v
}

// GetOpenProduct returns the OpenProduct field value if set, zero value otherwise.
func (o *TraderSettingResult) GetOpenProduct() bool {
	if o == nil || isNil(o.OpenProduct) {
		var ret bool
		return ret
	}
	return *o.OpenProduct
}

// GetOpenProductOk returns a tuple with the OpenProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderSettingResult) GetOpenProductOk() (*bool, bool) {
	if o == nil || isNil(o.OpenProduct) {
		return nil, false
	}
	return o.OpenProduct, true
}

// HasOpenProduct returns a boolean if a field has been set.
func (o *TraderSettingResult) HasOpenProduct() bool {
	if o != nil && !isNil(o.OpenProduct) {
		return true
	}

	return false
}

// SetOpenProduct gets a reference to the given bool and assigns it to the OpenProduct field.
func (o *TraderSettingResult) SetOpenProduct(v bool) {
	o.OpenProduct = &v
}

// GetShowAssetsMap returns the ShowAssetsMap field value if set, zero value otherwise.
func (o *TraderSettingResult) GetShowAssetsMap() bool {
	if o == nil || isNil(o.ShowAssetsMap) {
		var ret bool
		return ret
	}
	return *o.ShowAssetsMap
}

// GetShowAssetsMapOk returns a tuple with the ShowAssetsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderSettingResult) GetShowAssetsMapOk() (*bool, bool) {
	if o == nil || isNil(o.ShowAssetsMap) {
		return nil, false
	}
	return o.ShowAssetsMap, true
}

// HasShowAssetsMap returns a boolean if a field has been set.
func (o *TraderSettingResult) HasShowAssetsMap() bool {
	if o != nil && !isNil(o.ShowAssetsMap) {
		return true
	}

	return false
}

// SetShowAssetsMap gets a reference to the given bool and assigns it to the ShowAssetsMap field.
func (o *TraderSettingResult) SetShowAssetsMap(v bool) {
	o.ShowAssetsMap = &v
}

// GetShowEquity returns the ShowEquity field value if set, zero value otherwise.
func (o *TraderSettingResult) GetShowEquity() bool {
	if o == nil || isNil(o.ShowEquity) {
		var ret bool
		return ret
	}
	return *o.ShowEquity
}

// GetShowEquityOk returns a tuple with the ShowEquity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderSettingResult) GetShowEquityOk() (*bool, bool) {
	if o == nil || isNil(o.ShowEquity) {
		return nil, false
	}
	return o.ShowEquity, true
}

// HasShowEquity returns a boolean if a field has been set.
func (o *TraderSettingResult) HasShowEquity() bool {
	if o != nil && !isNil(o.ShowEquity) {
		return true
	}

	return false
}

// SetShowEquity gets a reference to the given bool and assigns it to the ShowEquity field.
func (o *TraderSettingResult) SetShowEquity(v bool) {
	o.ShowEquity = &v
}

// GetSupportProductCodes returns the SupportProductCodes field value if set, zero value otherwise.
func (o *TraderSettingResult) GetSupportProductCodes() []TraderSettingSupportProductResult {
	if o == nil || isNil(o.SupportProductCodes) {
		var ret []TraderSettingSupportProductResult
		return ret
	}
	return o.SupportProductCodes
}

// GetSupportProductCodesOk returns a tuple with the SupportProductCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TraderSettingResult) GetSupportProductCodesOk() ([]TraderSettingSupportProductResult, bool) {
	if o == nil || isNil(o.SupportProductCodes) {
		return nil, false
	}
	return o.SupportProductCodes, true
}

// HasSupportProductCodes returns a boolean if a field has been set.
func (o *TraderSettingResult) HasSupportProductCodes() bool {
	if o != nil && !isNil(o.SupportProductCodes) {
		return true
	}

	return false
}

// SetSupportProductCodes gets a reference to the given []TraderSettingSupportProductResult and assigns it to the SupportProductCodes field.
func (o *TraderSettingResult) SetSupportProductCodes(v []TraderSettingSupportProductResult) {
	o.SupportProductCodes = v
}

func (o TraderSettingResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !isNil(o.OpenProduct) {
		toSerialize["openProduct"] = o.OpenProduct
	}
	if !isNil(o.ShowAssetsMap) {
		toSerialize["showAssetsMap"] = o.ShowAssetsMap
	}
	if !isNil(o.ShowEquity) {
		toSerialize["showEquity"] = o.ShowEquity
	}
	if !isNil(o.SupportProductCodes) {
		toSerialize["supportProductCodes"] = o.SupportProductCodes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TraderSettingResult) UnmarshalJSON(bytes []byte) (err error) {
	varTraderSettingResult := _TraderSettingResult{}

	if err = json.Unmarshal(bytes, &varTraderSettingResult); err == nil {
		*o = TraderSettingResult(varTraderSettingResult)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "labels")
		delete(additionalProperties, "openProduct")
		delete(additionalProperties, "showAssetsMap")
		delete(additionalProperties, "showEquity")
		delete(additionalProperties, "supportProductCodes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTraderSettingResult struct {
	value *TraderSettingResult
	isSet bool
}

func (v NullableTraderSettingResult) Get() *TraderSettingResult {
	return v.value
}

func (v *NullableTraderSettingResult) Set(val *TraderSettingResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTraderSettingResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTraderSettingResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTraderSettingResult(val *TraderSettingResult) *NullableTraderSettingResult {
	return &NullableTraderSettingResult{value: val, isSet: true}
}

func (v NullableTraderSettingResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTraderSettingResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
