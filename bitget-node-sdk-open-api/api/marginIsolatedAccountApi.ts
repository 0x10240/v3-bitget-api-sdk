/**
 * Bitget Open API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult } from '../model/apiResponseResultOfListOfMarginIsolatedAssetsPopulationResult';
import { ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult } from '../model/apiResponseResultOfListOfMarginIsolatedAssetsRiskResult';
import { ApiResponseResultOfMarginIsolatedAssetsResult } from '../model/apiResponseResultOfMarginIsolatedAssetsResult';
import { ApiResponseResultOfMarginIsolatedBorrowLimitResult } from '../model/apiResponseResultOfMarginIsolatedBorrowLimitResult';
import { ApiResponseResultOfMarginIsolatedMaxBorrowResult } from '../model/apiResponseResultOfMarginIsolatedMaxBorrowResult';
import { ApiResponseResultOfMarginIsolatedRepayResult } from '../model/apiResponseResultOfMarginIsolatedRepayResult';
import { ApiResponseResultOfVoid } from '../model/apiResponseResultOfVoid';
import { MarginIsolatedAssetsRiskRequest } from '../model/marginIsolatedAssetsRiskRequest';
import { MarginIsolatedLimitRequest } from '../model/marginIsolatedLimitRequest';
import { MarginIsolatedMaxBorrowRequest } from '../model/marginIsolatedMaxBorrowRequest';
import { MarginIsolatedRepayRequest } from '../model/marginIsolatedRepayRequest';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.bitget.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum MarginIsolatedAccountApiApiKeys {
    ACCESS_KEY,
    ACCESS_PASSPHRASE,
    ACCESS_SIGN,
    ACCESS_TIMESTAMP,
    SECRET_KEY,
}

export class MarginIsolatedAccountApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'ACCESS_KEY': new ApiKeyAuth('header', 'ACCESS-KEY'),
        'ACCESS_PASSPHRASE': new ApiKeyAuth('header', 'ACCESS-PASSPHRASE'),
        'ACCESS_SIGN': new ApiKeyAuth('header', 'ACCESS-SIGN'),
        'ACCESS_TIMESTAMP': new ApiKeyAuth('header', 'ACCESS-TIMESTAMP'),
        'SECRET_KEY': new ApiKeyAuth('header', 'SECRET-KEY'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: MarginIsolatedAccountApiApiKeys, value: string) {
        (this.authentications as any)[MarginIsolatedAccountApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Get Assets
     * @summary assets
     * @param symbol symbol
     */
    public async marginIsolatedAccountAssets (symbol: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult;  }> {
        const localVarPath = this.basePath + '/api/margin/v1/isolated/account/assets';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'symbol' is not null or undefined
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling marginIsolatedAccountAssets.');
        }

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ACCESS_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_KEY.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_PASSPHRASE.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_PASSPHRASE.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_SIGN.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_SIGN.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_TIMESTAMP.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_TIMESTAMP.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.SECRET_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.SECRET_KEY.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * borrow
     * @summary borrow
     * @param marginIsolatedLimitRequest marginIsolatedLimitRequest
     */
    public async marginIsolatedAccountBorrow (marginIsolatedLimitRequest: MarginIsolatedLimitRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfMarginIsolatedBorrowLimitResult;  }> {
        const localVarPath = this.basePath + '/api/margin/v1/isolated/account/borrow';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'marginIsolatedLimitRequest' is not null or undefined
        if (marginIsolatedLimitRequest === null || marginIsolatedLimitRequest === undefined) {
            throw new Error('Required parameter marginIsolatedLimitRequest was null or undefined when calling marginIsolatedAccountBorrow.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(marginIsolatedLimitRequest, "MarginIsolatedLimitRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ACCESS_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_KEY.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_PASSPHRASE.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_PASSPHRASE.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_SIGN.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_SIGN.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_TIMESTAMP.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_TIMESTAMP.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.SECRET_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.SECRET_KEY.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfMarginIsolatedBorrowLimitResult;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiResponseResultOfMarginIsolatedBorrowLimitResult");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get MaxBorrowableAmount
     * @summary maxBorrowableAmount
     * @param marginIsolatedMaxBorrowRequest marginIsolatedMaxBorrowRequest
     */
    public async marginIsolatedAccountMaxBorrowableAmount (marginIsolatedMaxBorrowRequest: MarginIsolatedMaxBorrowRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfMarginIsolatedMaxBorrowResult;  }> {
        const localVarPath = this.basePath + '/api/margin/v1/isolated/account/maxBorrowableAmount';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'marginIsolatedMaxBorrowRequest' is not null or undefined
        if (marginIsolatedMaxBorrowRequest === null || marginIsolatedMaxBorrowRequest === undefined) {
            throw new Error('Required parameter marginIsolatedMaxBorrowRequest was null or undefined when calling marginIsolatedAccountMaxBorrowableAmount.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(marginIsolatedMaxBorrowRequest, "MarginIsolatedMaxBorrowRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ACCESS_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_KEY.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_PASSPHRASE.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_PASSPHRASE.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_SIGN.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_SIGN.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_TIMESTAMP.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_TIMESTAMP.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.SECRET_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.SECRET_KEY.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfMarginIsolatedMaxBorrowResult;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiResponseResultOfMarginIsolatedMaxBorrowResult");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get Max TransferOutAmount
     * @summary maxTransferOutAmount
     * @param coin coin
     * @param symbol symbol
     */
    public async marginIsolatedAccountMaxTransferOutAmount (coin: string, symbol: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfMarginIsolatedAssetsResult;  }> {
        const localVarPath = this.basePath + '/api/margin/v1/isolated/account/maxTransferOutAmount';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'coin' is not null or undefined
        if (coin === null || coin === undefined) {
            throw new Error('Required parameter coin was null or undefined when calling marginIsolatedAccountMaxTransferOutAmount.');
        }

        // verify required parameter 'symbol' is not null or undefined
        if (symbol === null || symbol === undefined) {
            throw new Error('Required parameter symbol was null or undefined when calling marginIsolatedAccountMaxTransferOutAmount.');
        }

        if (coin !== undefined) {
            localVarQueryParameters['coin'] = ObjectSerializer.serialize(coin, "string");
        }

        if (symbol !== undefined) {
            localVarQueryParameters['symbol'] = ObjectSerializer.serialize(symbol, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ACCESS_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_KEY.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_PASSPHRASE.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_PASSPHRASE.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_SIGN.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_SIGN.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_TIMESTAMP.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_TIMESTAMP.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.SECRET_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.SECRET_KEY.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfMarginIsolatedAssetsResult;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiResponseResultOfMarginIsolatedAssetsResult");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * repay
     * @summary repay
     * @param marginIsolatedRepayRequest marginIsolatedRepayRequest
     */
    public async marginIsolatedAccountRepay (marginIsolatedRepayRequest: MarginIsolatedRepayRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfMarginIsolatedRepayResult;  }> {
        const localVarPath = this.basePath + '/api/margin/v1/isolated/account/repay';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'marginIsolatedRepayRequest' is not null or undefined
        if (marginIsolatedRepayRequest === null || marginIsolatedRepayRequest === undefined) {
            throw new Error('Required parameter marginIsolatedRepayRequest was null or undefined when calling marginIsolatedAccountRepay.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(marginIsolatedRepayRequest, "MarginIsolatedRepayRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ACCESS_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_KEY.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_PASSPHRASE.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_PASSPHRASE.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_SIGN.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_SIGN.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_TIMESTAMP.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_TIMESTAMP.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.SECRET_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.SECRET_KEY.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfMarginIsolatedRepayResult;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiResponseResultOfMarginIsolatedRepayResult");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * riskRate
     * @summary riskRate
     * @param marginIsolatedAssetsRiskRequest marginIsolatedAssetsRiskRequest
     */
    public async marginIsolatedAccountRiskRate (marginIsolatedAssetsRiskRequest: MarginIsolatedAssetsRiskRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult;  }> {
        const localVarPath = this.basePath + '/api/margin/v1/isolated/account/riskRate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'marginIsolatedAssetsRiskRequest' is not null or undefined
        if (marginIsolatedAssetsRiskRequest === null || marginIsolatedAssetsRiskRequest === undefined) {
            throw new Error('Required parameter marginIsolatedAssetsRiskRequest was null or undefined when calling marginIsolatedAccountRiskRate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(marginIsolatedAssetsRiskRequest, "MarginIsolatedAssetsRiskRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.ACCESS_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_KEY.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_PASSPHRASE.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_PASSPHRASE.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_SIGN.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_SIGN.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.ACCESS_TIMESTAMP.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.ACCESS_TIMESTAMP.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.SECRET_KEY.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.SECRET_KEY.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
