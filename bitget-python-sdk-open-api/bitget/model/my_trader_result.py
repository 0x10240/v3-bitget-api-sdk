# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MyTraderResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            certificationType = schemas.StrSchema
            headPic = schemas.StrSchema
            traceTotalAmount = schemas.StrSchema
            traceTotalNetProfit = schemas.StrSchema
            traceTotalProfit = schemas.StrSchema
            tradeNickName = schemas.StrSchema
            traderUid = schemas.StrSchema
            __annotations__ = {
                "certificationType": certificationType,
                "headPic": headPic,
                "traceTotalAmount": traceTotalAmount,
                "traceTotalNetProfit": traceTotalNetProfit,
                "traceTotalProfit": traceTotalProfit,
                "tradeNickName": tradeNickName,
                "traderUid": traderUid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["certificationType"]) -> MetaOapg.properties.certificationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headPic"]) -> MetaOapg.properties.headPic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceTotalAmount"]) -> MetaOapg.properties.traceTotalAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceTotalNetProfit"]) -> MetaOapg.properties.traceTotalNetProfit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceTotalProfit"]) -> MetaOapg.properties.traceTotalProfit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tradeNickName"]) -> MetaOapg.properties.tradeNickName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traderUid"]) -> MetaOapg.properties.traderUid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["certificationType", "headPic", "traceTotalAmount", "traceTotalNetProfit", "traceTotalProfit", "tradeNickName", "traderUid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["certificationType"]) -> typing.Union[MetaOapg.properties.certificationType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headPic"]) -> typing.Union[MetaOapg.properties.headPic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceTotalAmount"]) -> typing.Union[MetaOapg.properties.traceTotalAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceTotalNetProfit"]) -> typing.Union[MetaOapg.properties.traceTotalNetProfit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceTotalProfit"]) -> typing.Union[MetaOapg.properties.traceTotalProfit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tradeNickName"]) -> typing.Union[MetaOapg.properties.tradeNickName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traderUid"]) -> typing.Union[MetaOapg.properties.traderUid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["certificationType", "headPic", "traceTotalAmount", "traceTotalNetProfit", "traceTotalProfit", "tradeNickName", "traderUid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        certificationType: typing.Union[MetaOapg.properties.certificationType, str, schemas.Unset] = schemas.unset,
        headPic: typing.Union[MetaOapg.properties.headPic, str, schemas.Unset] = schemas.unset,
        traceTotalAmount: typing.Union[MetaOapg.properties.traceTotalAmount, str, schemas.Unset] = schemas.unset,
        traceTotalNetProfit: typing.Union[MetaOapg.properties.traceTotalNetProfit, str, schemas.Unset] = schemas.unset,
        traceTotalProfit: typing.Union[MetaOapg.properties.traceTotalProfit, str, schemas.Unset] = schemas.unset,
        tradeNickName: typing.Union[MetaOapg.properties.tradeNickName, str, schemas.Unset] = schemas.unset,
        traderUid: typing.Union[MetaOapg.properties.traderUid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MyTraderResult':
        return super().__new__(
            cls,
            *args,
            certificationType=certificationType,
            headPic=headPic,
            traceTotalAmount=traceTotalAmount,
            traceTotalNetProfit=traceTotalNetProfit,
            traceTotalProfit=traceTotalProfit,
            tradeNickName=tradeNickName,
            traderUid=traderUid,
            _configuration=_configuration,
            **kwargs,
        )
