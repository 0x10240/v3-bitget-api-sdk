# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class TraderProfitHisDetailResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            coinName = schemas.StrSchema
            distributeRatio = schemas.StrSchema
            headPic = schemas.StrSchema
            nickName = schemas.StrSchema
            profit = schemas.StrSchema
            tracerNickName = schemas.StrSchema
            __annotations__ = {
                "coinName": coinName,
                "distributeRatio": distributeRatio,
                "headPic": headPic,
                "nickName": nickName,
                "profit": profit,
                "tracerNickName": tracerNickName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coinName"]) -> MetaOapg.properties.coinName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distributeRatio"]) -> MetaOapg.properties.distributeRatio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["headPic"]) -> MetaOapg.properties.headPic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nickName"]) -> MetaOapg.properties.nickName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profit"]) -> MetaOapg.properties.profit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracerNickName"]) -> MetaOapg.properties.tracerNickName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["coinName", "distributeRatio", "headPic", "nickName", "profit", "tracerNickName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coinName"]) -> typing.Union[MetaOapg.properties.coinName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distributeRatio"]) -> typing.Union[MetaOapg.properties.distributeRatio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["headPic"]) -> typing.Union[MetaOapg.properties.headPic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nickName"]) -> typing.Union[MetaOapg.properties.nickName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profit"]) -> typing.Union[MetaOapg.properties.profit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracerNickName"]) -> typing.Union[MetaOapg.properties.tracerNickName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["coinName", "distributeRatio", "headPic", "nickName", "profit", "tracerNickName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        coinName: typing.Union[MetaOapg.properties.coinName, str, schemas.Unset] = schemas.unset,
        distributeRatio: typing.Union[MetaOapg.properties.distributeRatio, str, schemas.Unset] = schemas.unset,
        headPic: typing.Union[MetaOapg.properties.headPic, str, schemas.Unset] = schemas.unset,
        nickName: typing.Union[MetaOapg.properties.nickName, str, schemas.Unset] = schemas.unset,
        profit: typing.Union[MetaOapg.properties.profit, str, schemas.Unset] = schemas.unset,
        tracerNickName: typing.Union[MetaOapg.properties.tracerNickName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraderProfitHisDetailResult':
        return super().__new__(
            cls,
            *args,
            coinName=coinName,
            distributeRatio=distributeRatio,
            headPic=headPic,
            nickName=nickName,
            profit=profit,
            tracerNickName=tracerNickName,
            _configuration=_configuration,
            **kwargs,
        )
