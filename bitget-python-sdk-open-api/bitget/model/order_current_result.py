# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class OrderCurrentResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            buyDelegateCount = schemas.StrSchema
            buyPrice = schemas.StrSchema
            buyTime = schemas.StrSchema
            dealCount = schemas.StrSchema
            holdCount = schemas.StrSchema
            profit = schemas.StrSchema
            profitRate = schemas.StrSchema
            stopLossPrice = schemas.StrSchema
            stopProfitPrice = schemas.StrSchema
            symbolDisplayName = schemas.StrSchema
            symbolId = schemas.StrSchema
            trackingNo = schemas.StrSchema
            trackingType = schemas.StrSchema
            __annotations__ = {
                "buyDelegateCount": buyDelegateCount,
                "buyPrice": buyPrice,
                "buyTime": buyTime,
                "dealCount": dealCount,
                "holdCount": holdCount,
                "profit": profit,
                "profitRate": profitRate,
                "stopLossPrice": stopLossPrice,
                "stopProfitPrice": stopProfitPrice,
                "symbolDisplayName": symbolDisplayName,
                "symbolId": symbolId,
                "trackingNo": trackingNo,
                "trackingType": trackingType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyDelegateCount"]) -> MetaOapg.properties.buyDelegateCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyPrice"]) -> MetaOapg.properties.buyPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyTime"]) -> MetaOapg.properties.buyTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dealCount"]) -> MetaOapg.properties.dealCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holdCount"]) -> MetaOapg.properties.holdCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profit"]) -> MetaOapg.properties.profit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profitRate"]) -> MetaOapg.properties.profitRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopLossPrice"]) -> MetaOapg.properties.stopLossPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopProfitPrice"]) -> MetaOapg.properties.stopProfitPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolDisplayName"]) -> MetaOapg.properties.symbolDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolId"]) -> MetaOapg.properties.symbolId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackingNo"]) -> MetaOapg.properties.trackingNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackingType"]) -> MetaOapg.properties.trackingType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["buyDelegateCount", "buyPrice", "buyTime", "dealCount", "holdCount", "profit", "profitRate", "stopLossPrice", "stopProfitPrice", "symbolDisplayName", "symbolId", "trackingNo", "trackingType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyDelegateCount"]) -> typing.Union[MetaOapg.properties.buyDelegateCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyPrice"]) -> typing.Union[MetaOapg.properties.buyPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyTime"]) -> typing.Union[MetaOapg.properties.buyTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dealCount"]) -> typing.Union[MetaOapg.properties.dealCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holdCount"]) -> typing.Union[MetaOapg.properties.holdCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profit"]) -> typing.Union[MetaOapg.properties.profit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profitRate"]) -> typing.Union[MetaOapg.properties.profitRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopLossPrice"]) -> typing.Union[MetaOapg.properties.stopLossPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopProfitPrice"]) -> typing.Union[MetaOapg.properties.stopProfitPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolDisplayName"]) -> typing.Union[MetaOapg.properties.symbolDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolId"]) -> typing.Union[MetaOapg.properties.symbolId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackingNo"]) -> typing.Union[MetaOapg.properties.trackingNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackingType"]) -> typing.Union[MetaOapg.properties.trackingType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["buyDelegateCount", "buyPrice", "buyTime", "dealCount", "holdCount", "profit", "profitRate", "stopLossPrice", "stopProfitPrice", "symbolDisplayName", "symbolId", "trackingNo", "trackingType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        buyDelegateCount: typing.Union[MetaOapg.properties.buyDelegateCount, str, schemas.Unset] = schemas.unset,
        buyPrice: typing.Union[MetaOapg.properties.buyPrice, str, schemas.Unset] = schemas.unset,
        buyTime: typing.Union[MetaOapg.properties.buyTime, str, schemas.Unset] = schemas.unset,
        dealCount: typing.Union[MetaOapg.properties.dealCount, str, schemas.Unset] = schemas.unset,
        holdCount: typing.Union[MetaOapg.properties.holdCount, str, schemas.Unset] = schemas.unset,
        profit: typing.Union[MetaOapg.properties.profit, str, schemas.Unset] = schemas.unset,
        profitRate: typing.Union[MetaOapg.properties.profitRate, str, schemas.Unset] = schemas.unset,
        stopLossPrice: typing.Union[MetaOapg.properties.stopLossPrice, str, schemas.Unset] = schemas.unset,
        stopProfitPrice: typing.Union[MetaOapg.properties.stopProfitPrice, str, schemas.Unset] = schemas.unset,
        symbolDisplayName: typing.Union[MetaOapg.properties.symbolDisplayName, str, schemas.Unset] = schemas.unset,
        symbolId: typing.Union[MetaOapg.properties.symbolId, str, schemas.Unset] = schemas.unset,
        trackingNo: typing.Union[MetaOapg.properties.trackingNo, str, schemas.Unset] = schemas.unset,
        trackingType: typing.Union[MetaOapg.properties.trackingType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderCurrentResult':
        return super().__new__(
            cls,
            *args,
            buyDelegateCount=buyDelegateCount,
            buyPrice=buyPrice,
            buyTime=buyTime,
            dealCount=dealCount,
            holdCount=holdCount,
            profit=profit,
            profitRate=profitRate,
            stopLossPrice=stopLossPrice,
            stopProfitPrice=stopProfitPrice,
            symbolDisplayName=symbolDisplayName,
            symbolId=symbolId,
            trackingNo=trackingNo,
            trackingType=trackingType,
            _configuration=_configuration,
            **kwargs,
        )
