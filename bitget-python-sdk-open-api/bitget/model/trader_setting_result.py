# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class TraderSettingResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class labels(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TraderSettingLablesResult']:
                        return TraderSettingLablesResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TraderSettingLablesResult'], typing.List['TraderSettingLablesResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TraderSettingLablesResult':
                    return super().__getitem__(i)
            openProduct = schemas.BoolSchema
            showAssetsMap = schemas.BoolSchema
            showEquity = schemas.BoolSchema
            
            
            class supportProductCodes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TraderSettingSupportProductResult']:
                        return TraderSettingSupportProductResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TraderSettingSupportProductResult'], typing.List['TraderSettingSupportProductResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supportProductCodes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TraderSettingSupportProductResult':
                    return super().__getitem__(i)
            __annotations__ = {
                "labels": labels,
                "openProduct": openProduct,
                "showAssetsMap": showAssetsMap,
                "showEquity": showEquity,
                "supportProductCodes": supportProductCodes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openProduct"]) -> MetaOapg.properties.openProduct: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showAssetsMap"]) -> MetaOapg.properties.showAssetsMap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["showEquity"]) -> MetaOapg.properties.showEquity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supportProductCodes"]) -> MetaOapg.properties.supportProductCodes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["labels", "openProduct", "showAssetsMap", "showEquity", "supportProductCodes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openProduct"]) -> typing.Union[MetaOapg.properties.openProduct, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showAssetsMap"]) -> typing.Union[MetaOapg.properties.showAssetsMap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["showEquity"]) -> typing.Union[MetaOapg.properties.showEquity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supportProductCodes"]) -> typing.Union[MetaOapg.properties.supportProductCodes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["labels", "openProduct", "showAssetsMap", "showEquity", "supportProductCodes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        labels: typing.Union[MetaOapg.properties.labels, list, tuple, schemas.Unset] = schemas.unset,
        openProduct: typing.Union[MetaOapg.properties.openProduct, bool, schemas.Unset] = schemas.unset,
        showAssetsMap: typing.Union[MetaOapg.properties.showAssetsMap, bool, schemas.Unset] = schemas.unset,
        showEquity: typing.Union[MetaOapg.properties.showEquity, bool, schemas.Unset] = schemas.unset,
        supportProductCodes: typing.Union[MetaOapg.properties.supportProductCodes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraderSettingResult':
        return super().__new__(
            cls,
            *args,
            labels=labels,
            openProduct=openProduct,
            showAssetsMap=showAssetsMap,
            showEquity=showEquity,
            supportProductCodes=supportProductCodes,
            _configuration=_configuration,
            **kwargs,
        )

from bitget.model.trader_setting_lables_result import TraderSettingLablesResult
from bitget.model.trader_setting_support_product_result import TraderSettingSupportProductResult
