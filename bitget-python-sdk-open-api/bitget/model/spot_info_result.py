# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class SpotInfoResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            maxCount = schemas.StrSchema
            surplusCount = schemas.StrSchema
            symbolId = schemas.StrSchema
            symbolName = schemas.StrSchema
            __annotations__ = {
                "maxCount": maxCount,
                "surplusCount": surplusCount,
                "symbolId": symbolId,
                "symbolName": symbolName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxCount"]) -> MetaOapg.properties.maxCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surplusCount"]) -> MetaOapg.properties.surplusCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolId"]) -> MetaOapg.properties.symbolId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolName"]) -> MetaOapg.properties.symbolName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["maxCount", "surplusCount", "symbolId", "symbolName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxCount"]) -> typing.Union[MetaOapg.properties.maxCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surplusCount"]) -> typing.Union[MetaOapg.properties.surplusCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolId"]) -> typing.Union[MetaOapg.properties.symbolId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolName"]) -> typing.Union[MetaOapg.properties.symbolName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["maxCount", "surplusCount", "symbolId", "symbolName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        maxCount: typing.Union[MetaOapg.properties.maxCount, str, schemas.Unset] = schemas.unset,
        surplusCount: typing.Union[MetaOapg.properties.surplusCount, str, schemas.Unset] = schemas.unset,
        symbolId: typing.Union[MetaOapg.properties.symbolId, str, schemas.Unset] = schemas.unset,
        symbolName: typing.Union[MetaOapg.properties.symbolName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SpotInfoResult':
        return super().__new__(
            cls,
            *args,
            maxCount=maxCount,
            surplusCount=surplusCount,
            symbolId=symbolId,
            symbolName=symbolName,
            _configuration=_configuration,
            **kwargs,
        )
