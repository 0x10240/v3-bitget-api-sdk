# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class OrderHistoryResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            buyLeftTokenId = schemas.StrSchema
            buyPrice = schemas.StrSchema
            buyRightTokenId = schemas.StrSchema
            buyTime = schemas.StrSchema
            dealCount = schemas.StrSchema
            netProfit = schemas.StrSchema
            profit = schemas.StrSchema
            profitRate = schemas.StrSchema
            sellPrice = schemas.StrSchema
            sellTime = schemas.StrSchema
            symbolDisplayName = schemas.StrSchema
            symbolId = schemas.StrSchema
            trackingNo = schemas.StrSchema
            traderUserId = schemas.StrSchema
            __annotations__ = {
                "buyLeftTokenId": buyLeftTokenId,
                "buyPrice": buyPrice,
                "buyRightTokenId": buyRightTokenId,
                "buyTime": buyTime,
                "dealCount": dealCount,
                "netProfit": netProfit,
                "profit": profit,
                "profitRate": profitRate,
                "sellPrice": sellPrice,
                "sellTime": sellTime,
                "symbolDisplayName": symbolDisplayName,
                "symbolId": symbolId,
                "trackingNo": trackingNo,
                "traderUserId": traderUserId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyLeftTokenId"]) -> MetaOapg.properties.buyLeftTokenId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyPrice"]) -> MetaOapg.properties.buyPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyRightTokenId"]) -> MetaOapg.properties.buyRightTokenId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buyTime"]) -> MetaOapg.properties.buyTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dealCount"]) -> MetaOapg.properties.dealCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netProfit"]) -> MetaOapg.properties.netProfit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profit"]) -> MetaOapg.properties.profit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profitRate"]) -> MetaOapg.properties.profitRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sellPrice"]) -> MetaOapg.properties.sellPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sellTime"]) -> MetaOapg.properties.sellTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolDisplayName"]) -> MetaOapg.properties.symbolDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolId"]) -> MetaOapg.properties.symbolId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackingNo"]) -> MetaOapg.properties.trackingNo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traderUserId"]) -> MetaOapg.properties.traderUserId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["buyLeftTokenId", "buyPrice", "buyRightTokenId", "buyTime", "dealCount", "netProfit", "profit", "profitRate", "sellPrice", "sellTime", "symbolDisplayName", "symbolId", "trackingNo", "traderUserId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyLeftTokenId"]) -> typing.Union[MetaOapg.properties.buyLeftTokenId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyPrice"]) -> typing.Union[MetaOapg.properties.buyPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyRightTokenId"]) -> typing.Union[MetaOapg.properties.buyRightTokenId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buyTime"]) -> typing.Union[MetaOapg.properties.buyTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dealCount"]) -> typing.Union[MetaOapg.properties.dealCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netProfit"]) -> typing.Union[MetaOapg.properties.netProfit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profit"]) -> typing.Union[MetaOapg.properties.profit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profitRate"]) -> typing.Union[MetaOapg.properties.profitRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sellPrice"]) -> typing.Union[MetaOapg.properties.sellPrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sellTime"]) -> typing.Union[MetaOapg.properties.sellTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolDisplayName"]) -> typing.Union[MetaOapg.properties.symbolDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolId"]) -> typing.Union[MetaOapg.properties.symbolId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackingNo"]) -> typing.Union[MetaOapg.properties.trackingNo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traderUserId"]) -> typing.Union[MetaOapg.properties.traderUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["buyLeftTokenId", "buyPrice", "buyRightTokenId", "buyTime", "dealCount", "netProfit", "profit", "profitRate", "sellPrice", "sellTime", "symbolDisplayName", "symbolId", "trackingNo", "traderUserId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        buyLeftTokenId: typing.Union[MetaOapg.properties.buyLeftTokenId, str, schemas.Unset] = schemas.unset,
        buyPrice: typing.Union[MetaOapg.properties.buyPrice, str, schemas.Unset] = schemas.unset,
        buyRightTokenId: typing.Union[MetaOapg.properties.buyRightTokenId, str, schemas.Unset] = schemas.unset,
        buyTime: typing.Union[MetaOapg.properties.buyTime, str, schemas.Unset] = schemas.unset,
        dealCount: typing.Union[MetaOapg.properties.dealCount, str, schemas.Unset] = schemas.unset,
        netProfit: typing.Union[MetaOapg.properties.netProfit, str, schemas.Unset] = schemas.unset,
        profit: typing.Union[MetaOapg.properties.profit, str, schemas.Unset] = schemas.unset,
        profitRate: typing.Union[MetaOapg.properties.profitRate, str, schemas.Unset] = schemas.unset,
        sellPrice: typing.Union[MetaOapg.properties.sellPrice, str, schemas.Unset] = schemas.unset,
        sellTime: typing.Union[MetaOapg.properties.sellTime, str, schemas.Unset] = schemas.unset,
        symbolDisplayName: typing.Union[MetaOapg.properties.symbolDisplayName, str, schemas.Unset] = schemas.unset,
        symbolId: typing.Union[MetaOapg.properties.symbolId, str, schemas.Unset] = schemas.unset,
        trackingNo: typing.Union[MetaOapg.properties.trackingNo, str, schemas.Unset] = schemas.unset,
        traderUserId: typing.Union[MetaOapg.properties.traderUserId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderHistoryResult':
        return super().__new__(
            cls,
            *args,
            buyLeftTokenId=buyLeftTokenId,
            buyPrice=buyPrice,
            buyRightTokenId=buyRightTokenId,
            buyTime=buyTime,
            dealCount=dealCount,
            netProfit=netProfit,
            profit=profit,
            profitRate=profitRate,
            sellPrice=sellPrice,
            sellTime=sellTime,
            symbolDisplayName=symbolDisplayName,
            symbolId=symbolId,
            trackingNo=trackingNo,
            traderUserId=traderUserId,
            _configuration=_configuration,
            **kwargs,
        )
