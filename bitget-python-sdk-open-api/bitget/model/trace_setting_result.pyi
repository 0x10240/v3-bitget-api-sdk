# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class TraceSettingResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            isMyTrader = schemas.BoolSchema
            profitRate = schemas.StrSchema
            settingType = schemas.StrSchema
            settledInDays = schemas.StrSchema
            
            
            class traceBatchDetails(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TraceSettingBatchDetailsResult']:
                        return TraceSettingBatchDetailsResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TraceSettingBatchDetailsResult'], typing.List['TraceSettingBatchDetailsResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'traceBatchDetails':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TraceSettingBatchDetailsResult':
                    return super().__getitem__(i)
            
            
            class traceProductConfigs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TraceSettingProductConfigsResult']:
                        return TraceSettingProductConfigsResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TraceSettingProductConfigsResult'], typing.List['TraceSettingProductConfigsResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'traceProductConfigs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TraceSettingProductConfigsResult':
                    return super().__getitem__(i)
            traderHeadPic = schemas.StrSchema
            traderNickName = schemas.StrSchema
            __annotations__ = {
                "isMyTrader": isMyTrader,
                "profitRate": profitRate,
                "settingType": settingType,
                "settledInDays": settledInDays,
                "traceBatchDetails": traceBatchDetails,
                "traceProductConfigs": traceProductConfigs,
                "traderHeadPic": traderHeadPic,
                "traderNickName": traderNickName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMyTrader"]) -> MetaOapg.properties.isMyTrader: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profitRate"]) -> MetaOapg.properties.profitRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settingType"]) -> MetaOapg.properties.settingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settledInDays"]) -> MetaOapg.properties.settledInDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceBatchDetails"]) -> MetaOapg.properties.traceBatchDetails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceProductConfigs"]) -> MetaOapg.properties.traceProductConfigs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traderHeadPic"]) -> MetaOapg.properties.traderHeadPic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traderNickName"]) -> MetaOapg.properties.traderNickName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["isMyTrader", "profitRate", "settingType", "settledInDays", "traceBatchDetails", "traceProductConfigs", "traderHeadPic", "traderNickName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMyTrader"]) -> typing.Union[MetaOapg.properties.isMyTrader, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profitRate"]) -> typing.Union[MetaOapg.properties.profitRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settingType"]) -> typing.Union[MetaOapg.properties.settingType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settledInDays"]) -> typing.Union[MetaOapg.properties.settledInDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceBatchDetails"]) -> typing.Union[MetaOapg.properties.traceBatchDetails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceProductConfigs"]) -> typing.Union[MetaOapg.properties.traceProductConfigs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traderHeadPic"]) -> typing.Union[MetaOapg.properties.traderHeadPic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traderNickName"]) -> typing.Union[MetaOapg.properties.traderNickName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["isMyTrader", "profitRate", "settingType", "settledInDays", "traceBatchDetails", "traceProductConfigs", "traderHeadPic", "traderNickName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isMyTrader: typing.Union[MetaOapg.properties.isMyTrader, bool, schemas.Unset] = schemas.unset,
        profitRate: typing.Union[MetaOapg.properties.profitRate, str, schemas.Unset] = schemas.unset,
        settingType: typing.Union[MetaOapg.properties.settingType, str, schemas.Unset] = schemas.unset,
        settledInDays: typing.Union[MetaOapg.properties.settledInDays, str, schemas.Unset] = schemas.unset,
        traceBatchDetails: typing.Union[MetaOapg.properties.traceBatchDetails, list, tuple, schemas.Unset] = schemas.unset,
        traceProductConfigs: typing.Union[MetaOapg.properties.traceProductConfigs, list, tuple, schemas.Unset] = schemas.unset,
        traderHeadPic: typing.Union[MetaOapg.properties.traderHeadPic, str, schemas.Unset] = schemas.unset,
        traderNickName: typing.Union[MetaOapg.properties.traderNickName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraceSettingResult':
        return super().__new__(
            cls,
            *args,
            isMyTrader=isMyTrader,
            profitRate=profitRate,
            settingType=settingType,
            settledInDays=settledInDays,
            traceBatchDetails=traceBatchDetails,
            traceProductConfigs=traceProductConfigs,
            traderHeadPic=traderHeadPic,
            traderNickName=traderNickName,
            _configuration=_configuration,
            **kwargs,
        )

from bitget.model.trace_setting_batch_details_result import TraceSettingBatchDetailsResult
from bitget.model.trace_setting_product_configs_result import TraceSettingProductConfigsResult
