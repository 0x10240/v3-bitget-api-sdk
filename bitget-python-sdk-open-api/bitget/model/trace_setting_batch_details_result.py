# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class TraceSettingBatchDetailsResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            businessLineCode = schemas.StrSchema
            maxTraceAmount = schemas.StrSchema
            stopLossRation = schemas.StrSchema
            stopProfitRation = schemas.StrSchema
            symbolDisplayName = schemas.StrSchema
            symbolId = schemas.StrSchema
            traceType = schemas.StrSchema
            __annotations__ = {
                "businessLineCode": businessLineCode,
                "maxTraceAmount": maxTraceAmount,
                "stopLossRation": stopLossRation,
                "stopProfitRation": stopProfitRation,
                "symbolDisplayName": symbolDisplayName,
                "symbolId": symbolId,
                "traceType": traceType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessLineCode"]) -> MetaOapg.properties.businessLineCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxTraceAmount"]) -> MetaOapg.properties.maxTraceAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopLossRation"]) -> MetaOapg.properties.stopLossRation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopProfitRation"]) -> MetaOapg.properties.stopProfitRation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolDisplayName"]) -> MetaOapg.properties.symbolDisplayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolId"]) -> MetaOapg.properties.symbolId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceType"]) -> MetaOapg.properties.traceType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["businessLineCode", "maxTraceAmount", "stopLossRation", "stopProfitRation", "symbolDisplayName", "symbolId", "traceType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessLineCode"]) -> typing.Union[MetaOapg.properties.businessLineCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxTraceAmount"]) -> typing.Union[MetaOapg.properties.maxTraceAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopLossRation"]) -> typing.Union[MetaOapg.properties.stopLossRation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopProfitRation"]) -> typing.Union[MetaOapg.properties.stopProfitRation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolDisplayName"]) -> typing.Union[MetaOapg.properties.symbolDisplayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolId"]) -> typing.Union[MetaOapg.properties.symbolId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceType"]) -> typing.Union[MetaOapg.properties.traceType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["businessLineCode", "maxTraceAmount", "stopLossRation", "stopProfitRation", "symbolDisplayName", "symbolId", "traceType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        businessLineCode: typing.Union[MetaOapg.properties.businessLineCode, str, schemas.Unset] = schemas.unset,
        maxTraceAmount: typing.Union[MetaOapg.properties.maxTraceAmount, str, schemas.Unset] = schemas.unset,
        stopLossRation: typing.Union[MetaOapg.properties.stopLossRation, str, schemas.Unset] = schemas.unset,
        stopProfitRation: typing.Union[MetaOapg.properties.stopProfitRation, str, schemas.Unset] = schemas.unset,
        symbolDisplayName: typing.Union[MetaOapg.properties.symbolDisplayName, str, schemas.Unset] = schemas.unset,
        symbolId: typing.Union[MetaOapg.properties.symbolId, str, schemas.Unset] = schemas.unset,
        traceType: typing.Union[MetaOapg.properties.traceType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraceSettingBatchDetailsResult':
        return super().__new__(
            cls,
            *args,
            businessLineCode=businessLineCode,
            maxTraceAmount=maxTraceAmount,
            stopLossRation=stopLossRation,
            stopProfitRation=stopProfitRation,
            symbolDisplayName=symbolDisplayName,
            symbolId=symbolId,
            traceType=traceType,
            _configuration=_configuration,
            **kwargs,
        )
