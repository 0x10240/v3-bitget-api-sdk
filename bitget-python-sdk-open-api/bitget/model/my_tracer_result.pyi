# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class MyTracerResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            accountEquity = schemas.StrSchema
            canRemoveTraceUser = schemas.BoolSchema
            tracerHeadPic = schemas.StrSchema
            tracerNickName = schemas.StrSchema
            tracerUserId = schemas.StrSchema
            __annotations__ = {
                "accountEquity": accountEquity,
                "canRemoveTraceUser": canRemoveTraceUser,
                "tracerHeadPic": tracerHeadPic,
                "tracerNickName": tracerNickName,
                "tracerUserId": tracerUserId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountEquity"]) -> MetaOapg.properties.accountEquity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["canRemoveTraceUser"]) -> MetaOapg.properties.canRemoveTraceUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracerHeadPic"]) -> MetaOapg.properties.tracerHeadPic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracerNickName"]) -> MetaOapg.properties.tracerNickName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracerUserId"]) -> MetaOapg.properties.tracerUserId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accountEquity", "canRemoveTraceUser", "tracerHeadPic", "tracerNickName", "tracerUserId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountEquity"]) -> typing.Union[MetaOapg.properties.accountEquity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["canRemoveTraceUser"]) -> typing.Union[MetaOapg.properties.canRemoveTraceUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracerHeadPic"]) -> typing.Union[MetaOapg.properties.tracerHeadPic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracerNickName"]) -> typing.Union[MetaOapg.properties.tracerNickName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracerUserId"]) -> typing.Union[MetaOapg.properties.tracerUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accountEquity", "canRemoveTraceUser", "tracerHeadPic", "tracerNickName", "tracerUserId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountEquity: typing.Union[MetaOapg.properties.accountEquity, str, schemas.Unset] = schemas.unset,
        canRemoveTraceUser: typing.Union[MetaOapg.properties.canRemoveTraceUser, bool, schemas.Unset] = schemas.unset,
        tracerHeadPic: typing.Union[MetaOapg.properties.tracerHeadPic, str, schemas.Unset] = schemas.unset,
        tracerNickName: typing.Union[MetaOapg.properties.tracerNickName, str, schemas.Unset] = schemas.unset,
        tracerUserId: typing.Union[MetaOapg.properties.tracerUserId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MyTracerResult':
        return super().__new__(
            cls,
            *args,
            accountEquity=accountEquity,
            canRemoveTraceUser=canRemoveTraceUser,
            tracerHeadPic=tracerHeadPic,
            tracerNickName=tracerNickName,
            tracerUserId=tracerUserId,
            _configuration=_configuration,
            **kwargs,
        )
