# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class UpdateTpslRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "trackingNo",
            "stopProfitPrice",
            "stopLossPrice",
        }
        
        class properties:
            stopLossPrice = schemas.StrSchema
            stopProfitPrice = schemas.StrSchema
            trackingNo = schemas.StrSchema
            __annotations__ = {
                "stopLossPrice": stopLossPrice,
                "stopProfitPrice": stopProfitPrice,
                "trackingNo": trackingNo,
            }
    
    trackingNo: MetaOapg.properties.trackingNo
    stopProfitPrice: MetaOapg.properties.stopProfitPrice
    stopLossPrice: MetaOapg.properties.stopLossPrice
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopLossPrice"]) -> MetaOapg.properties.stopLossPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopProfitPrice"]) -> MetaOapg.properties.stopProfitPrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trackingNo"]) -> MetaOapg.properties.trackingNo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stopLossPrice", "stopProfitPrice", "trackingNo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopLossPrice"]) -> MetaOapg.properties.stopLossPrice: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopProfitPrice"]) -> MetaOapg.properties.stopProfitPrice: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trackingNo"]) -> MetaOapg.properties.trackingNo: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stopLossPrice", "stopProfitPrice", "trackingNo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        trackingNo: typing.Union[MetaOapg.properties.trackingNo, str, ],
        stopProfitPrice: typing.Union[MetaOapg.properties.stopProfitPrice, str, ],
        stopLossPrice: typing.Union[MetaOapg.properties.stopLossPrice, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateTpslRequest':
        return super().__new__(
            cls,
            *args,
            trackingNo=trackingNo,
            stopProfitPrice=stopProfitPrice,
            stopLossPrice=stopLossPrice,
            _configuration=_configuration,
            **kwargs,
        )
