# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class TraceConfigRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "traderUserId",
            "settingType",
        }
        
        class properties:
            settingType = schemas.StrSchema
            traderUserId = schemas.StrSchema
            
            
            class setting(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TraceConfigSettingRequest']:
                        return TraceConfigSettingRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TraceConfigSettingRequest'], typing.List['TraceConfigSettingRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'setting':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TraceConfigSettingRequest':
                    return super().__getitem__(i)
            __annotations__ = {
                "settingType": settingType,
                "traderUserId": traderUserId,
                "setting": setting,
            }
    
    traderUserId: MetaOapg.properties.traderUserId
    settingType: MetaOapg.properties.settingType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settingType"]) -> MetaOapg.properties.settingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traderUserId"]) -> MetaOapg.properties.traderUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setting"]) -> MetaOapg.properties.setting: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["settingType", "traderUserId", "setting", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settingType"]) -> MetaOapg.properties.settingType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traderUserId"]) -> MetaOapg.properties.traderUserId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setting"]) -> typing.Union[MetaOapg.properties.setting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["settingType", "traderUserId", "setting", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        traderUserId: typing.Union[MetaOapg.properties.traderUserId, str, ],
        settingType: typing.Union[MetaOapg.properties.settingType, str, ],
        setting: typing.Union[MetaOapg.properties.setting, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraceConfigRequest':
        return super().__new__(
            cls,
            *args,
            traderUserId=traderUserId,
            settingType=settingType,
            setting=setting,
            _configuration=_configuration,
            **kwargs,
        )

from bitget.model.trace_config_setting_request import TraceConfigSettingRequest
