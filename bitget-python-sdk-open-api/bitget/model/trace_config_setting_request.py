# coding: utf-8

"""
    Bitget Open API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from bitget import schemas  # noqa: F401


class TraceConfigSettingRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "symbolId",
            "traceValue",
            "traceType",
            "stopLossRation",
            "stopProfitRation",
            "maxHoldCount",
        }
        
        class properties:
            maxHoldCount = schemas.StrSchema
            stopLossRation = schemas.StrSchema
            stopProfitRation = schemas.StrSchema
            symbolId = schemas.StrSchema
            traceType = schemas.StrSchema
            traceValue = schemas.StrSchema
            __annotations__ = {
                "maxHoldCount": maxHoldCount,
                "stopLossRation": stopLossRation,
                "stopProfitRation": stopProfitRation,
                "symbolId": symbolId,
                "traceType": traceType,
                "traceValue": traceValue,
            }
    
    symbolId: MetaOapg.properties.symbolId
    traceValue: MetaOapg.properties.traceValue
    traceType: MetaOapg.properties.traceType
    stopLossRation: MetaOapg.properties.stopLossRation
    stopProfitRation: MetaOapg.properties.stopProfitRation
    maxHoldCount: MetaOapg.properties.maxHoldCount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxHoldCount"]) -> MetaOapg.properties.maxHoldCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopLossRation"]) -> MetaOapg.properties.stopLossRation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stopProfitRation"]) -> MetaOapg.properties.stopProfitRation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["symbolId"]) -> MetaOapg.properties.symbolId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceType"]) -> MetaOapg.properties.traceType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceValue"]) -> MetaOapg.properties.traceValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["maxHoldCount", "stopLossRation", "stopProfitRation", "symbolId", "traceType", "traceValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxHoldCount"]) -> MetaOapg.properties.maxHoldCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopLossRation"]) -> MetaOapg.properties.stopLossRation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stopProfitRation"]) -> MetaOapg.properties.stopProfitRation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["symbolId"]) -> MetaOapg.properties.symbolId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceType"]) -> MetaOapg.properties.traceType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceValue"]) -> MetaOapg.properties.traceValue: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["maxHoldCount", "stopLossRation", "stopProfitRation", "symbolId", "traceType", "traceValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        symbolId: typing.Union[MetaOapg.properties.symbolId, str, ],
        traceValue: typing.Union[MetaOapg.properties.traceValue, str, ],
        traceType: typing.Union[MetaOapg.properties.traceType, str, ],
        stopLossRation: typing.Union[MetaOapg.properties.stopLossRation, str, ],
        stopProfitRation: typing.Union[MetaOapg.properties.stopProfitRation, str, ],
        maxHoldCount: typing.Union[MetaOapg.properties.maxHoldCount, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraceConfigSettingRequest':
        return super().__new__(
            cls,
            *args,
            symbolId=symbolId,
            traceValue=traceValue,
            traceType=traceType,
            stopLossRation=stopLossRation,
            stopProfitRation=stopProfitRation,
            maxHoldCount=maxHoldCount,
            _configuration=_configuration,
            **kwargs,
        )
