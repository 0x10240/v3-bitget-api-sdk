<?php
/**
 * SpotTraceOrderApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Bitget\Test\Api;

use \Bitget\Configuration;
use \Bitget\ApiException;
use \Bitget\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * SpotTraceOrderApiTest Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SpotTraceOrderApiTest extends TestCase
{
    private $config;

    private $apiInstance;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->config = \Bitget\Config::getDefaultConfig();
        $this->apiInstance = new \Bitget\Api\SpotTraceOrderApi(
        // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
        // This is optional, `GuzzleHttp\Client` will be used as default.
            new \GuzzleHttp\Client(),
            $this->config
        );
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for spotTraceCloseTrackingOrder
     *
     * closeTrackingOrder.
     *
     */
    public function testSpotTraceCloseTrackingOrder()
    {
        $req = new \Bitget\Model\CloseTrackingOrderRequest(); //
        $req->setSymbolId("BTCUSDT");
        $req->setTrackingOrderNos(["1032884851114008576"]);
        $result = $this->apiInstance->spotTraceCloseTrackingOrder($req);
        print_r($result);

        $this->assertNotNull($result);
        $this->assertEquals($result->getCode(), "00000");
        $this->assertEquals($result->getMsg(), "success");
    }

    /**
     * Test case for spotTraceEndOrder
     *
     * endOrder.
     *
     */
    public function testSpotTraceEndOrder()
    {
        $req = new \Bitget\Model\EndOrderRequest(); //
        $req->setTrackingOrderNos(["1032884851114008576"]);
        $result = $this->apiInstance->spotTraceEndOrder($req);
        print_r($result);

        $this->assertNotNull($result);
        $this->assertEquals($result->getCode(), "00000");
        $this->assertEquals($result->getMsg(), "success");
    }

    /**
     * Test case for spotTraceGetTraceSettings
     *
     * getTraceSettings.
     *
     */
    public function testSpotTraceGetTraceSettings()
    {
        try {
            $req = new \Bitget\Model\TraceSettingsRequest(); //
            $req->setTraderUserId("2856507104");
            $result = $this->apiInstance->spotTraceGetTraceSettings($req);
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getTraceProductConfigs());
            foreach ($result->getData()->getTraceProductConfigs() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getBusinessLine());
                $this->assertNotNull($item->getMaxStopProfitRation());
                $this->assertNotNull($item->getMaxTraceAmount());
                $this->assertNotNull($item->getSymbolId());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceGetTraderSettings
     *
     * getTraderSettings.
     *
     */
    public function testSpotTraceGetTraderSettings()
    {
        try {
            $result = $this->apiInstance->spotTraceGetTraderSettings();
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getSupportProductCodes());
            foreach ($result->getData()->getSupportProductCodes() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getOpenCopyTrace());
                $this->assertNotNull($item->getProductCode());
                $this->assertNotNull($item->getProductName());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceMyTracers
     *
     * myTracers.
     *
     */
    public function testSpotTraceMyTracers()
    {
        try {
            $req = new \Bitget\Model\MyTracersRequest(); //
            $result = $this->apiInstance->spotTraceMyTracers($req);
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getResultList());
            foreach ($result->getData()->getResultList() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getAccountEquity());
                $this->assertNotNull($item->getTracerNickName());
                $this->assertNotNull($item->getTracerUserId());
                $this->assertNotNull($item->getCanRemoveTraceUser());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceMyTraders
     *
     * myTraders.
     *
     */
    public function testSpotTraceMyTraders()
    {
        try {
            $req = new \Bitget\Model\MyTradersRequest(); //
            $result = $this->apiInstance->spotTraceMyTraders($req);
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getResultList());
            foreach ($result->getData()->getResultList() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getTraceTotalAmount());
                $this->assertNotNull($item->getTradeNickName());
                $this->assertNotNull($item->getTraderUid());
                $this->assertNotNull($item->getCertificationType());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceOrderCurrentList
     *
     * orderCurrentList.
     *
     */
    public function testSpotTraceOrderCurrentList()
    {
        try {
            $req = new \Bitget\Model\CurrentOrderListRequest(); //
            $result = $this->apiInstance->spotTraceOrderCurrentList($req);
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getResultList());
            foreach ($result->getData()->getResultList() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getSymbolId());
                $this->assertNotNull($item->getBuyPrice());
                $this->assertNotNull($item->getProfit());
                $this->assertNotNull($item->getTrackingNo());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceOrderHistoryList
     *
     * orderHistoryList.
     *
     */
    public function testSpotTraceOrderHistoryList()
    {
        try {
            $req = new \Bitget\Model\HistoryOrderListRequest(); //
            $result = $this->apiInstance->spotTraceOrderHistoryList($req);
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getResultList());
            foreach ($result->getData()->getResultList() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getSymbolId());
                $this->assertNotNull($item->getProfit());
                $this->assertNotNull($item->getBuyTime());
                $this->assertNotNull($item->getDealCount());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceRemoveTrader
     *
     * removeTrader.
     *
     */
    public function testSpotTraceRemoveTrader()
    {
        try {
            $req = new \Bitget\Model\RemoveTraderRequest(); //
            $req->setTraderUserId("123123");
            $result = $this->apiInstance->spotTraceRemoveTrader($req);
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceSetProductCode
     *
     * setProductCode.
     *
     */
    public function testSpotTraceSetProductCode()
    {
        try {
            $req = new \Bitget\Model\ProductCodeRequest(); //
            $req->setSymbolIds(["BTCUSDT_SPBL", "ETHUSDT_SPBL", "BGBUSDT_SPBL"]);
            $result = $this->apiInstance->spotTraceSetProductCode($req);
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceSetTraceConfig
     *
     * setTraceConfig.
     *
     */
    public function testSpotTraceSetTraceConfig()
    {
        try {
            $item = new \Bitget\Model\TraceConfigSettingRequest();
            $item->setSymbolId("ETHUSDT_SPBL");
            $item->setMaxHoldCount("50000");
            $item->setStopLossRation("10");
            $item->setStopProfitRation("10");
            $item->setTraceType("2");
            $item->setTraceValue("1000");

            $req = new \Bitget\Model\TraceConfigRequest(); //
            $req->setTraderUserId("2856507104");
            $req->setSettingType("0");
            $req->setSetting([$item]);
            $result = $this->apiInstance->spotTraceSetTraceConfig($req);
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceSpotInfoList
     *
     * spotInfoList.
     *
     */
    public function testSpotTraceSpotInfoList()
    {
        try {
            $result = $this->apiInstance->spotTraceSpotInfoList();
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            foreach ($result->getData() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getSymbolId());
                $this->assertNotNull($item->getMaxCount());
                $this->assertNotNull($item->getSurplusCount());
                $this->assertNotNull($item->getSymbolName());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for spotTraceUpdateTpsl
     *
     * updateTpsl.
     *
     */
    public function testSpotTraceUpdateTpsl()
    {
        try {


            $req = new \Bitget\Model\UpdateTpslRequest(); //
            $req->setStopLossPrice("32100");
            $req->setStopProfitPrice("32600");
            $req->setTrackingNo("1032830954928365568");
            $result = $this->apiInstance->spotTraceUpdateTpsl($req);
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }
}
