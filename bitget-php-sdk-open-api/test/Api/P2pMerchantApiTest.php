<?php
/**
 * P2pMerchantApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Bitget\Test\Api;

use \Bitget\Configuration;
use \Bitget\ApiException;
use \Bitget\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * P2pMerchantApiTest Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class P2pMerchantApiTest extends TestCase
{
    private $config;

    private $apiInstance;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->config = \Bitget\Config::getDefaultConfig();
        $this->apiInstance = new \Bitget\Api\P2pMerchantApi(
        // If you want use custom http client, pass your client which implements `GuzzleHttp\ClientInterface`.
        // This is optional, `GuzzleHttp\Client` will be used as default.
            new \GuzzleHttp\Client(),
            $this->config
        );
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for merchantAdvList
     *
     * advList.
     *
     */
    public function testMerchantAdvList()
    {
        try {
            $result = $this->apiInstance->merchantAdvList("1676260773000");
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getAdvList());
            foreach ($result->getData()->getAdvList() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getType());
                $this->assertNotNull($item->getCoin());
                $this->assertNotNull($item->getAdvId());
                $this->assertNotNull($item->getCoinPrecision());
                $this->assertNotNull($item->getTurnoverRate());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for merchantInfo
     *
     * merchantInfo.
     *
     */
    public function testMerchantInfo()
    {
        try {
            $result = $this->apiInstance->merchantInfo();
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getAveragePayment());
            $this->assertNotNull($result->getData()->getEmail());
            $this->assertNotNull($result->getData()->getKycFlag());
            $this->assertNotNull($result->getData()->getMerchantId());
            $this->assertNotNull($result->getData()->getMobile());
            $this->assertNotNull($result->getData()->getRealName());
            $this->assertNotNull($result->getData()->getThirtyTrades());
            $this->assertNotNull($result->getData()->getTotalSell());
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for merchantList
     *
     * merchantList.
     *
     */
    public function testMerchantList()
    {
        try {
            $result = $this->apiInstance->merchantList();
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getResultList());
            foreach ($result->getData()->getResultList() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getMerchantId());
                $this->assertNotNull($item->getRegisterTime());
                $this->assertNotNull($item->getIsOnline());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }

    /**
     * Test case for merchantOrderList
     *
     * orderList.
     *
     */
    public function testMerchantOrderList()
    {
        try {
            $result = $this->apiInstance->merchantOrderList("1680598302000");
            print_r($result);

            $this->assertNotNull($result);
            $this->assertEquals($result->getCode(), "00000");
            $this->assertEquals($result->getMsg(), "success");
            $this->assertNotNull($result->getData());
            $this->assertNotNull($result->getData()->getOrderList());
            foreach ($result->getData()->getOrderList() as $item) {
                print_r($item);
                $this->assertNotNull($item);
                $this->assertNotNull($item->getCoin());
                $this->assertNotNull($item->getType());
                $this->assertNotNull($item->getAmount());
                $this->assertNotNull($item->getOrderId());
                $this->assertNotNull($item->getAdvNo());
            }
        } catch (Exception $e) {
            echo 'Exception when calling : ', $e->getMessage(), PHP_EOL;
        }
    }
}
