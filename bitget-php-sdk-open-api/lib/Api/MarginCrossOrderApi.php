<?php
/**
 * MarginCrossOrderApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bitget\ApiException;
use Bitget\Configuration;
use Bitget\HeaderSelector;
use Bitget\ObjectSerializer;

/**
 * MarginCrossOrderApi Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MarginCrossOrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'marginCrossBatchCancelOrder' => [
            'application/json',
        ],
        'marginCrossBatchPlaceOrder' => [
            'application/json',
        ],
        'marginCrossCancelOrder' => [
            'application/json',
        ],
        'marginCrossFills' => [
            'application/json',
        ],
        'marginCrossHistoryOrders' => [
            'application/json',
        ],
        'marginCrossOpenOrders' => [
            'application/json',
        ],
        'marginCrossPlaceOrder' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation marginCrossBatchCancelOrder
     *
     * batchCancelOrder
     *
     * @param  \Bitget\Model\MarginBatchCancelOrderRequest $margin_batch_cancel_order_request marginBatchCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchCancelOrder'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossBatchCancelOrder($margin_batch_cancel_order_request, string $contentType = self::contentTypes['marginCrossBatchCancelOrder'][0])
    {
        list($response) = $this->marginCrossBatchCancelOrderWithHttpInfo($margin_batch_cancel_order_request, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossBatchCancelOrderWithHttpInfo
     *
     * batchCancelOrder
     *
     * @param  \Bitget\Model\MarginBatchCancelOrderRequest $margin_batch_cancel_order_request marginBatchCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchCancelOrder'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossBatchCancelOrderWithHttpInfo($margin_batch_cancel_order_request, string $contentType = self::contentTypes['marginCrossBatchCancelOrder'][0])
    {
        $request = $this->marginCrossBatchCancelOrderRequest($margin_batch_cancel_order_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossBatchCancelOrderAsync
     *
     * batchCancelOrder
     *
     * @param  \Bitget\Model\MarginBatchCancelOrderRequest $margin_batch_cancel_order_request marginBatchCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchCancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossBatchCancelOrderAsync($margin_batch_cancel_order_request, string $contentType = self::contentTypes['marginCrossBatchCancelOrder'][0])
    {
        return $this->marginCrossBatchCancelOrderAsyncWithHttpInfo($margin_batch_cancel_order_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossBatchCancelOrderAsyncWithHttpInfo
     *
     * batchCancelOrder
     *
     * @param  \Bitget\Model\MarginBatchCancelOrderRequest $margin_batch_cancel_order_request marginBatchCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchCancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossBatchCancelOrderAsyncWithHttpInfo($margin_batch_cancel_order_request, string $contentType = self::contentTypes['marginCrossBatchCancelOrder'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult';
        $request = $this->marginCrossBatchCancelOrderRequest($margin_batch_cancel_order_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossBatchCancelOrder'
     *
     * @param  \Bitget\Model\MarginBatchCancelOrderRequest $margin_batch_cancel_order_request marginBatchCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchCancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossBatchCancelOrderRequest($margin_batch_cancel_order_request, string $contentType = self::contentTypes['marginCrossBatchCancelOrder'][0])
    {

        // verify the required parameter 'margin_batch_cancel_order_request' is set
        if ($margin_batch_cancel_order_request === null || (is_array($margin_batch_cancel_order_request) && count($margin_batch_cancel_order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_batch_cancel_order_request when calling marginCrossBatchCancelOrder'
            );
        }


        $resourcePath = '/api/margin/v1/cross/order/batchCancelOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_batch_cancel_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_batch_cancel_order_request));
            } else {
                $httpBody = $margin_batch_cancel_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossBatchPlaceOrder
     *
     * batchPlaceOrder
     *
     * @param  \Bitget\Model\MarginBatchOrdersRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchPlaceOrder'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginBatchPlaceOrderResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossBatchPlaceOrder($margin_order_request, string $contentType = self::contentTypes['marginCrossBatchPlaceOrder'][0])
    {
        list($response) = $this->marginCrossBatchPlaceOrderWithHttpInfo($margin_order_request, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossBatchPlaceOrderWithHttpInfo
     *
     * batchPlaceOrder
     *
     * @param  \Bitget\Model\MarginBatchOrdersRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchPlaceOrder'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginBatchPlaceOrderResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossBatchPlaceOrderWithHttpInfo($margin_order_request, string $contentType = self::contentTypes['marginCrossBatchPlaceOrder'][0])
    {
        $request = $this->marginCrossBatchPlaceOrderRequest($margin_order_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginBatchPlaceOrderResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginBatchPlaceOrderResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginBatchPlaceOrderResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginBatchPlaceOrderResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginBatchPlaceOrderResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossBatchPlaceOrderAsync
     *
     * batchPlaceOrder
     *
     * @param  \Bitget\Model\MarginBatchOrdersRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchPlaceOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossBatchPlaceOrderAsync($margin_order_request, string $contentType = self::contentTypes['marginCrossBatchPlaceOrder'][0])
    {
        return $this->marginCrossBatchPlaceOrderAsyncWithHttpInfo($margin_order_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossBatchPlaceOrderAsyncWithHttpInfo
     *
     * batchPlaceOrder
     *
     * @param  \Bitget\Model\MarginBatchOrdersRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchPlaceOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossBatchPlaceOrderAsyncWithHttpInfo($margin_order_request, string $contentType = self::contentTypes['marginCrossBatchPlaceOrder'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginBatchPlaceOrderResult';
        $request = $this->marginCrossBatchPlaceOrderRequest($margin_order_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossBatchPlaceOrder'
     *
     * @param  \Bitget\Model\MarginBatchOrdersRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossBatchPlaceOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossBatchPlaceOrderRequest($margin_order_request, string $contentType = self::contentTypes['marginCrossBatchPlaceOrder'][0])
    {

        // verify the required parameter 'margin_order_request' is set
        if ($margin_order_request === null || (is_array($margin_order_request) && count($margin_order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_order_request when calling marginCrossBatchPlaceOrder'
            );
        }


        $resourcePath = '/api/margin/v1/cross/order/batchPlaceOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_order_request));
            } else {
                $httpBody = $margin_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossCancelOrder
     *
     * cancelOrder
     *
     * @param  \Bitget\Model\MarginCancelOrderRequest $margin_cancel_order_request marginCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossCancelOrder'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossCancelOrder($margin_cancel_order_request, string $contentType = self::contentTypes['marginCrossCancelOrder'][0])
    {
        list($response) = $this->marginCrossCancelOrderWithHttpInfo($margin_cancel_order_request, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossCancelOrderWithHttpInfo
     *
     * cancelOrder
     *
     * @param  \Bitget\Model\MarginCancelOrderRequest $margin_cancel_order_request marginCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossCancelOrder'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossCancelOrderWithHttpInfo($margin_cancel_order_request, string $contentType = self::contentTypes['marginCrossCancelOrder'][0])
    {
        $request = $this->marginCrossCancelOrderRequest($margin_cancel_order_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossCancelOrderAsync
     *
     * cancelOrder
     *
     * @param  \Bitget\Model\MarginCancelOrderRequest $margin_cancel_order_request marginCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossCancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossCancelOrderAsync($margin_cancel_order_request, string $contentType = self::contentTypes['marginCrossCancelOrder'][0])
    {
        return $this->marginCrossCancelOrderAsyncWithHttpInfo($margin_cancel_order_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossCancelOrderAsyncWithHttpInfo
     *
     * cancelOrder
     *
     * @param  \Bitget\Model\MarginCancelOrderRequest $margin_cancel_order_request marginCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossCancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossCancelOrderAsyncWithHttpInfo($margin_cancel_order_request, string $contentType = self::contentTypes['marginCrossCancelOrder'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginBatchCancelOrderResult';
        $request = $this->marginCrossCancelOrderRequest($margin_cancel_order_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossCancelOrder'
     *
     * @param  \Bitget\Model\MarginCancelOrderRequest $margin_cancel_order_request marginCancelOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossCancelOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossCancelOrderRequest($margin_cancel_order_request, string $contentType = self::contentTypes['marginCrossCancelOrder'][0])
    {

        // verify the required parameter 'margin_cancel_order_request' is set
        if ($margin_cancel_order_request === null || (is_array($margin_cancel_order_request) && count($margin_cancel_order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_cancel_order_request when calling marginCrossCancelOrder'
            );
        }


        $resourcePath = '/api/margin/v1/cross/order/cancelOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_cancel_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_cancel_order_request));
            } else {
                $httpBody = $margin_cancel_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossFills
     *
     * fills
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $last_fill_id lastFillId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossFills'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginTradeDetailInfoResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossFills($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $last_fill_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossFills'][0])
    {
        list($response) = $this->marginCrossFillsWithHttpInfo($symbol, $start_time, $source, $end_time, $order_id, $last_fill_id, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossFillsWithHttpInfo
     *
     * fills
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $last_fill_id lastFillId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossFills'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginTradeDetailInfoResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossFillsWithHttpInfo($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $last_fill_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossFills'][0])
    {
        $request = $this->marginCrossFillsRequest($symbol, $start_time, $source, $end_time, $order_id, $last_fill_id, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginTradeDetailInfoResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginTradeDetailInfoResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginTradeDetailInfoResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginTradeDetailInfoResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginTradeDetailInfoResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossFillsAsync
     *
     * fills
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $last_fill_id lastFillId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossFills'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossFillsAsync($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $last_fill_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossFills'][0])
    {
        return $this->marginCrossFillsAsyncWithHttpInfo($symbol, $start_time, $source, $end_time, $order_id, $last_fill_id, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossFillsAsyncWithHttpInfo
     *
     * fills
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $last_fill_id lastFillId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossFills'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossFillsAsyncWithHttpInfo($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $last_fill_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossFills'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginTradeDetailInfoResult';
        $request = $this->marginCrossFillsRequest($symbol, $start_time, $source, $end_time, $order_id, $last_fill_id, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossFills'
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $last_fill_id lastFillId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossFills'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossFillsRequest($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $last_fill_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossFills'][0])
    {

        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling marginCrossFills'
            );
        }

        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling marginCrossFills'
            );
        }







        $resourcePath = '/api/margin/v1/cross/order/fills';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_fill_id,
            'lastFillId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossHistoryOrders
     *
     * history
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $min_id minId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossHistoryOrders'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossHistoryOrders($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $client_oid = null, $min_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossHistoryOrders'][0])
    {
        list($response) = $this->marginCrossHistoryOrdersWithHttpInfo($symbol, $start_time, $source, $end_time, $order_id, $client_oid, $min_id, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossHistoryOrdersWithHttpInfo
     *
     * history
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $min_id minId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossHistoryOrders'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossHistoryOrdersWithHttpInfo($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $client_oid = null, $min_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossHistoryOrders'][0])
    {
        $request = $this->marginCrossHistoryOrdersRequest($symbol, $start_time, $source, $end_time, $order_id, $client_oid, $min_id, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossHistoryOrdersAsync
     *
     * history
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $min_id minId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossHistoryOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossHistoryOrdersAsync($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $client_oid = null, $min_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossHistoryOrders'][0])
    {
        return $this->marginCrossHistoryOrdersAsyncWithHttpInfo($symbol, $start_time, $source, $end_time, $order_id, $client_oid, $min_id, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossHistoryOrdersAsyncWithHttpInfo
     *
     * history
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $min_id minId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossHistoryOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossHistoryOrdersAsyncWithHttpInfo($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $client_oid = null, $min_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossHistoryOrders'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult';
        $request = $this->marginCrossHistoryOrdersRequest($symbol, $start_time, $source, $end_time, $order_id, $client_oid, $min_id, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossHistoryOrders'
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $source source (optional)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $min_id minId (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossHistoryOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossHistoryOrdersRequest($symbol, $start_time, $source = null, $end_time = null, $order_id = null, $client_oid = null, $min_id = null, $page_size = null, string $contentType = self::contentTypes['marginCrossHistoryOrders'][0])
    {

        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling marginCrossHistoryOrders'
            );
        }

        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling marginCrossHistoryOrders'
            );
        }








        $resourcePath = '/api/margin/v1/cross/order/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $source,
            'source', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_oid,
            'clientOid', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_id,
            'minId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossOpenOrders
     *
     * openOrders
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossOpenOrders'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossOpenOrders($symbol, $start_time, $end_time = null, $order_id = null, $client_oid = null, $page_size = null, string $contentType = self::contentTypes['marginCrossOpenOrders'][0])
    {
        list($response) = $this->marginCrossOpenOrdersWithHttpInfo($symbol, $start_time, $end_time, $order_id, $client_oid, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossOpenOrdersWithHttpInfo
     *
     * openOrders
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossOpenOrders'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossOpenOrdersWithHttpInfo($symbol, $start_time, $end_time = null, $order_id = null, $client_oid = null, $page_size = null, string $contentType = self::contentTypes['marginCrossOpenOrders'][0])
    {
        $request = $this->marginCrossOpenOrdersRequest($symbol, $start_time, $end_time, $order_id, $client_oid, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossOpenOrdersAsync
     *
     * openOrders
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossOpenOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossOpenOrdersAsync($symbol, $start_time, $end_time = null, $order_id = null, $client_oid = null, $page_size = null, string $contentType = self::contentTypes['marginCrossOpenOrders'][0])
    {
        return $this->marginCrossOpenOrdersAsyncWithHttpInfo($symbol, $start_time, $end_time, $order_id, $client_oid, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossOpenOrdersAsyncWithHttpInfo
     *
     * openOrders
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossOpenOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossOpenOrdersAsyncWithHttpInfo($symbol, $start_time, $end_time = null, $order_id = null, $client_oid = null, $page_size = null, string $contentType = self::contentTypes['marginCrossOpenOrders'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginOpenOrderInfoResult';
        $request = $this->marginCrossOpenOrdersRequest($symbol, $start_time, $end_time, $order_id, $client_oid, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossOpenOrders'
     *
     * @param  string $symbol symbol (required)
     * @param  string $start_time startTime (required)
     * @param  string $end_time endTime (optional)
     * @param  string $order_id orderId (optional)
     * @param  string $client_oid clientOid (optional)
     * @param  string $page_size pageSize (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossOpenOrders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossOpenOrdersRequest($symbol, $start_time, $end_time = null, $order_id = null, $client_oid = null, $page_size = null, string $contentType = self::contentTypes['marginCrossOpenOrders'][0])
    {

        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling marginCrossOpenOrders'
            );
        }

        // verify the required parameter 'start_time' is set
        if ($start_time === null || (is_array($start_time) && count($start_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_time when calling marginCrossOpenOrders'
            );
        }






        $resourcePath = '/api/margin/v1/cross/order/openOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start_time,
            'startTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end_time,
            'endTime', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_id,
            'orderId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_oid,
            'clientOid', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossPlaceOrder
     *
     * placeOrder
     *
     * @param  \Bitget\Model\MarginOrderRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossPlaceOrder'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginPlaceOrderResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossPlaceOrder($margin_order_request, string $contentType = self::contentTypes['marginCrossPlaceOrder'][0])
    {
        list($response) = $this->marginCrossPlaceOrderWithHttpInfo($margin_order_request, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossPlaceOrderWithHttpInfo
     *
     * placeOrder
     *
     * @param  \Bitget\Model\MarginOrderRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossPlaceOrder'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginPlaceOrderResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossPlaceOrderWithHttpInfo($margin_order_request, string $contentType = self::contentTypes['marginCrossPlaceOrder'][0])
    {
        $request = $this->marginCrossPlaceOrderRequest($margin_order_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginPlaceOrderResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginPlaceOrderResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginPlaceOrderResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginPlaceOrderResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginPlaceOrderResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossPlaceOrderAsync
     *
     * placeOrder
     *
     * @param  \Bitget\Model\MarginOrderRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossPlaceOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossPlaceOrderAsync($margin_order_request, string $contentType = self::contentTypes['marginCrossPlaceOrder'][0])
    {
        return $this->marginCrossPlaceOrderAsyncWithHttpInfo($margin_order_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossPlaceOrderAsyncWithHttpInfo
     *
     * placeOrder
     *
     * @param  \Bitget\Model\MarginOrderRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossPlaceOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossPlaceOrderAsyncWithHttpInfo($margin_order_request, string $contentType = self::contentTypes['marginCrossPlaceOrder'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginPlaceOrderResult';
        $request = $this->marginCrossPlaceOrderRequest($margin_order_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossPlaceOrder'
     *
     * @param  \Bitget\Model\MarginOrderRequest $margin_order_request marginOrderRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossPlaceOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossPlaceOrderRequest($margin_order_request, string $contentType = self::contentTypes['marginCrossPlaceOrder'][0])
    {

        // verify the required parameter 'margin_order_request' is set
        if ($margin_order_request === null || (is_array($margin_order_request) && count($margin_order_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_order_request when calling marginCrossPlaceOrder'
            );
        }


        $resourcePath = '/api/margin/v1/cross/order/placeOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_order_request));
            } else {
                $httpBody = $margin_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
