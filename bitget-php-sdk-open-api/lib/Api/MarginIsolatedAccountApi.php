<?php
/**
 * MarginIsolatedAccountApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bitget\ApiException;
use Bitget\Configuration;
use Bitget\HeaderSelector;
use Bitget\ObjectSerializer;

/**
 * MarginIsolatedAccountApi Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MarginIsolatedAccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'marginIsolatedAccountAssets' => [
            'application/json',
        ],
        'marginIsolatedAccountBorrow' => [
            'application/json',
        ],
        'marginIsolatedAccountMaxBorrowableAmount' => [
            'application/json',
        ],
        'marginIsolatedAccountMaxTransferOutAmount' => [
            'application/json',
        ],
        'marginIsolatedAccountRepay' => [
            'application/json',
        ],
        'marginIsolatedAccountRiskRate' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation marginIsolatedAccountAssets
     *
     * assets
     *
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountAssets'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginIsolatedAccountAssets($symbol, string $contentType = self::contentTypes['marginIsolatedAccountAssets'][0])
    {
        list($response) = $this->marginIsolatedAccountAssetsWithHttpInfo($symbol, $contentType);
        return $response;
    }

    /**
     * Operation marginIsolatedAccountAssetsWithHttpInfo
     *
     * assets
     *
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountAssets'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginIsolatedAccountAssetsWithHttpInfo($symbol, string $contentType = self::contentTypes['marginIsolatedAccountAssets'][0])
    {
        $request = $this->marginIsolatedAccountAssetsRequest($symbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginIsolatedAccountAssetsAsync
     *
     * assets
     *
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountAssetsAsync($symbol, string $contentType = self::contentTypes['marginIsolatedAccountAssets'][0])
    {
        return $this->marginIsolatedAccountAssetsAsyncWithHttpInfo($symbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginIsolatedAccountAssetsAsyncWithHttpInfo
     *
     * assets
     *
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountAssetsAsyncWithHttpInfo($symbol, string $contentType = self::contentTypes['marginIsolatedAccountAssets'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsPopulationResult';
        $request = $this->marginIsolatedAccountAssetsRequest($symbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginIsolatedAccountAssets'
     *
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginIsolatedAccountAssetsRequest($symbol, string $contentType = self::contentTypes['marginIsolatedAccountAssets'][0])
    {

        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling marginIsolatedAccountAssets'
            );
        }


        $resourcePath = '/api/margin/v1/isolated/account/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginIsolatedAccountBorrow
     *
     * borrow
     *
     * @param  \Bitget\Model\MarginIsolatedLimitRequest $margin_isolated_limit_request marginIsolatedLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountBorrow'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginIsolatedBorrowLimitResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginIsolatedAccountBorrow($margin_isolated_limit_request, string $contentType = self::contentTypes['marginIsolatedAccountBorrow'][0])
    {
        list($response) = $this->marginIsolatedAccountBorrowWithHttpInfo($margin_isolated_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation marginIsolatedAccountBorrowWithHttpInfo
     *
     * borrow
     *
     * @param  \Bitget\Model\MarginIsolatedLimitRequest $margin_isolated_limit_request marginIsolatedLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountBorrow'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginIsolatedBorrowLimitResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginIsolatedAccountBorrowWithHttpInfo($margin_isolated_limit_request, string $contentType = self::contentTypes['marginIsolatedAccountBorrow'][0])
    {
        $request = $this->marginIsolatedAccountBorrowRequest($margin_isolated_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginIsolatedBorrowLimitResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginIsolatedBorrowLimitResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginIsolatedBorrowLimitResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginIsolatedBorrowLimitResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginIsolatedBorrowLimitResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginIsolatedAccountBorrowAsync
     *
     * borrow
     *
     * @param  \Bitget\Model\MarginIsolatedLimitRequest $margin_isolated_limit_request marginIsolatedLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountBorrow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountBorrowAsync($margin_isolated_limit_request, string $contentType = self::contentTypes['marginIsolatedAccountBorrow'][0])
    {
        return $this->marginIsolatedAccountBorrowAsyncWithHttpInfo($margin_isolated_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginIsolatedAccountBorrowAsyncWithHttpInfo
     *
     * borrow
     *
     * @param  \Bitget\Model\MarginIsolatedLimitRequest $margin_isolated_limit_request marginIsolatedLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountBorrow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountBorrowAsyncWithHttpInfo($margin_isolated_limit_request, string $contentType = self::contentTypes['marginIsolatedAccountBorrow'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginIsolatedBorrowLimitResult';
        $request = $this->marginIsolatedAccountBorrowRequest($margin_isolated_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginIsolatedAccountBorrow'
     *
     * @param  \Bitget\Model\MarginIsolatedLimitRequest $margin_isolated_limit_request marginIsolatedLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountBorrow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginIsolatedAccountBorrowRequest($margin_isolated_limit_request, string $contentType = self::contentTypes['marginIsolatedAccountBorrow'][0])
    {

        // verify the required parameter 'margin_isolated_limit_request' is set
        if ($margin_isolated_limit_request === null || (is_array($margin_isolated_limit_request) && count($margin_isolated_limit_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_isolated_limit_request when calling marginIsolatedAccountBorrow'
            );
        }


        $resourcePath = '/api/margin/v1/isolated/account/borrow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_isolated_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_isolated_limit_request));
            } else {
                $httpBody = $margin_isolated_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginIsolatedAccountMaxBorrowableAmount
     *
     * maxBorrowableAmount
     *
     * @param  \Bitget\Model\MarginIsolatedMaxBorrowRequest $margin_isolated_max_borrow_request marginIsolatedMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginIsolatedMaxBorrowResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginIsolatedAccountMaxBorrowableAmount($margin_isolated_max_borrow_request, string $contentType = self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'][0])
    {
        list($response) = $this->marginIsolatedAccountMaxBorrowableAmountWithHttpInfo($margin_isolated_max_borrow_request, $contentType);
        return $response;
    }

    /**
     * Operation marginIsolatedAccountMaxBorrowableAmountWithHttpInfo
     *
     * maxBorrowableAmount
     *
     * @param  \Bitget\Model\MarginIsolatedMaxBorrowRequest $margin_isolated_max_borrow_request marginIsolatedMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginIsolatedMaxBorrowResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginIsolatedAccountMaxBorrowableAmountWithHttpInfo($margin_isolated_max_borrow_request, string $contentType = self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'][0])
    {
        $request = $this->marginIsolatedAccountMaxBorrowableAmountRequest($margin_isolated_max_borrow_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginIsolatedMaxBorrowResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginIsolatedMaxBorrowResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginIsolatedMaxBorrowResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginIsolatedMaxBorrowResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginIsolatedMaxBorrowResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginIsolatedAccountMaxBorrowableAmountAsync
     *
     * maxBorrowableAmount
     *
     * @param  \Bitget\Model\MarginIsolatedMaxBorrowRequest $margin_isolated_max_borrow_request marginIsolatedMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountMaxBorrowableAmountAsync($margin_isolated_max_borrow_request, string $contentType = self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'][0])
    {
        return $this->marginIsolatedAccountMaxBorrowableAmountAsyncWithHttpInfo($margin_isolated_max_borrow_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginIsolatedAccountMaxBorrowableAmountAsyncWithHttpInfo
     *
     * maxBorrowableAmount
     *
     * @param  \Bitget\Model\MarginIsolatedMaxBorrowRequest $margin_isolated_max_borrow_request marginIsolatedMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountMaxBorrowableAmountAsyncWithHttpInfo($margin_isolated_max_borrow_request, string $contentType = self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginIsolatedMaxBorrowResult';
        $request = $this->marginIsolatedAccountMaxBorrowableAmountRequest($margin_isolated_max_borrow_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginIsolatedAccountMaxBorrowableAmount'
     *
     * @param  \Bitget\Model\MarginIsolatedMaxBorrowRequest $margin_isolated_max_borrow_request marginIsolatedMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginIsolatedAccountMaxBorrowableAmountRequest($margin_isolated_max_borrow_request, string $contentType = self::contentTypes['marginIsolatedAccountMaxBorrowableAmount'][0])
    {

        // verify the required parameter 'margin_isolated_max_borrow_request' is set
        if ($margin_isolated_max_borrow_request === null || (is_array($margin_isolated_max_borrow_request) && count($margin_isolated_max_borrow_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_isolated_max_borrow_request when calling marginIsolatedAccountMaxBorrowableAmount'
            );
        }


        $resourcePath = '/api/margin/v1/isolated/account/maxBorrowableAmount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_isolated_max_borrow_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_isolated_max_borrow_request));
            } else {
                $httpBody = $margin_isolated_max_borrow_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginIsolatedAccountMaxTransferOutAmount
     *
     * maxTransferOutAmount
     *
     * @param  string $coin coin (required)
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginIsolatedAssetsResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginIsolatedAccountMaxTransferOutAmount($coin, $symbol, string $contentType = self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'][0])
    {
        list($response) = $this->marginIsolatedAccountMaxTransferOutAmountWithHttpInfo($coin, $symbol, $contentType);
        return $response;
    }

    /**
     * Operation marginIsolatedAccountMaxTransferOutAmountWithHttpInfo
     *
     * maxTransferOutAmount
     *
     * @param  string $coin coin (required)
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginIsolatedAssetsResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginIsolatedAccountMaxTransferOutAmountWithHttpInfo($coin, $symbol, string $contentType = self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'][0])
    {
        $request = $this->marginIsolatedAccountMaxTransferOutAmountRequest($coin, $symbol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginIsolatedAssetsResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginIsolatedAssetsResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginIsolatedAssetsResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginIsolatedAssetsResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginIsolatedAssetsResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginIsolatedAccountMaxTransferOutAmountAsync
     *
     * maxTransferOutAmount
     *
     * @param  string $coin coin (required)
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountMaxTransferOutAmountAsync($coin, $symbol, string $contentType = self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'][0])
    {
        return $this->marginIsolatedAccountMaxTransferOutAmountAsyncWithHttpInfo($coin, $symbol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginIsolatedAccountMaxTransferOutAmountAsyncWithHttpInfo
     *
     * maxTransferOutAmount
     *
     * @param  string $coin coin (required)
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountMaxTransferOutAmountAsyncWithHttpInfo($coin, $symbol, string $contentType = self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginIsolatedAssetsResult';
        $request = $this->marginIsolatedAccountMaxTransferOutAmountRequest($coin, $symbol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginIsolatedAccountMaxTransferOutAmount'
     *
     * @param  string $coin coin (required)
     * @param  string $symbol symbol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginIsolatedAccountMaxTransferOutAmountRequest($coin, $symbol, string $contentType = self::contentTypes['marginIsolatedAccountMaxTransferOutAmount'][0])
    {

        // verify the required parameter 'coin' is set
        if ($coin === null || (is_array($coin) && count($coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coin when calling marginIsolatedAccountMaxTransferOutAmount'
            );
        }

        // verify the required parameter 'symbol' is set
        if ($symbol === null || (is_array($symbol) && count($symbol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $symbol when calling marginIsolatedAccountMaxTransferOutAmount'
            );
        }


        $resourcePath = '/api/margin/v1/isolated/account/maxTransferOutAmount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $coin,
            'coin', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $symbol,
            'symbol', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginIsolatedAccountRepay
     *
     * repay
     *
     * @param  \Bitget\Model\MarginIsolatedRepayRequest $margin_isolated_repay_request marginIsolatedRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRepay'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginIsolatedRepayResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginIsolatedAccountRepay($margin_isolated_repay_request, string $contentType = self::contentTypes['marginIsolatedAccountRepay'][0])
    {
        list($response) = $this->marginIsolatedAccountRepayWithHttpInfo($margin_isolated_repay_request, $contentType);
        return $response;
    }

    /**
     * Operation marginIsolatedAccountRepayWithHttpInfo
     *
     * repay
     *
     * @param  \Bitget\Model\MarginIsolatedRepayRequest $margin_isolated_repay_request marginIsolatedRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRepay'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginIsolatedRepayResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginIsolatedAccountRepayWithHttpInfo($margin_isolated_repay_request, string $contentType = self::contentTypes['marginIsolatedAccountRepay'][0])
    {
        $request = $this->marginIsolatedAccountRepayRequest($margin_isolated_repay_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginIsolatedRepayResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginIsolatedRepayResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginIsolatedRepayResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginIsolatedRepayResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginIsolatedRepayResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginIsolatedAccountRepayAsync
     *
     * repay
     *
     * @param  \Bitget\Model\MarginIsolatedRepayRequest $margin_isolated_repay_request marginIsolatedRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRepay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountRepayAsync($margin_isolated_repay_request, string $contentType = self::contentTypes['marginIsolatedAccountRepay'][0])
    {
        return $this->marginIsolatedAccountRepayAsyncWithHttpInfo($margin_isolated_repay_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginIsolatedAccountRepayAsyncWithHttpInfo
     *
     * repay
     *
     * @param  \Bitget\Model\MarginIsolatedRepayRequest $margin_isolated_repay_request marginIsolatedRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRepay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountRepayAsyncWithHttpInfo($margin_isolated_repay_request, string $contentType = self::contentTypes['marginIsolatedAccountRepay'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginIsolatedRepayResult';
        $request = $this->marginIsolatedAccountRepayRequest($margin_isolated_repay_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginIsolatedAccountRepay'
     *
     * @param  \Bitget\Model\MarginIsolatedRepayRequest $margin_isolated_repay_request marginIsolatedRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRepay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginIsolatedAccountRepayRequest($margin_isolated_repay_request, string $contentType = self::contentTypes['marginIsolatedAccountRepay'][0])
    {

        // verify the required parameter 'margin_isolated_repay_request' is set
        if ($margin_isolated_repay_request === null || (is_array($margin_isolated_repay_request) && count($margin_isolated_repay_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_isolated_repay_request when calling marginIsolatedAccountRepay'
            );
        }


        $resourcePath = '/api/margin/v1/isolated/account/repay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_isolated_repay_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_isolated_repay_request));
            } else {
                $httpBody = $margin_isolated_repay_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginIsolatedAccountRiskRate
     *
     * riskRate
     *
     * @param  \Bitget\Model\MarginIsolatedAssetsRiskRequest $margin_isolated_assets_risk_request marginIsolatedAssetsRiskRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginIsolatedAccountRiskRate($margin_isolated_assets_risk_request, string $contentType = self::contentTypes['marginIsolatedAccountRiskRate'][0])
    {
        list($response) = $this->marginIsolatedAccountRiskRateWithHttpInfo($margin_isolated_assets_risk_request, $contentType);
        return $response;
    }

    /**
     * Operation marginIsolatedAccountRiskRateWithHttpInfo
     *
     * riskRate
     *
     * @param  \Bitget\Model\MarginIsolatedAssetsRiskRequest $margin_isolated_assets_risk_request marginIsolatedAssetsRiskRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginIsolatedAccountRiskRateWithHttpInfo($margin_isolated_assets_risk_request, string $contentType = self::contentTypes['marginIsolatedAccountRiskRate'][0])
    {
        $request = $this->marginIsolatedAccountRiskRateRequest($margin_isolated_assets_risk_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginIsolatedAccountRiskRateAsync
     *
     * riskRate
     *
     * @param  \Bitget\Model\MarginIsolatedAssetsRiskRequest $margin_isolated_assets_risk_request marginIsolatedAssetsRiskRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountRiskRateAsync($margin_isolated_assets_risk_request, string $contentType = self::contentTypes['marginIsolatedAccountRiskRate'][0])
    {
        return $this->marginIsolatedAccountRiskRateAsyncWithHttpInfo($margin_isolated_assets_risk_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginIsolatedAccountRiskRateAsyncWithHttpInfo
     *
     * riskRate
     *
     * @param  \Bitget\Model\MarginIsolatedAssetsRiskRequest $margin_isolated_assets_risk_request marginIsolatedAssetsRiskRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginIsolatedAccountRiskRateAsyncWithHttpInfo($margin_isolated_assets_risk_request, string $contentType = self::contentTypes['marginIsolatedAccountRiskRate'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfListOfMarginIsolatedAssetsRiskResult';
        $request = $this->marginIsolatedAccountRiskRateRequest($margin_isolated_assets_risk_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginIsolatedAccountRiskRate'
     *
     * @param  \Bitget\Model\MarginIsolatedAssetsRiskRequest $margin_isolated_assets_risk_request marginIsolatedAssetsRiskRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginIsolatedAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginIsolatedAccountRiskRateRequest($margin_isolated_assets_risk_request, string $contentType = self::contentTypes['marginIsolatedAccountRiskRate'][0])
    {

        // verify the required parameter 'margin_isolated_assets_risk_request' is set
        if ($margin_isolated_assets_risk_request === null || (is_array($margin_isolated_assets_risk_request) && count($margin_isolated_assets_risk_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_isolated_assets_risk_request when calling marginIsolatedAccountRiskRate'
            );
        }


        $resourcePath = '/api/margin/v1/isolated/account/riskRate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_isolated_assets_risk_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_isolated_assets_risk_request));
            } else {
                $httpBody = $margin_isolated_assets_risk_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
