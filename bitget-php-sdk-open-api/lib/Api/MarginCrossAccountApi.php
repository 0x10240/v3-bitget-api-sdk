<?php
/**
 * MarginCrossAccountApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Bitget\ApiException;
use Bitget\Configuration;
use Bitget\HeaderSelector;
use Bitget\ObjectSerializer;

/**
 * MarginCrossAccountApi Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MarginCrossAccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'marginCrossAccountAssets' => [
            'application/json',
        ],
        'marginCrossAccountBorrow' => [
            'application/json',
        ],
        'marginCrossAccountMaxBorrowableAmount' => [
            'application/json',
        ],
        'marginCrossAccountMaxTransferOutAmount' => [
            'application/json',
        ],
        'marginCrossAccountRepay' => [
            'application/json',
        ],
        'marginCrossAccountRiskRate' => [
            'application/json',
        ],
        'void' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation marginCrossAccountAssets
     *
     * assets
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountAssets'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfListOfMarginCrossAssetsPopulationResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossAccountAssets($coin, string $contentType = self::contentTypes['marginCrossAccountAssets'][0])
    {
        list($response) = $this->marginCrossAccountAssetsWithHttpInfo($coin, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossAccountAssetsWithHttpInfo
     *
     * assets
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountAssets'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfListOfMarginCrossAssetsPopulationResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossAccountAssetsWithHttpInfo($coin, string $contentType = self::contentTypes['marginCrossAccountAssets'][0])
    {
        $request = $this->marginCrossAccountAssetsRequest($coin, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfListOfMarginCrossAssetsPopulationResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfListOfMarginCrossAssetsPopulationResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfListOfMarginCrossAssetsPopulationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfListOfMarginCrossAssetsPopulationResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfListOfMarginCrossAssetsPopulationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossAccountAssetsAsync
     *
     * assets
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountAssetsAsync($coin, string $contentType = self::contentTypes['marginCrossAccountAssets'][0])
    {
        return $this->marginCrossAccountAssetsAsyncWithHttpInfo($coin, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossAccountAssetsAsyncWithHttpInfo
     *
     * assets
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountAssetsAsyncWithHttpInfo($coin, string $contentType = self::contentTypes['marginCrossAccountAssets'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfListOfMarginCrossAssetsPopulationResult';
        $request = $this->marginCrossAccountAssetsRequest($coin, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossAccountAssets'
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossAccountAssetsRequest($coin, string $contentType = self::contentTypes['marginCrossAccountAssets'][0])
    {

        // verify the required parameter 'coin' is set
        if ($coin === null || (is_array($coin) && count($coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coin when calling marginCrossAccountAssets'
            );
        }


        $resourcePath = '/api/margin/v1/cross/account/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $coin,
            'coin', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossAccountBorrow
     *
     * borrow
     *
     * @param  \Bitget\Model\MarginCrossLimitRequest $margin_cross_limit_request marginCrossLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountBorrow'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginCrossBorrowLimitResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossAccountBorrow($margin_cross_limit_request, string $contentType = self::contentTypes['marginCrossAccountBorrow'][0])
    {
        list($response) = $this->marginCrossAccountBorrowWithHttpInfo($margin_cross_limit_request, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossAccountBorrowWithHttpInfo
     *
     * borrow
     *
     * @param  \Bitget\Model\MarginCrossLimitRequest $margin_cross_limit_request marginCrossLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountBorrow'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginCrossBorrowLimitResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossAccountBorrowWithHttpInfo($margin_cross_limit_request, string $contentType = self::contentTypes['marginCrossAccountBorrow'][0])
    {
        $request = $this->marginCrossAccountBorrowRequest($margin_cross_limit_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginCrossBorrowLimitResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginCrossBorrowLimitResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginCrossBorrowLimitResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossBorrowLimitResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginCrossBorrowLimitResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossAccountBorrowAsync
     *
     * borrow
     *
     * @param  \Bitget\Model\MarginCrossLimitRequest $margin_cross_limit_request marginCrossLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountBorrow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountBorrowAsync($margin_cross_limit_request, string $contentType = self::contentTypes['marginCrossAccountBorrow'][0])
    {
        return $this->marginCrossAccountBorrowAsyncWithHttpInfo($margin_cross_limit_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossAccountBorrowAsyncWithHttpInfo
     *
     * borrow
     *
     * @param  \Bitget\Model\MarginCrossLimitRequest $margin_cross_limit_request marginCrossLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountBorrow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountBorrowAsyncWithHttpInfo($margin_cross_limit_request, string $contentType = self::contentTypes['marginCrossAccountBorrow'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossBorrowLimitResult';
        $request = $this->marginCrossAccountBorrowRequest($margin_cross_limit_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossAccountBorrow'
     *
     * @param  \Bitget\Model\MarginCrossLimitRequest $margin_cross_limit_request marginCrossLimitRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountBorrow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossAccountBorrowRequest($margin_cross_limit_request, string $contentType = self::contentTypes['marginCrossAccountBorrow'][0])
    {

        // verify the required parameter 'margin_cross_limit_request' is set
        if ($margin_cross_limit_request === null || (is_array($margin_cross_limit_request) && count($margin_cross_limit_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_cross_limit_request when calling marginCrossAccountBorrow'
            );
        }


        $resourcePath = '/api/margin/v1/cross/account/borrow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_cross_limit_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_cross_limit_request));
            } else {
                $httpBody = $margin_cross_limit_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossAccountMaxBorrowableAmount
     *
     * maxBorrowableAmount
     *
     * @param  \Bitget\Model\MarginCrossMaxBorrowRequest $margin_cross_max_borrow_request marginCrossMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginCrossMaxBorrowResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossAccountMaxBorrowableAmount($margin_cross_max_borrow_request, string $contentType = self::contentTypes['marginCrossAccountMaxBorrowableAmount'][0])
    {
        list($response) = $this->marginCrossAccountMaxBorrowableAmountWithHttpInfo($margin_cross_max_borrow_request, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossAccountMaxBorrowableAmountWithHttpInfo
     *
     * maxBorrowableAmount
     *
     * @param  \Bitget\Model\MarginCrossMaxBorrowRequest $margin_cross_max_borrow_request marginCrossMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginCrossMaxBorrowResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossAccountMaxBorrowableAmountWithHttpInfo($margin_cross_max_borrow_request, string $contentType = self::contentTypes['marginCrossAccountMaxBorrowableAmount'][0])
    {
        $request = $this->marginCrossAccountMaxBorrowableAmountRequest($margin_cross_max_borrow_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginCrossMaxBorrowResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginCrossMaxBorrowResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginCrossMaxBorrowResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossMaxBorrowResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginCrossMaxBorrowResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossAccountMaxBorrowableAmountAsync
     *
     * maxBorrowableAmount
     *
     * @param  \Bitget\Model\MarginCrossMaxBorrowRequest $margin_cross_max_borrow_request marginCrossMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountMaxBorrowableAmountAsync($margin_cross_max_borrow_request, string $contentType = self::contentTypes['marginCrossAccountMaxBorrowableAmount'][0])
    {
        return $this->marginCrossAccountMaxBorrowableAmountAsyncWithHttpInfo($margin_cross_max_borrow_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossAccountMaxBorrowableAmountAsyncWithHttpInfo
     *
     * maxBorrowableAmount
     *
     * @param  \Bitget\Model\MarginCrossMaxBorrowRequest $margin_cross_max_borrow_request marginCrossMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountMaxBorrowableAmountAsyncWithHttpInfo($margin_cross_max_borrow_request, string $contentType = self::contentTypes['marginCrossAccountMaxBorrowableAmount'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossMaxBorrowResult';
        $request = $this->marginCrossAccountMaxBorrowableAmountRequest($margin_cross_max_borrow_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossAccountMaxBorrowableAmount'
     *
     * @param  \Bitget\Model\MarginCrossMaxBorrowRequest $margin_cross_max_borrow_request marginCrossMaxBorrowRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxBorrowableAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossAccountMaxBorrowableAmountRequest($margin_cross_max_borrow_request, string $contentType = self::contentTypes['marginCrossAccountMaxBorrowableAmount'][0])
    {

        // verify the required parameter 'margin_cross_max_borrow_request' is set
        if ($margin_cross_max_borrow_request === null || (is_array($margin_cross_max_borrow_request) && count($margin_cross_max_borrow_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_cross_max_borrow_request when calling marginCrossAccountMaxBorrowableAmount'
            );
        }


        $resourcePath = '/api/margin/v1/cross/account/maxBorrowableAmount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_cross_max_borrow_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_cross_max_borrow_request));
            } else {
                $httpBody = $margin_cross_max_borrow_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossAccountMaxTransferOutAmount
     *
     * maxTransferOutAmount
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginCrossAssetsResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossAccountMaxTransferOutAmount($coin, string $contentType = self::contentTypes['marginCrossAccountMaxTransferOutAmount'][0])
    {
        list($response) = $this->marginCrossAccountMaxTransferOutAmountWithHttpInfo($coin, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossAccountMaxTransferOutAmountWithHttpInfo
     *
     * maxTransferOutAmount
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginCrossAssetsResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossAccountMaxTransferOutAmountWithHttpInfo($coin, string $contentType = self::contentTypes['marginCrossAccountMaxTransferOutAmount'][0])
    {
        $request = $this->marginCrossAccountMaxTransferOutAmountRequest($coin, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginCrossAssetsResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginCrossAssetsResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginCrossAssetsResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossAssetsResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginCrossAssetsResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossAccountMaxTransferOutAmountAsync
     *
     * maxTransferOutAmount
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountMaxTransferOutAmountAsync($coin, string $contentType = self::contentTypes['marginCrossAccountMaxTransferOutAmount'][0])
    {
        return $this->marginCrossAccountMaxTransferOutAmountAsyncWithHttpInfo($coin, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossAccountMaxTransferOutAmountAsyncWithHttpInfo
     *
     * maxTransferOutAmount
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountMaxTransferOutAmountAsyncWithHttpInfo($coin, string $contentType = self::contentTypes['marginCrossAccountMaxTransferOutAmount'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossAssetsResult';
        $request = $this->marginCrossAccountMaxTransferOutAmountRequest($coin, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossAccountMaxTransferOutAmount'
     *
     * @param  string $coin coin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountMaxTransferOutAmount'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossAccountMaxTransferOutAmountRequest($coin, string $contentType = self::contentTypes['marginCrossAccountMaxTransferOutAmount'][0])
    {

        // verify the required parameter 'coin' is set
        if ($coin === null || (is_array($coin) && count($coin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coin when calling marginCrossAccountMaxTransferOutAmount'
            );
        }


        $resourcePath = '/api/margin/v1/cross/account/maxTransferOutAmount';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $coin,
            'coin', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossAccountRepay
     *
     * repay
     *
     * @param  \Bitget\Model\MarginCrossRepayRequest $margin_cross_repay_request marginCrossRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRepay'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginCrossRepayResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossAccountRepay($margin_cross_repay_request, string $contentType = self::contentTypes['marginCrossAccountRepay'][0])
    {
        list($response) = $this->marginCrossAccountRepayWithHttpInfo($margin_cross_repay_request, $contentType);
        return $response;
    }

    /**
     * Operation marginCrossAccountRepayWithHttpInfo
     *
     * repay
     *
     * @param  \Bitget\Model\MarginCrossRepayRequest $margin_cross_repay_request marginCrossRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRepay'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginCrossRepayResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossAccountRepayWithHttpInfo($margin_cross_repay_request, string $contentType = self::contentTypes['marginCrossAccountRepay'][0])
    {
        $request = $this->marginCrossAccountRepayRequest($margin_cross_repay_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginCrossRepayResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginCrossRepayResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginCrossRepayResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossRepayResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginCrossRepayResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossAccountRepayAsync
     *
     * repay
     *
     * @param  \Bitget\Model\MarginCrossRepayRequest $margin_cross_repay_request marginCrossRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRepay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountRepayAsync($margin_cross_repay_request, string $contentType = self::contentTypes['marginCrossAccountRepay'][0])
    {
        return $this->marginCrossAccountRepayAsyncWithHttpInfo($margin_cross_repay_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossAccountRepayAsyncWithHttpInfo
     *
     * repay
     *
     * @param  \Bitget\Model\MarginCrossRepayRequest $margin_cross_repay_request marginCrossRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRepay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountRepayAsyncWithHttpInfo($margin_cross_repay_request, string $contentType = self::contentTypes['marginCrossAccountRepay'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossRepayResult';
        $request = $this->marginCrossAccountRepayRequest($margin_cross_repay_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossAccountRepay'
     *
     * @param  \Bitget\Model\MarginCrossRepayRequest $margin_cross_repay_request marginCrossRepayRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRepay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossAccountRepayRequest($margin_cross_repay_request, string $contentType = self::contentTypes['marginCrossAccountRepay'][0])
    {

        // verify the required parameter 'margin_cross_repay_request' is set
        if ($margin_cross_repay_request === null || (is_array($margin_cross_repay_request) && count($margin_cross_repay_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $margin_cross_repay_request when calling marginCrossAccountRepay'
            );
        }


        $resourcePath = '/api/margin/v1/cross/account/repay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($margin_cross_repay_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($margin_cross_repay_request));
            } else {
                $httpBody = $margin_cross_repay_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation marginCrossAccountRiskRate
     *
     * riskRate
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfMarginCrossAssetsRiskResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function marginCrossAccountRiskRate(string $contentType = self::contentTypes['marginCrossAccountRiskRate'][0])
    {
        list($response) = $this->marginCrossAccountRiskRateWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation marginCrossAccountRiskRateWithHttpInfo
     *
     * riskRate
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfMarginCrossAssetsRiskResult|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function marginCrossAccountRiskRateWithHttpInfo(string $contentType = self::contentTypes['marginCrossAccountRiskRate'][0])
    {
        $request = $this->marginCrossAccountRiskRateRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfMarginCrossAssetsRiskResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfMarginCrossAssetsRiskResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfMarginCrossAssetsRiskResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossAssetsRiskResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfMarginCrossAssetsRiskResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation marginCrossAccountRiskRateAsync
     *
     * riskRate
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountRiskRateAsync(string $contentType = self::contentTypes['marginCrossAccountRiskRate'][0])
    {
        return $this->marginCrossAccountRiskRateAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation marginCrossAccountRiskRateAsyncWithHttpInfo
     *
     * riskRate
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function marginCrossAccountRiskRateAsyncWithHttpInfo(string $contentType = self::contentTypes['marginCrossAccountRiskRate'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfMarginCrossAssetsRiskResult';
        $request = $this->marginCrossAccountRiskRateRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'marginCrossAccountRiskRate'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['marginCrossAccountRiskRate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function marginCrossAccountRiskRateRequest(string $contentType = self::contentTypes['marginCrossAccountRiskRate'][0])
    {


        $resourcePath = '/api/margin/v1/cross/account/riskRate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation void
     *
     * void
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['void'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid
     */
    public function void(string $contentType = self::contentTypes['void'][0])
    {
        list($response) = $this->voidWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation voidWithHttpInfo
     *
     * void
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['void'] to see the possible values for this operation
     *
     * @throws \Bitget\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid|\Bitget\Model\ApiResponseResultOfVoid, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidWithHttpInfo(string $contentType = self::contentTypes['void'][0])
    {
        $request = $this->voidRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Bitget\Model\ApiResponseResultOfVoid' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Bitget\Model\ApiResponseResultOfVoid' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitget\Model\ApiResponseResultOfVoid', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitget\Model\ApiResponseResultOfVoid';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitget\Model\ApiResponseResultOfVoid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation voidAsync
     *
     * void
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['void'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidAsync(string $contentType = self::contentTypes['void'][0])
    {
        return $this->voidAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidAsyncWithHttpInfo
     *
     * void
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['void'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidAsyncWithHttpInfo(string $contentType = self::contentTypes['void'][0])
    {
        $returnType = '\Bitget\Model\ApiResponseResultOfVoid';
        $request = $this->voidRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'void'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['void'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function voidRequest(string $contentType = self::contentTypes['void'][0])
    {


        $resourcePath = '/api/margin/v1/cross/account/void';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-KEY');
        if ($apiKey !== null) {
            $headers['ACCESS-KEY'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-PASSPHRASE');
        if ($apiKey !== null) {
            $headers['ACCESS-PASSPHRASE'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-SIGN');
        if ($apiKey !== null) {
            $headers['ACCESS-SIGN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('ACCESS-TIMESTAMP');
        if ($apiKey !== null) {
            $headers['ACCESS-TIMESTAMP'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('SECRET-KEY');
        if ($apiKey !== null) {
            $headers['SECRET-KEY'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return \Bitget\Utils::getAutoSignWarpHttpRequest(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
