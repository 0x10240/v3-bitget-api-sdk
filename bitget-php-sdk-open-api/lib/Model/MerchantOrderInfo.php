<?php
/**
 * MerchantOrderInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Model;

use \ArrayAccess;
use \Bitget\ObjectSerializer;

/**
 * MerchantOrderInfo Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantOrderInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantOrderInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adv_no' => 'string',
        'amount' => 'string',
        'buyer_real_name' => 'string',
        'coin' => 'string',
        'count' => 'string',
        'ctime' => 'string',
        'fiat' => 'string',
        'order_id' => 'string',
        'order_no' => 'string',
        'payment_info' => '\Bitget\Model\MerchantOrderPaymentInfo',
        'payment_time' => 'string',
        'price' => 'string',
        'release_coin_time' => 'string',
        'represent_time' => 'string',
        'seller_real_name' => 'string',
        'status' => 'string',
        'type' => 'string',
        'withdraw_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adv_no' => null,
        'amount' => null,
        'buyer_real_name' => null,
        'coin' => null,
        'count' => null,
        'ctime' => null,
        'fiat' => null,
        'order_id' => null,
        'order_no' => null,
        'payment_info' => null,
        'payment_time' => null,
        'price' => null,
        'release_coin_time' => null,
        'represent_time' => null,
        'seller_real_name' => null,
        'status' => null,
        'type' => null,
        'withdraw_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adv_no' => false,
		'amount' => false,
		'buyer_real_name' => false,
		'coin' => false,
		'count' => false,
		'ctime' => false,
		'fiat' => false,
		'order_id' => false,
		'order_no' => false,
		'payment_info' => false,
		'payment_time' => false,
		'price' => false,
		'release_coin_time' => false,
		'represent_time' => false,
		'seller_real_name' => false,
		'status' => false,
		'type' => false,
		'withdraw_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adv_no' => 'advNo',
        'amount' => 'amount',
        'buyer_real_name' => 'buyerRealName',
        'coin' => 'coin',
        'count' => 'count',
        'ctime' => 'ctime',
        'fiat' => 'fiat',
        'order_id' => 'orderId',
        'order_no' => 'orderNo',
        'payment_info' => 'paymentInfo',
        'payment_time' => 'paymentTime',
        'price' => 'price',
        'release_coin_time' => 'releaseCoinTime',
        'represent_time' => 'representTime',
        'seller_real_name' => 'sellerRealName',
        'status' => 'status',
        'type' => 'type',
        'withdraw_time' => 'withdrawTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adv_no' => 'setAdvNo',
        'amount' => 'setAmount',
        'buyer_real_name' => 'setBuyerRealName',
        'coin' => 'setCoin',
        'count' => 'setCount',
        'ctime' => 'setCtime',
        'fiat' => 'setFiat',
        'order_id' => 'setOrderId',
        'order_no' => 'setOrderNo',
        'payment_info' => 'setPaymentInfo',
        'payment_time' => 'setPaymentTime',
        'price' => 'setPrice',
        'release_coin_time' => 'setReleaseCoinTime',
        'represent_time' => 'setRepresentTime',
        'seller_real_name' => 'setSellerRealName',
        'status' => 'setStatus',
        'type' => 'setType',
        'withdraw_time' => 'setWithdrawTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adv_no' => 'getAdvNo',
        'amount' => 'getAmount',
        'buyer_real_name' => 'getBuyerRealName',
        'coin' => 'getCoin',
        'count' => 'getCount',
        'ctime' => 'getCtime',
        'fiat' => 'getFiat',
        'order_id' => 'getOrderId',
        'order_no' => 'getOrderNo',
        'payment_info' => 'getPaymentInfo',
        'payment_time' => 'getPaymentTime',
        'price' => 'getPrice',
        'release_coin_time' => 'getReleaseCoinTime',
        'represent_time' => 'getRepresentTime',
        'seller_real_name' => 'getSellerRealName',
        'status' => 'getStatus',
        'type' => 'getType',
        'withdraw_time' => 'getWithdrawTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('adv_no', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('buyer_real_name', $data ?? [], null);
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('ctime', $data ?? [], null);
        $this->setIfExists('fiat', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order_no', $data ?? [], null);
        $this->setIfExists('payment_info', $data ?? [], null);
        $this->setIfExists('payment_time', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('release_coin_time', $data ?? [], null);
        $this->setIfExists('represent_time', $data ?? [], null);
        $this->setIfExists('seller_real_name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('withdraw_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adv_no
     *
     * @return string|null
     */
    public function getAdvNo()
    {
        return $this->container['adv_no'];
    }

    /**
     * Sets adv_no
     *
     * @param string|null $adv_no adv_no
     *
     * @return self
     */
    public function setAdvNo($adv_no)
    {

        if (is_null($adv_no)) {
            throw new \InvalidArgumentException('non-nullable adv_no cannot be null');
        }

        $this->container['adv_no'] = $adv_no;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets buyer_real_name
     *
     * @return string|null
     */
    public function getBuyerRealName()
    {
        return $this->container['buyer_real_name'];
    }

    /**
     * Sets buyer_real_name
     *
     * @param string|null $buyer_real_name buyer_real_name
     *
     * @return self
     */
    public function setBuyerRealName($buyer_real_name)
    {

        if (is_null($buyer_real_name)) {
            throw new \InvalidArgumentException('non-nullable buyer_real_name cannot be null');
        }

        $this->container['buyer_real_name'] = $buyer_real_name;

        return $this;
    }

    /**
     * Gets coin
     *
     * @return string|null
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string|null $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {

        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }

        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets count
     *
     * @return string|null
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param string|null $count count
     *
     * @return self
     */
    public function setCount($count)
    {

        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }

        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets ctime
     *
     * @return string|null
     */
    public function getCtime()
    {
        return $this->container['ctime'];
    }

    /**
     * Sets ctime
     *
     * @param string|null $ctime ctime
     *
     * @return self
     */
    public function setCtime($ctime)
    {

        if (is_null($ctime)) {
            throw new \InvalidArgumentException('non-nullable ctime cannot be null');
        }

        $this->container['ctime'] = $ctime;

        return $this;
    }

    /**
     * Gets fiat
     *
     * @return string|null
     */
    public function getFiat()
    {
        return $this->container['fiat'];
    }

    /**
     * Sets fiat
     *
     * @param string|null $fiat fiat
     *
     * @return self
     */
    public function setFiat($fiat)
    {

        if (is_null($fiat)) {
            throw new \InvalidArgumentException('non-nullable fiat cannot be null');
        }

        $this->container['fiat'] = $fiat;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {

        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_no
     *
     * @return string|null
     */
    public function getOrderNo()
    {
        return $this->container['order_no'];
    }

    /**
     * Sets order_no
     *
     * @param string|null $order_no order_no
     *
     * @return self
     */
    public function setOrderNo($order_no)
    {

        if (is_null($order_no)) {
            throw new \InvalidArgumentException('non-nullable order_no cannot be null');
        }

        $this->container['order_no'] = $order_no;

        return $this;
    }

    /**
     * Gets payment_info
     *
     * @return \Bitget\Model\MerchantOrderPaymentInfo|null
     */
    public function getPaymentInfo()
    {
        return $this->container['payment_info'];
    }

    /**
     * Sets payment_info
     *
     * @param \Bitget\Model\MerchantOrderPaymentInfo|null $payment_info payment_info
     *
     * @return self
     */
    public function setPaymentInfo($payment_info)
    {

        if (is_null($payment_info)) {
            throw new \InvalidArgumentException('non-nullable payment_info cannot be null');
        }

        $this->container['payment_info'] = $payment_info;

        return $this;
    }

    /**
     * Gets payment_time
     *
     * @return string|null
     */
    public function getPaymentTime()
    {
        return $this->container['payment_time'];
    }

    /**
     * Sets payment_time
     *
     * @param string|null $payment_time payment_time
     *
     * @return self
     */
    public function setPaymentTime($payment_time)
    {

        if (is_null($payment_time)) {
            throw new \InvalidArgumentException('non-nullable payment_time cannot be null');
        }

        $this->container['payment_time'] = $payment_time;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets release_coin_time
     *
     * @return string|null
     */
    public function getReleaseCoinTime()
    {
        return $this->container['release_coin_time'];
    }

    /**
     * Sets release_coin_time
     *
     * @param string|null $release_coin_time release_coin_time
     *
     * @return self
     */
    public function setReleaseCoinTime($release_coin_time)
    {

        if (is_null($release_coin_time)) {
            throw new \InvalidArgumentException('non-nullable release_coin_time cannot be null');
        }

        $this->container['release_coin_time'] = $release_coin_time;

        return $this;
    }

    /**
     * Gets represent_time
     *
     * @return string|null
     */
    public function getRepresentTime()
    {
        return $this->container['represent_time'];
    }

    /**
     * Sets represent_time
     *
     * @param string|null $represent_time represent_time
     *
     * @return self
     */
    public function setRepresentTime($represent_time)
    {

        if (is_null($represent_time)) {
            throw new \InvalidArgumentException('non-nullable represent_time cannot be null');
        }

        $this->container['represent_time'] = $represent_time;

        return $this;
    }

    /**
     * Gets seller_real_name
     *
     * @return string|null
     */
    public function getSellerRealName()
    {
        return $this->container['seller_real_name'];
    }

    /**
     * Sets seller_real_name
     *
     * @param string|null $seller_real_name seller_real_name
     *
     * @return self
     */
    public function setSellerRealName($seller_real_name)
    {

        if (is_null($seller_real_name)) {
            throw new \InvalidArgumentException('non-nullable seller_real_name cannot be null');
        }

        $this->container['seller_real_name'] = $seller_real_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets withdraw_time
     *
     * @return string|null
     */
    public function getWithdrawTime()
    {
        return $this->container['withdraw_time'];
    }

    /**
     * Sets withdraw_time
     *
     * @param string|null $withdraw_time withdraw_time
     *
     * @return self
     */
    public function setWithdrawTime($withdraw_time)
    {

        if (is_null($withdraw_time)) {
            throw new \InvalidArgumentException('non-nullable withdraw_time cannot be null');
        }

        $this->container['withdraw_time'] = $withdraw_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


