<?php
/**
 * MarginSystemResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Model;

use \ArrayAccess;
use \Bitget\ObjectSerializer;

/**
 * MarginSystemResult Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MarginSystemResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MarginSystemResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_coin' => 'string',
        'is_borrowable' => 'bool',
        'liquidation_risk_ratio' => 'string',
        'maker_fee_rate' => 'string',
        'max_cross_leverage' => 'string',
        'max_isolated_leverage' => 'string',
        'max_trade_amount' => 'string',
        'min_trade_amount' => 'string',
        'min_trade_usdt' => 'string',
        'price_scale' => 'string',
        'quantity_scale' => 'string',
        'quote_coin' => 'string',
        'status' => 'string',
        'symbol' => 'string',
        'taker_fee_rate' => 'string',
        'user_min_borrow' => 'string',
        'warning_risk_ratio' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_coin' => null,
        'is_borrowable' => null,
        'liquidation_risk_ratio' => null,
        'maker_fee_rate' => null,
        'max_cross_leverage' => null,
        'max_isolated_leverage' => null,
        'max_trade_amount' => null,
        'min_trade_amount' => null,
        'min_trade_usdt' => null,
        'price_scale' => null,
        'quantity_scale' => null,
        'quote_coin' => null,
        'status' => null,
        'symbol' => null,
        'taker_fee_rate' => null,
        'user_min_borrow' => null,
        'warning_risk_ratio' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_coin' => false,
		'is_borrowable' => false,
		'liquidation_risk_ratio' => false,
		'maker_fee_rate' => false,
		'max_cross_leverage' => false,
		'max_isolated_leverage' => false,
		'max_trade_amount' => false,
		'min_trade_amount' => false,
		'min_trade_usdt' => false,
		'price_scale' => false,
		'quantity_scale' => false,
		'quote_coin' => false,
		'status' => false,
		'symbol' => false,
		'taker_fee_rate' => false,
		'user_min_borrow' => false,
		'warning_risk_ratio' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_coin' => 'baseCoin',
        'is_borrowable' => 'isBorrowable',
        'liquidation_risk_ratio' => 'liquidationRiskRatio',
        'maker_fee_rate' => 'makerFeeRate',
        'max_cross_leverage' => 'maxCrossLeverage',
        'max_isolated_leverage' => 'maxIsolatedLeverage',
        'max_trade_amount' => 'maxTradeAmount',
        'min_trade_amount' => 'minTradeAmount',
        'min_trade_usdt' => 'minTradeUSDT',
        'price_scale' => 'priceScale',
        'quantity_scale' => 'quantityScale',
        'quote_coin' => 'quoteCoin',
        'status' => 'status',
        'symbol' => 'symbol',
        'taker_fee_rate' => 'takerFeeRate',
        'user_min_borrow' => 'userMinBorrow',
        'warning_risk_ratio' => 'warningRiskRatio'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_coin' => 'setBaseCoin',
        'is_borrowable' => 'setIsBorrowable',
        'liquidation_risk_ratio' => 'setLiquidationRiskRatio',
        'maker_fee_rate' => 'setMakerFeeRate',
        'max_cross_leverage' => 'setMaxCrossLeverage',
        'max_isolated_leverage' => 'setMaxIsolatedLeverage',
        'max_trade_amount' => 'setMaxTradeAmount',
        'min_trade_amount' => 'setMinTradeAmount',
        'min_trade_usdt' => 'setMinTradeUsdt',
        'price_scale' => 'setPriceScale',
        'quantity_scale' => 'setQuantityScale',
        'quote_coin' => 'setQuoteCoin',
        'status' => 'setStatus',
        'symbol' => 'setSymbol',
        'taker_fee_rate' => 'setTakerFeeRate',
        'user_min_borrow' => 'setUserMinBorrow',
        'warning_risk_ratio' => 'setWarningRiskRatio'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_coin' => 'getBaseCoin',
        'is_borrowable' => 'getIsBorrowable',
        'liquidation_risk_ratio' => 'getLiquidationRiskRatio',
        'maker_fee_rate' => 'getMakerFeeRate',
        'max_cross_leverage' => 'getMaxCrossLeverage',
        'max_isolated_leverage' => 'getMaxIsolatedLeverage',
        'max_trade_amount' => 'getMaxTradeAmount',
        'min_trade_amount' => 'getMinTradeAmount',
        'min_trade_usdt' => 'getMinTradeUsdt',
        'price_scale' => 'getPriceScale',
        'quantity_scale' => 'getQuantityScale',
        'quote_coin' => 'getQuoteCoin',
        'status' => 'getStatus',
        'symbol' => 'getSymbol',
        'taker_fee_rate' => 'getTakerFeeRate',
        'user_min_borrow' => 'getUserMinBorrow',
        'warning_risk_ratio' => 'getWarningRiskRatio'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base_coin', $data ?? [], null);
        $this->setIfExists('is_borrowable', $data ?? [], null);
        $this->setIfExists('liquidation_risk_ratio', $data ?? [], null);
        $this->setIfExists('maker_fee_rate', $data ?? [], null);
        $this->setIfExists('max_cross_leverage', $data ?? [], null);
        $this->setIfExists('max_isolated_leverage', $data ?? [], null);
        $this->setIfExists('max_trade_amount', $data ?? [], null);
        $this->setIfExists('min_trade_amount', $data ?? [], null);
        $this->setIfExists('min_trade_usdt', $data ?? [], null);
        $this->setIfExists('price_scale', $data ?? [], null);
        $this->setIfExists('quantity_scale', $data ?? [], null);
        $this->setIfExists('quote_coin', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
        $this->setIfExists('taker_fee_rate', $data ?? [], null);
        $this->setIfExists('user_min_borrow', $data ?? [], null);
        $this->setIfExists('warning_risk_ratio', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_coin
     *
     * @return string|null
     */
    public function getBaseCoin()
    {
        return $this->container['base_coin'];
    }

    /**
     * Sets base_coin
     *
     * @param string|null $base_coin base_coin
     *
     * @return self
     */
    public function setBaseCoin($base_coin)
    {

        if (is_null($base_coin)) {
            throw new \InvalidArgumentException('non-nullable base_coin cannot be null');
        }

        $this->container['base_coin'] = $base_coin;

        return $this;
    }

    /**
     * Gets is_borrowable
     *
     * @return bool|null
     */
    public function getIsBorrowable()
    {
        return $this->container['is_borrowable'];
    }

    /**
     * Sets is_borrowable
     *
     * @param bool|null $is_borrowable is_borrowable
     *
     * @return self
     */
    public function setIsBorrowable($is_borrowable)
    {

        if (is_null($is_borrowable)) {
            throw new \InvalidArgumentException('non-nullable is_borrowable cannot be null');
        }

        $this->container['is_borrowable'] = $is_borrowable;

        return $this;
    }

    /**
     * Gets liquidation_risk_ratio
     *
     * @return string|null
     */
    public function getLiquidationRiskRatio()
    {
        return $this->container['liquidation_risk_ratio'];
    }

    /**
     * Sets liquidation_risk_ratio
     *
     * @param string|null $liquidation_risk_ratio liquidation_risk_ratio
     *
     * @return self
     */
    public function setLiquidationRiskRatio($liquidation_risk_ratio)
    {

        if (is_null($liquidation_risk_ratio)) {
            throw new \InvalidArgumentException('non-nullable liquidation_risk_ratio cannot be null');
        }

        $this->container['liquidation_risk_ratio'] = $liquidation_risk_ratio;

        return $this;
    }

    /**
     * Gets maker_fee_rate
     *
     * @return string|null
     */
    public function getMakerFeeRate()
    {
        return $this->container['maker_fee_rate'];
    }

    /**
     * Sets maker_fee_rate
     *
     * @param string|null $maker_fee_rate maker_fee_rate
     *
     * @return self
     */
    public function setMakerFeeRate($maker_fee_rate)
    {

        if (is_null($maker_fee_rate)) {
            throw new \InvalidArgumentException('non-nullable maker_fee_rate cannot be null');
        }

        $this->container['maker_fee_rate'] = $maker_fee_rate;

        return $this;
    }

    /**
     * Gets max_cross_leverage
     *
     * @return string|null
     */
    public function getMaxCrossLeverage()
    {
        return $this->container['max_cross_leverage'];
    }

    /**
     * Sets max_cross_leverage
     *
     * @param string|null $max_cross_leverage max_cross_leverage
     *
     * @return self
     */
    public function setMaxCrossLeverage($max_cross_leverage)
    {

        if (is_null($max_cross_leverage)) {
            throw new \InvalidArgumentException('non-nullable max_cross_leverage cannot be null');
        }

        $this->container['max_cross_leverage'] = $max_cross_leverage;

        return $this;
    }

    /**
     * Gets max_isolated_leverage
     *
     * @return string|null
     */
    public function getMaxIsolatedLeverage()
    {
        return $this->container['max_isolated_leverage'];
    }

    /**
     * Sets max_isolated_leverage
     *
     * @param string|null $max_isolated_leverage max_isolated_leverage
     *
     * @return self
     */
    public function setMaxIsolatedLeverage($max_isolated_leverage)
    {

        if (is_null($max_isolated_leverage)) {
            throw new \InvalidArgumentException('non-nullable max_isolated_leverage cannot be null');
        }

        $this->container['max_isolated_leverage'] = $max_isolated_leverage;

        return $this;
    }

    /**
     * Gets max_trade_amount
     *
     * @return string|null
     */
    public function getMaxTradeAmount()
    {
        return $this->container['max_trade_amount'];
    }

    /**
     * Sets max_trade_amount
     *
     * @param string|null $max_trade_amount max_trade_amount
     *
     * @return self
     */
    public function setMaxTradeAmount($max_trade_amount)
    {

        if (is_null($max_trade_amount)) {
            throw new \InvalidArgumentException('non-nullable max_trade_amount cannot be null');
        }

        $this->container['max_trade_amount'] = $max_trade_amount;

        return $this;
    }

    /**
     * Gets min_trade_amount
     *
     * @return string|null
     */
    public function getMinTradeAmount()
    {
        return $this->container['min_trade_amount'];
    }

    /**
     * Sets min_trade_amount
     *
     * @param string|null $min_trade_amount min_trade_amount
     *
     * @return self
     */
    public function setMinTradeAmount($min_trade_amount)
    {

        if (is_null($min_trade_amount)) {
            throw new \InvalidArgumentException('non-nullable min_trade_amount cannot be null');
        }

        $this->container['min_trade_amount'] = $min_trade_amount;

        return $this;
    }

    /**
     * Gets min_trade_usdt
     *
     * @return string|null
     */
    public function getMinTradeUsdt()
    {
        return $this->container['min_trade_usdt'];
    }

    /**
     * Sets min_trade_usdt
     *
     * @param string|null $min_trade_usdt min_trade_usdt
     *
     * @return self
     */
    public function setMinTradeUsdt($min_trade_usdt)
    {

        if (is_null($min_trade_usdt)) {
            throw new \InvalidArgumentException('non-nullable min_trade_usdt cannot be null');
        }

        $this->container['min_trade_usdt'] = $min_trade_usdt;

        return $this;
    }

    /**
     * Gets price_scale
     *
     * @return string|null
     */
    public function getPriceScale()
    {
        return $this->container['price_scale'];
    }

    /**
     * Sets price_scale
     *
     * @param string|null $price_scale price_scale
     *
     * @return self
     */
    public function setPriceScale($price_scale)
    {

        if (is_null($price_scale)) {
            throw new \InvalidArgumentException('non-nullable price_scale cannot be null');
        }

        $this->container['price_scale'] = $price_scale;

        return $this;
    }

    /**
     * Gets quantity_scale
     *
     * @return string|null
     */
    public function getQuantityScale()
    {
        return $this->container['quantity_scale'];
    }

    /**
     * Sets quantity_scale
     *
     * @param string|null $quantity_scale quantity_scale
     *
     * @return self
     */
    public function setQuantityScale($quantity_scale)
    {

        if (is_null($quantity_scale)) {
            throw new \InvalidArgumentException('non-nullable quantity_scale cannot be null');
        }

        $this->container['quantity_scale'] = $quantity_scale;

        return $this;
    }

    /**
     * Gets quote_coin
     *
     * @return string|null
     */
    public function getQuoteCoin()
    {
        return $this->container['quote_coin'];
    }

    /**
     * Sets quote_coin
     *
     * @param string|null $quote_coin quote_coin
     *
     * @return self
     */
    public function setQuoteCoin($quote_coin)
    {

        if (is_null($quote_coin)) {
            throw new \InvalidArgumentException('non-nullable quote_coin cannot be null');
        }

        $this->container['quote_coin'] = $quote_coin;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {

        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets taker_fee_rate
     *
     * @return string|null
     */
    public function getTakerFeeRate()
    {
        return $this->container['taker_fee_rate'];
    }

    /**
     * Sets taker_fee_rate
     *
     * @param string|null $taker_fee_rate taker_fee_rate
     *
     * @return self
     */
    public function setTakerFeeRate($taker_fee_rate)
    {

        if (is_null($taker_fee_rate)) {
            throw new \InvalidArgumentException('non-nullable taker_fee_rate cannot be null');
        }

        $this->container['taker_fee_rate'] = $taker_fee_rate;

        return $this;
    }

    /**
     * Gets user_min_borrow
     *
     * @return string|null
     */
    public function getUserMinBorrow()
    {
        return $this->container['user_min_borrow'];
    }

    /**
     * Sets user_min_borrow
     *
     * @param string|null $user_min_borrow user_min_borrow
     *
     * @return self
     */
    public function setUserMinBorrow($user_min_borrow)
    {

        if (is_null($user_min_borrow)) {
            throw new \InvalidArgumentException('non-nullable user_min_borrow cannot be null');
        }

        $this->container['user_min_borrow'] = $user_min_borrow;

        return $this;
    }

    /**
     * Gets warning_risk_ratio
     *
     * @return string|null
     */
    public function getWarningRiskRatio()
    {
        return $this->container['warning_risk_ratio'];
    }

    /**
     * Sets warning_risk_ratio
     *
     * @param string|null $warning_risk_ratio warning_risk_ratio
     *
     * @return self
     */
    public function setWarningRiskRatio($warning_risk_ratio)
    {

        if (is_null($warning_risk_ratio)) {
            throw new \InvalidArgumentException('non-nullable warning_risk_ratio cannot be null');
        }

        $this->container['warning_risk_ratio'] = $warning_risk_ratio;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


