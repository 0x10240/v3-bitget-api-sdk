<?php
/**
 * TraceSettingResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Model;

use \ArrayAccess;
use \Bitget\ObjectSerializer;

/**
 * TraceSettingResult Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TraceSettingResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TraceSettingResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_my_trader' => 'bool',
        'profit_rate' => 'string',
        'setting_type' => 'string',
        'settled_in_days' => 'string',
        'trace_batch_details' => '\Bitget\Model\TraceSettingBatchDetailsResult[]',
        'trace_product_configs' => '\Bitget\Model\TraceSettingProductConfigsResult[]',
        'trader_head_pic' => 'string',
        'trader_nick_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_my_trader' => null,
        'profit_rate' => null,
        'setting_type' => null,
        'settled_in_days' => null,
        'trace_batch_details' => null,
        'trace_product_configs' => null,
        'trader_head_pic' => null,
        'trader_nick_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_my_trader' => false,
		'profit_rate' => false,
		'setting_type' => false,
		'settled_in_days' => false,
		'trace_batch_details' => false,
		'trace_product_configs' => false,
		'trader_head_pic' => false,
		'trader_nick_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_my_trader' => 'isMyTrader',
        'profit_rate' => 'profitRate',
        'setting_type' => 'settingType',
        'settled_in_days' => 'settledInDays',
        'trace_batch_details' => 'traceBatchDetails',
        'trace_product_configs' => 'traceProductConfigs',
        'trader_head_pic' => 'traderHeadPic',
        'trader_nick_name' => 'traderNickName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_my_trader' => 'setIsMyTrader',
        'profit_rate' => 'setProfitRate',
        'setting_type' => 'setSettingType',
        'settled_in_days' => 'setSettledInDays',
        'trace_batch_details' => 'setTraceBatchDetails',
        'trace_product_configs' => 'setTraceProductConfigs',
        'trader_head_pic' => 'setTraderHeadPic',
        'trader_nick_name' => 'setTraderNickName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_my_trader' => 'getIsMyTrader',
        'profit_rate' => 'getProfitRate',
        'setting_type' => 'getSettingType',
        'settled_in_days' => 'getSettledInDays',
        'trace_batch_details' => 'getTraceBatchDetails',
        'trace_product_configs' => 'getTraceProductConfigs',
        'trader_head_pic' => 'getTraderHeadPic',
        'trader_nick_name' => 'getTraderNickName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('is_my_trader', $data ?? [], null);
        $this->setIfExists('profit_rate', $data ?? [], null);
        $this->setIfExists('setting_type', $data ?? [], null);
        $this->setIfExists('settled_in_days', $data ?? [], null);
        $this->setIfExists('trace_batch_details', $data ?? [], null);
        $this->setIfExists('trace_product_configs', $data ?? [], null);
        $this->setIfExists('trader_head_pic', $data ?? [], null);
        $this->setIfExists('trader_nick_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_my_trader
     *
     * @return bool|null
     */
    public function getIsMyTrader()
    {
        return $this->container['is_my_trader'];
    }

    /**
     * Sets is_my_trader
     *
     * @param bool|null $is_my_trader is_my_trader
     *
     * @return self
     */
    public function setIsMyTrader($is_my_trader)
    {

        if (is_null($is_my_trader)) {
            throw new \InvalidArgumentException('non-nullable is_my_trader cannot be null');
        }

        $this->container['is_my_trader'] = $is_my_trader;

        return $this;
    }

    /**
     * Gets profit_rate
     *
     * @return string|null
     */
    public function getProfitRate()
    {
        return $this->container['profit_rate'];
    }

    /**
     * Sets profit_rate
     *
     * @param string|null $profit_rate profit_rate
     *
     * @return self
     */
    public function setProfitRate($profit_rate)
    {

        if (is_null($profit_rate)) {
            throw new \InvalidArgumentException('non-nullable profit_rate cannot be null');
        }

        $this->container['profit_rate'] = $profit_rate;

        return $this;
    }

    /**
     * Gets setting_type
     *
     * @return string|null
     */
    public function getSettingType()
    {
        return $this->container['setting_type'];
    }

    /**
     * Sets setting_type
     *
     * @param string|null $setting_type setting_type
     *
     * @return self
     */
    public function setSettingType($setting_type)
    {

        if (is_null($setting_type)) {
            throw new \InvalidArgumentException('non-nullable setting_type cannot be null');
        }

        $this->container['setting_type'] = $setting_type;

        return $this;
    }

    /**
     * Gets settled_in_days
     *
     * @return string|null
     */
    public function getSettledInDays()
    {
        return $this->container['settled_in_days'];
    }

    /**
     * Sets settled_in_days
     *
     * @param string|null $settled_in_days settled_in_days
     *
     * @return self
     */
    public function setSettledInDays($settled_in_days)
    {

        if (is_null($settled_in_days)) {
            throw new \InvalidArgumentException('non-nullable settled_in_days cannot be null');
        }

        $this->container['settled_in_days'] = $settled_in_days;

        return $this;
    }

    /**
     * Gets trace_batch_details
     *
     * @return \Bitget\Model\TraceSettingBatchDetailsResult[]|null
     */
    public function getTraceBatchDetails()
    {
        return $this->container['trace_batch_details'];
    }

    /**
     * Sets trace_batch_details
     *
     * @param \Bitget\Model\TraceSettingBatchDetailsResult[]|null $trace_batch_details trace_batch_details
     *
     * @return self
     */
    public function setTraceBatchDetails($trace_batch_details)
    {

        if (is_null($trace_batch_details)) {
            throw new \InvalidArgumentException('non-nullable trace_batch_details cannot be null');
        }

        $this->container['trace_batch_details'] = $trace_batch_details;

        return $this;
    }

    /**
     * Gets trace_product_configs
     *
     * @return \Bitget\Model\TraceSettingProductConfigsResult[]|null
     */
    public function getTraceProductConfigs()
    {
        return $this->container['trace_product_configs'];
    }

    /**
     * Sets trace_product_configs
     *
     * @param \Bitget\Model\TraceSettingProductConfigsResult[]|null $trace_product_configs trace_product_configs
     *
     * @return self
     */
    public function setTraceProductConfigs($trace_product_configs)
    {

        if (is_null($trace_product_configs)) {
            throw new \InvalidArgumentException('non-nullable trace_product_configs cannot be null');
        }

        $this->container['trace_product_configs'] = $trace_product_configs;

        return $this;
    }

    /**
     * Gets trader_head_pic
     *
     * @return string|null
     */
    public function getTraderHeadPic()
    {
        return $this->container['trader_head_pic'];
    }

    /**
     * Sets trader_head_pic
     *
     * @param string|null $trader_head_pic trader_head_pic
     *
     * @return self
     */
    public function setTraderHeadPic($trader_head_pic)
    {

        if (is_null($trader_head_pic)) {
            throw new \InvalidArgumentException('non-nullable trader_head_pic cannot be null');
        }

        $this->container['trader_head_pic'] = $trader_head_pic;

        return $this;
    }

    /**
     * Gets trader_nick_name
     *
     * @return string|null
     */
    public function getTraderNickName()
    {
        return $this->container['trader_nick_name'];
    }

    /**
     * Sets trader_nick_name
     *
     * @param string|null $trader_nick_name trader_nick_name
     *
     * @return self
     */
    public function setTraderNickName($trader_nick_name)
    {

        if (is_null($trader_nick_name)) {
            throw new \InvalidArgumentException('non-nullable trader_nick_name cannot be null');
        }

        $this->container['trader_nick_name'] = $trader_nick_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


