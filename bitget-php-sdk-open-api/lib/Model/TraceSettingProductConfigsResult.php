<?php
/**
 * TraceSettingProductConfigsResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Model;

use \ArrayAccess;
use \Bitget\ObjectSerializer;

/**
 * TraceSettingProductConfigsResult Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TraceSettingProductConfigsResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TraceSettingProductConfigsResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'business_line' => 'string',
        'max_stop_loss_ration' => 'string',
        'max_stop_profit_ration' => 'string',
        'max_trace_amount' => 'string',
        'max_trace_amount_system' => 'string',
        'max_trace_count' => 'string',
        'max_trace_ration' => 'string',
        'min_stop_loss_ration' => 'string',
        'min_stop_profit_ration' => 'string',
        'min_trace_amount' => 'string',
        'min_trace_count' => 'string',
        'min_trace_ration' => 'string',
        'slider_max_stop_loss_ratio' => 'string',
        'slider_max_stop_profit_ratio' => 'string',
        'symbol_id' => 'string',
        'symbol_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'business_line' => null,
        'max_stop_loss_ration' => null,
        'max_stop_profit_ration' => null,
        'max_trace_amount' => null,
        'max_trace_amount_system' => null,
        'max_trace_count' => null,
        'max_trace_ration' => null,
        'min_stop_loss_ration' => null,
        'min_stop_profit_ration' => null,
        'min_trace_amount' => null,
        'min_trace_count' => null,
        'min_trace_ration' => null,
        'slider_max_stop_loss_ratio' => null,
        'slider_max_stop_profit_ratio' => null,
        'symbol_id' => null,
        'symbol_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'business_line' => false,
		'max_stop_loss_ration' => false,
		'max_stop_profit_ration' => false,
		'max_trace_amount' => false,
		'max_trace_amount_system' => false,
		'max_trace_count' => false,
		'max_trace_ration' => false,
		'min_stop_loss_ration' => false,
		'min_stop_profit_ration' => false,
		'min_trace_amount' => false,
		'min_trace_count' => false,
		'min_trace_ration' => false,
		'slider_max_stop_loss_ratio' => false,
		'slider_max_stop_profit_ratio' => false,
		'symbol_id' => false,
		'symbol_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_line' => 'businessLine',
        'max_stop_loss_ration' => 'maxStopLossRation',
        'max_stop_profit_ration' => 'maxStopProfitRation',
        'max_trace_amount' => 'maxTraceAmount',
        'max_trace_amount_system' => 'maxTraceAmountSystem',
        'max_trace_count' => 'maxTraceCount',
        'max_trace_ration' => 'maxTraceRation',
        'min_stop_loss_ration' => 'minStopLossRation',
        'min_stop_profit_ration' => 'minStopProfitRation',
        'min_trace_amount' => 'minTraceAmount',
        'min_trace_count' => 'minTraceCount',
        'min_trace_ration' => 'minTraceRation',
        'slider_max_stop_loss_ratio' => 'sliderMaxStopLossRatio',
        'slider_max_stop_profit_ratio' => 'sliderMaxStopProfitRatio',
        'symbol_id' => 'symbolId',
        'symbol_name' => 'symbolName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_line' => 'setBusinessLine',
        'max_stop_loss_ration' => 'setMaxStopLossRation',
        'max_stop_profit_ration' => 'setMaxStopProfitRation',
        'max_trace_amount' => 'setMaxTraceAmount',
        'max_trace_amount_system' => 'setMaxTraceAmountSystem',
        'max_trace_count' => 'setMaxTraceCount',
        'max_trace_ration' => 'setMaxTraceRation',
        'min_stop_loss_ration' => 'setMinStopLossRation',
        'min_stop_profit_ration' => 'setMinStopProfitRation',
        'min_trace_amount' => 'setMinTraceAmount',
        'min_trace_count' => 'setMinTraceCount',
        'min_trace_ration' => 'setMinTraceRation',
        'slider_max_stop_loss_ratio' => 'setSliderMaxStopLossRatio',
        'slider_max_stop_profit_ratio' => 'setSliderMaxStopProfitRatio',
        'symbol_id' => 'setSymbolId',
        'symbol_name' => 'setSymbolName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_line' => 'getBusinessLine',
        'max_stop_loss_ration' => 'getMaxStopLossRation',
        'max_stop_profit_ration' => 'getMaxStopProfitRation',
        'max_trace_amount' => 'getMaxTraceAmount',
        'max_trace_amount_system' => 'getMaxTraceAmountSystem',
        'max_trace_count' => 'getMaxTraceCount',
        'max_trace_ration' => 'getMaxTraceRation',
        'min_stop_loss_ration' => 'getMinStopLossRation',
        'min_stop_profit_ration' => 'getMinStopProfitRation',
        'min_trace_amount' => 'getMinTraceAmount',
        'min_trace_count' => 'getMinTraceCount',
        'min_trace_ration' => 'getMinTraceRation',
        'slider_max_stop_loss_ratio' => 'getSliderMaxStopLossRatio',
        'slider_max_stop_profit_ratio' => 'getSliderMaxStopProfitRatio',
        'symbol_id' => 'getSymbolId',
        'symbol_name' => 'getSymbolName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('business_line', $data ?? [], null);
        $this->setIfExists('max_stop_loss_ration', $data ?? [], null);
        $this->setIfExists('max_stop_profit_ration', $data ?? [], null);
        $this->setIfExists('max_trace_amount', $data ?? [], null);
        $this->setIfExists('max_trace_amount_system', $data ?? [], null);
        $this->setIfExists('max_trace_count', $data ?? [], null);
        $this->setIfExists('max_trace_ration', $data ?? [], null);
        $this->setIfExists('min_stop_loss_ration', $data ?? [], null);
        $this->setIfExists('min_stop_profit_ration', $data ?? [], null);
        $this->setIfExists('min_trace_amount', $data ?? [], null);
        $this->setIfExists('min_trace_count', $data ?? [], null);
        $this->setIfExists('min_trace_ration', $data ?? [], null);
        $this->setIfExists('slider_max_stop_loss_ratio', $data ?? [], null);
        $this->setIfExists('slider_max_stop_profit_ratio', $data ?? [], null);
        $this->setIfExists('symbol_id', $data ?? [], null);
        $this->setIfExists('symbol_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_line
     *
     * @return string|null
     */
    public function getBusinessLine()
    {
        return $this->container['business_line'];
    }

    /**
     * Sets business_line
     *
     * @param string|null $business_line business_line
     *
     * @return self
     */
    public function setBusinessLine($business_line)
    {

        if (is_null($business_line)) {
            throw new \InvalidArgumentException('non-nullable business_line cannot be null');
        }

        $this->container['business_line'] = $business_line;

        return $this;
    }

    /**
     * Gets max_stop_loss_ration
     *
     * @return string|null
     */
    public function getMaxStopLossRation()
    {
        return $this->container['max_stop_loss_ration'];
    }

    /**
     * Sets max_stop_loss_ration
     *
     * @param string|null $max_stop_loss_ration max_stop_loss_ration
     *
     * @return self
     */
    public function setMaxStopLossRation($max_stop_loss_ration)
    {

        if (is_null($max_stop_loss_ration)) {
            throw new \InvalidArgumentException('non-nullable max_stop_loss_ration cannot be null');
        }

        $this->container['max_stop_loss_ration'] = $max_stop_loss_ration;

        return $this;
    }

    /**
     * Gets max_stop_profit_ration
     *
     * @return string|null
     */
    public function getMaxStopProfitRation()
    {
        return $this->container['max_stop_profit_ration'];
    }

    /**
     * Sets max_stop_profit_ration
     *
     * @param string|null $max_stop_profit_ration max_stop_profit_ration
     *
     * @return self
     */
    public function setMaxStopProfitRation($max_stop_profit_ration)
    {

        if (is_null($max_stop_profit_ration)) {
            throw new \InvalidArgumentException('non-nullable max_stop_profit_ration cannot be null');
        }

        $this->container['max_stop_profit_ration'] = $max_stop_profit_ration;

        return $this;
    }

    /**
     * Gets max_trace_amount
     *
     * @return string|null
     */
    public function getMaxTraceAmount()
    {
        return $this->container['max_trace_amount'];
    }

    /**
     * Sets max_trace_amount
     *
     * @param string|null $max_trace_amount max_trace_amount
     *
     * @return self
     */
    public function setMaxTraceAmount($max_trace_amount)
    {

        if (is_null($max_trace_amount)) {
            throw new \InvalidArgumentException('non-nullable max_trace_amount cannot be null');
        }

        $this->container['max_trace_amount'] = $max_trace_amount;

        return $this;
    }

    /**
     * Gets max_trace_amount_system
     *
     * @return string|null
     */
    public function getMaxTraceAmountSystem()
    {
        return $this->container['max_trace_amount_system'];
    }

    /**
     * Sets max_trace_amount_system
     *
     * @param string|null $max_trace_amount_system max_trace_amount_system
     *
     * @return self
     */
    public function setMaxTraceAmountSystem($max_trace_amount_system)
    {

        if (is_null($max_trace_amount_system)) {
            throw new \InvalidArgumentException('non-nullable max_trace_amount_system cannot be null');
        }

        $this->container['max_trace_amount_system'] = $max_trace_amount_system;

        return $this;
    }

    /**
     * Gets max_trace_count
     *
     * @return string|null
     */
    public function getMaxTraceCount()
    {
        return $this->container['max_trace_count'];
    }

    /**
     * Sets max_trace_count
     *
     * @param string|null $max_trace_count max_trace_count
     *
     * @return self
     */
    public function setMaxTraceCount($max_trace_count)
    {

        if (is_null($max_trace_count)) {
            throw new \InvalidArgumentException('non-nullable max_trace_count cannot be null');
        }

        $this->container['max_trace_count'] = $max_trace_count;

        return $this;
    }

    /**
     * Gets max_trace_ration
     *
     * @return string|null
     */
    public function getMaxTraceRation()
    {
        return $this->container['max_trace_ration'];
    }

    /**
     * Sets max_trace_ration
     *
     * @param string|null $max_trace_ration max_trace_ration
     *
     * @return self
     */
    public function setMaxTraceRation($max_trace_ration)
    {

        if (is_null($max_trace_ration)) {
            throw new \InvalidArgumentException('non-nullable max_trace_ration cannot be null');
        }

        $this->container['max_trace_ration'] = $max_trace_ration;

        return $this;
    }

    /**
     * Gets min_stop_loss_ration
     *
     * @return string|null
     */
    public function getMinStopLossRation()
    {
        return $this->container['min_stop_loss_ration'];
    }

    /**
     * Sets min_stop_loss_ration
     *
     * @param string|null $min_stop_loss_ration min_stop_loss_ration
     *
     * @return self
     */
    public function setMinStopLossRation($min_stop_loss_ration)
    {

        if (is_null($min_stop_loss_ration)) {
            throw new \InvalidArgumentException('non-nullable min_stop_loss_ration cannot be null');
        }

        $this->container['min_stop_loss_ration'] = $min_stop_loss_ration;

        return $this;
    }

    /**
     * Gets min_stop_profit_ration
     *
     * @return string|null
     */
    public function getMinStopProfitRation()
    {
        return $this->container['min_stop_profit_ration'];
    }

    /**
     * Sets min_stop_profit_ration
     *
     * @param string|null $min_stop_profit_ration min_stop_profit_ration
     *
     * @return self
     */
    public function setMinStopProfitRation($min_stop_profit_ration)
    {

        if (is_null($min_stop_profit_ration)) {
            throw new \InvalidArgumentException('non-nullable min_stop_profit_ration cannot be null');
        }

        $this->container['min_stop_profit_ration'] = $min_stop_profit_ration;

        return $this;
    }

    /**
     * Gets min_trace_amount
     *
     * @return string|null
     */
    public function getMinTraceAmount()
    {
        return $this->container['min_trace_amount'];
    }

    /**
     * Sets min_trace_amount
     *
     * @param string|null $min_trace_amount min_trace_amount
     *
     * @return self
     */
    public function setMinTraceAmount($min_trace_amount)
    {

        if (is_null($min_trace_amount)) {
            throw new \InvalidArgumentException('non-nullable min_trace_amount cannot be null');
        }

        $this->container['min_trace_amount'] = $min_trace_amount;

        return $this;
    }

    /**
     * Gets min_trace_count
     *
     * @return string|null
     */
    public function getMinTraceCount()
    {
        return $this->container['min_trace_count'];
    }

    /**
     * Sets min_trace_count
     *
     * @param string|null $min_trace_count min_trace_count
     *
     * @return self
     */
    public function setMinTraceCount($min_trace_count)
    {

        if (is_null($min_trace_count)) {
            throw new \InvalidArgumentException('non-nullable min_trace_count cannot be null');
        }

        $this->container['min_trace_count'] = $min_trace_count;

        return $this;
    }

    /**
     * Gets min_trace_ration
     *
     * @return string|null
     */
    public function getMinTraceRation()
    {
        return $this->container['min_trace_ration'];
    }

    /**
     * Sets min_trace_ration
     *
     * @param string|null $min_trace_ration min_trace_ration
     *
     * @return self
     */
    public function setMinTraceRation($min_trace_ration)
    {

        if (is_null($min_trace_ration)) {
            throw new \InvalidArgumentException('non-nullable min_trace_ration cannot be null');
        }

        $this->container['min_trace_ration'] = $min_trace_ration;

        return $this;
    }

    /**
     * Gets slider_max_stop_loss_ratio
     *
     * @return string|null
     */
    public function getSliderMaxStopLossRatio()
    {
        return $this->container['slider_max_stop_loss_ratio'];
    }

    /**
     * Sets slider_max_stop_loss_ratio
     *
     * @param string|null $slider_max_stop_loss_ratio slider_max_stop_loss_ratio
     *
     * @return self
     */
    public function setSliderMaxStopLossRatio($slider_max_stop_loss_ratio)
    {

        if (is_null($slider_max_stop_loss_ratio)) {
            throw new \InvalidArgumentException('non-nullable slider_max_stop_loss_ratio cannot be null');
        }

        $this->container['slider_max_stop_loss_ratio'] = $slider_max_stop_loss_ratio;

        return $this;
    }

    /**
     * Gets slider_max_stop_profit_ratio
     *
     * @return string|null
     */
    public function getSliderMaxStopProfitRatio()
    {
        return $this->container['slider_max_stop_profit_ratio'];
    }

    /**
     * Sets slider_max_stop_profit_ratio
     *
     * @param string|null $slider_max_stop_profit_ratio slider_max_stop_profit_ratio
     *
     * @return self
     */
    public function setSliderMaxStopProfitRatio($slider_max_stop_profit_ratio)
    {

        if (is_null($slider_max_stop_profit_ratio)) {
            throw new \InvalidArgumentException('non-nullable slider_max_stop_profit_ratio cannot be null');
        }

        $this->container['slider_max_stop_profit_ratio'] = $slider_max_stop_profit_ratio;

        return $this;
    }

    /**
     * Gets symbol_id
     *
     * @return string|null
     */
    public function getSymbolId()
    {
        return $this->container['symbol_id'];
    }

    /**
     * Sets symbol_id
     *
     * @param string|null $symbol_id symbol_id
     *
     * @return self
     */
    public function setSymbolId($symbol_id)
    {

        if (is_null($symbol_id)) {
            throw new \InvalidArgumentException('non-nullable symbol_id cannot be null');
        }

        $this->container['symbol_id'] = $symbol_id;

        return $this;
    }

    /**
     * Gets symbol_name
     *
     * @return string|null
     */
    public function getSymbolName()
    {
        return $this->container['symbol_name'];
    }

    /**
     * Sets symbol_name
     *
     * @param string|null $symbol_name symbol_name
     *
     * @return self
     */
    public function setSymbolName($symbol_name)
    {

        if (is_null($symbol_name)) {
            throw new \InvalidArgumentException('non-nullable symbol_name cannot be null');
        }

        $this->container['symbol_name'] = $symbol_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


