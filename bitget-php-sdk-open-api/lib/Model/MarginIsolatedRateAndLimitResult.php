<?php
/**
 * MarginIsolatedRateAndLimitResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Model;

use \ArrayAccess;
use \Bitget\ObjectSerializer;

/**
 * MarginIsolatedRateAndLimitResult Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MarginIsolatedRateAndLimitResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MarginIsolatedRateAndLimitResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'base_borrow_able' => 'bool',
        'base_coin' => 'string',
        'base_daily_interest_rate' => 'string',
        'base_max_borrowable_amount' => 'string',
        'base_transfer_in_able' => 'bool',
        'base_vips' => '\Bitget\Model\MarginIsolatedVipResult[]',
        'base_yearly_interest_rate' => 'string',
        'leverage' => 'string',
        'quote_borrow_able' => 'bool',
        'quote_coin' => 'string',
        'quote_daily_interest_rate' => 'string',
        'quote_max_borrowable_amount' => 'string',
        'quote_transfer_in_able' => 'bool',
        'quote_vips' => '\Bitget\Model\MarginIsolatedVipResult[]',
        'quote_yearly_interest_rate' => 'string',
        'symbol' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'base_borrow_able' => null,
        'base_coin' => null,
        'base_daily_interest_rate' => null,
        'base_max_borrowable_amount' => null,
        'base_transfer_in_able' => null,
        'base_vips' => null,
        'base_yearly_interest_rate' => null,
        'leverage' => null,
        'quote_borrow_able' => null,
        'quote_coin' => null,
        'quote_daily_interest_rate' => null,
        'quote_max_borrowable_amount' => null,
        'quote_transfer_in_able' => null,
        'quote_vips' => null,
        'quote_yearly_interest_rate' => null,
        'symbol' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'base_borrow_able' => false,
		'base_coin' => false,
		'base_daily_interest_rate' => false,
		'base_max_borrowable_amount' => false,
		'base_transfer_in_able' => false,
		'base_vips' => false,
		'base_yearly_interest_rate' => false,
		'leverage' => false,
		'quote_borrow_able' => false,
		'quote_coin' => false,
		'quote_daily_interest_rate' => false,
		'quote_max_borrowable_amount' => false,
		'quote_transfer_in_able' => false,
		'quote_vips' => false,
		'quote_yearly_interest_rate' => false,
		'symbol' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_borrow_able' => 'baseBorrowAble',
        'base_coin' => 'baseCoin',
        'base_daily_interest_rate' => 'baseDailyInterestRate',
        'base_max_borrowable_amount' => 'baseMaxBorrowableAmount',
        'base_transfer_in_able' => 'baseTransferInAble',
        'base_vips' => 'baseVips',
        'base_yearly_interest_rate' => 'baseYearlyInterestRate',
        'leverage' => 'leverage',
        'quote_borrow_able' => 'quoteBorrowAble',
        'quote_coin' => 'quoteCoin',
        'quote_daily_interest_rate' => 'quoteDailyInterestRate',
        'quote_max_borrowable_amount' => 'quoteMaxBorrowableAmount',
        'quote_transfer_in_able' => 'quoteTransferInAble',
        'quote_vips' => 'quoteVips',
        'quote_yearly_interest_rate' => 'quoteYearlyInterestRate',
        'symbol' => 'symbol'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_borrow_able' => 'setBaseBorrowAble',
        'base_coin' => 'setBaseCoin',
        'base_daily_interest_rate' => 'setBaseDailyInterestRate',
        'base_max_borrowable_amount' => 'setBaseMaxBorrowableAmount',
        'base_transfer_in_able' => 'setBaseTransferInAble',
        'base_vips' => 'setBaseVips',
        'base_yearly_interest_rate' => 'setBaseYearlyInterestRate',
        'leverage' => 'setLeverage',
        'quote_borrow_able' => 'setQuoteBorrowAble',
        'quote_coin' => 'setQuoteCoin',
        'quote_daily_interest_rate' => 'setQuoteDailyInterestRate',
        'quote_max_borrowable_amount' => 'setQuoteMaxBorrowableAmount',
        'quote_transfer_in_able' => 'setQuoteTransferInAble',
        'quote_vips' => 'setQuoteVips',
        'quote_yearly_interest_rate' => 'setQuoteYearlyInterestRate',
        'symbol' => 'setSymbol'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_borrow_able' => 'getBaseBorrowAble',
        'base_coin' => 'getBaseCoin',
        'base_daily_interest_rate' => 'getBaseDailyInterestRate',
        'base_max_borrowable_amount' => 'getBaseMaxBorrowableAmount',
        'base_transfer_in_able' => 'getBaseTransferInAble',
        'base_vips' => 'getBaseVips',
        'base_yearly_interest_rate' => 'getBaseYearlyInterestRate',
        'leverage' => 'getLeverage',
        'quote_borrow_able' => 'getQuoteBorrowAble',
        'quote_coin' => 'getQuoteCoin',
        'quote_daily_interest_rate' => 'getQuoteDailyInterestRate',
        'quote_max_borrowable_amount' => 'getQuoteMaxBorrowableAmount',
        'quote_transfer_in_able' => 'getQuoteTransferInAble',
        'quote_vips' => 'getQuoteVips',
        'quote_yearly_interest_rate' => 'getQuoteYearlyInterestRate',
        'symbol' => 'getSymbol'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('base_borrow_able', $data ?? [], null);
        $this->setIfExists('base_coin', $data ?? [], null);
        $this->setIfExists('base_daily_interest_rate', $data ?? [], null);
        $this->setIfExists('base_max_borrowable_amount', $data ?? [], null);
        $this->setIfExists('base_transfer_in_able', $data ?? [], null);
        $this->setIfExists('base_vips', $data ?? [], null);
        $this->setIfExists('base_yearly_interest_rate', $data ?? [], null);
        $this->setIfExists('leverage', $data ?? [], null);
        $this->setIfExists('quote_borrow_able', $data ?? [], null);
        $this->setIfExists('quote_coin', $data ?? [], null);
        $this->setIfExists('quote_daily_interest_rate', $data ?? [], null);
        $this->setIfExists('quote_max_borrowable_amount', $data ?? [], null);
        $this->setIfExists('quote_transfer_in_able', $data ?? [], null);
        $this->setIfExists('quote_vips', $data ?? [], null);
        $this->setIfExists('quote_yearly_interest_rate', $data ?? [], null);
        $this->setIfExists('symbol', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_borrow_able
     *
     * @return bool|null
     */
    public function getBaseBorrowAble()
    {
        return $this->container['base_borrow_able'];
    }

    /**
     * Sets base_borrow_able
     *
     * @param bool|null $base_borrow_able base_borrow_able
     *
     * @return self
     */
    public function setBaseBorrowAble($base_borrow_able)
    {

        if (is_null($base_borrow_able)) {
            throw new \InvalidArgumentException('non-nullable base_borrow_able cannot be null');
        }

        $this->container['base_borrow_able'] = $base_borrow_able;

        return $this;
    }

    /**
     * Gets base_coin
     *
     * @return string|null
     */
    public function getBaseCoin()
    {
        return $this->container['base_coin'];
    }

    /**
     * Sets base_coin
     *
     * @param string|null $base_coin base_coin
     *
     * @return self
     */
    public function setBaseCoin($base_coin)
    {

        if (is_null($base_coin)) {
            throw new \InvalidArgumentException('non-nullable base_coin cannot be null');
        }

        $this->container['base_coin'] = $base_coin;

        return $this;
    }

    /**
     * Gets base_daily_interest_rate
     *
     * @return string|null
     */
    public function getBaseDailyInterestRate()
    {
        return $this->container['base_daily_interest_rate'];
    }

    /**
     * Sets base_daily_interest_rate
     *
     * @param string|null $base_daily_interest_rate base_daily_interest_rate
     *
     * @return self
     */
    public function setBaseDailyInterestRate($base_daily_interest_rate)
    {

        if (is_null($base_daily_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable base_daily_interest_rate cannot be null');
        }

        $this->container['base_daily_interest_rate'] = $base_daily_interest_rate;

        return $this;
    }

    /**
     * Gets base_max_borrowable_amount
     *
     * @return string|null
     */
    public function getBaseMaxBorrowableAmount()
    {
        return $this->container['base_max_borrowable_amount'];
    }

    /**
     * Sets base_max_borrowable_amount
     *
     * @param string|null $base_max_borrowable_amount base_max_borrowable_amount
     *
     * @return self
     */
    public function setBaseMaxBorrowableAmount($base_max_borrowable_amount)
    {

        if (is_null($base_max_borrowable_amount)) {
            throw new \InvalidArgumentException('non-nullable base_max_borrowable_amount cannot be null');
        }

        $this->container['base_max_borrowable_amount'] = $base_max_borrowable_amount;

        return $this;
    }

    /**
     * Gets base_transfer_in_able
     *
     * @return bool|null
     */
    public function getBaseTransferInAble()
    {
        return $this->container['base_transfer_in_able'];
    }

    /**
     * Sets base_transfer_in_able
     *
     * @param bool|null $base_transfer_in_able base_transfer_in_able
     *
     * @return self
     */
    public function setBaseTransferInAble($base_transfer_in_able)
    {

        if (is_null($base_transfer_in_able)) {
            throw new \InvalidArgumentException('non-nullable base_transfer_in_able cannot be null');
        }

        $this->container['base_transfer_in_able'] = $base_transfer_in_able;

        return $this;
    }

    /**
     * Gets base_vips
     *
     * @return \Bitget\Model\MarginIsolatedVipResult[]|null
     */
    public function getBaseVips()
    {
        return $this->container['base_vips'];
    }

    /**
     * Sets base_vips
     *
     * @param \Bitget\Model\MarginIsolatedVipResult[]|null $base_vips base_vips
     *
     * @return self
     */
    public function setBaseVips($base_vips)
    {

        if (is_null($base_vips)) {
            throw new \InvalidArgumentException('non-nullable base_vips cannot be null');
        }

        $this->container['base_vips'] = $base_vips;

        return $this;
    }

    /**
     * Gets base_yearly_interest_rate
     *
     * @return string|null
     */
    public function getBaseYearlyInterestRate()
    {
        return $this->container['base_yearly_interest_rate'];
    }

    /**
     * Sets base_yearly_interest_rate
     *
     * @param string|null $base_yearly_interest_rate base_yearly_interest_rate
     *
     * @return self
     */
    public function setBaseYearlyInterestRate($base_yearly_interest_rate)
    {

        if (is_null($base_yearly_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable base_yearly_interest_rate cannot be null');
        }

        $this->container['base_yearly_interest_rate'] = $base_yearly_interest_rate;

        return $this;
    }

    /**
     * Gets leverage
     *
     * @return string|null
     */
    public function getLeverage()
    {
        return $this->container['leverage'];
    }

    /**
     * Sets leverage
     *
     * @param string|null $leverage leverage
     *
     * @return self
     */
    public function setLeverage($leverage)
    {

        if (is_null($leverage)) {
            throw new \InvalidArgumentException('non-nullable leverage cannot be null');
        }

        $this->container['leverage'] = $leverage;

        return $this;
    }

    /**
     * Gets quote_borrow_able
     *
     * @return bool|null
     */
    public function getQuoteBorrowAble()
    {
        return $this->container['quote_borrow_able'];
    }

    /**
     * Sets quote_borrow_able
     *
     * @param bool|null $quote_borrow_able quote_borrow_able
     *
     * @return self
     */
    public function setQuoteBorrowAble($quote_borrow_able)
    {

        if (is_null($quote_borrow_able)) {
            throw new \InvalidArgumentException('non-nullable quote_borrow_able cannot be null');
        }

        $this->container['quote_borrow_able'] = $quote_borrow_able;

        return $this;
    }

    /**
     * Gets quote_coin
     *
     * @return string|null
     */
    public function getQuoteCoin()
    {
        return $this->container['quote_coin'];
    }

    /**
     * Sets quote_coin
     *
     * @param string|null $quote_coin quote_coin
     *
     * @return self
     */
    public function setQuoteCoin($quote_coin)
    {

        if (is_null($quote_coin)) {
            throw new \InvalidArgumentException('non-nullable quote_coin cannot be null');
        }

        $this->container['quote_coin'] = $quote_coin;

        return $this;
    }

    /**
     * Gets quote_daily_interest_rate
     *
     * @return string|null
     */
    public function getQuoteDailyInterestRate()
    {
        return $this->container['quote_daily_interest_rate'];
    }

    /**
     * Sets quote_daily_interest_rate
     *
     * @param string|null $quote_daily_interest_rate quote_daily_interest_rate
     *
     * @return self
     */
    public function setQuoteDailyInterestRate($quote_daily_interest_rate)
    {

        if (is_null($quote_daily_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable quote_daily_interest_rate cannot be null');
        }

        $this->container['quote_daily_interest_rate'] = $quote_daily_interest_rate;

        return $this;
    }

    /**
     * Gets quote_max_borrowable_amount
     *
     * @return string|null
     */
    public function getQuoteMaxBorrowableAmount()
    {
        return $this->container['quote_max_borrowable_amount'];
    }

    /**
     * Sets quote_max_borrowable_amount
     *
     * @param string|null $quote_max_borrowable_amount quote_max_borrowable_amount
     *
     * @return self
     */
    public function setQuoteMaxBorrowableAmount($quote_max_borrowable_amount)
    {

        if (is_null($quote_max_borrowable_amount)) {
            throw new \InvalidArgumentException('non-nullable quote_max_borrowable_amount cannot be null');
        }

        $this->container['quote_max_borrowable_amount'] = $quote_max_borrowable_amount;

        return $this;
    }

    /**
     * Gets quote_transfer_in_able
     *
     * @return bool|null
     */
    public function getQuoteTransferInAble()
    {
        return $this->container['quote_transfer_in_able'];
    }

    /**
     * Sets quote_transfer_in_able
     *
     * @param bool|null $quote_transfer_in_able quote_transfer_in_able
     *
     * @return self
     */
    public function setQuoteTransferInAble($quote_transfer_in_able)
    {

        if (is_null($quote_transfer_in_able)) {
            throw new \InvalidArgumentException('non-nullable quote_transfer_in_able cannot be null');
        }

        $this->container['quote_transfer_in_able'] = $quote_transfer_in_able;

        return $this;
    }

    /**
     * Gets quote_vips
     *
     * @return \Bitget\Model\MarginIsolatedVipResult[]|null
     */
    public function getQuoteVips()
    {
        return $this->container['quote_vips'];
    }

    /**
     * Sets quote_vips
     *
     * @param \Bitget\Model\MarginIsolatedVipResult[]|null $quote_vips quote_vips
     *
     * @return self
     */
    public function setQuoteVips($quote_vips)
    {

        if (is_null($quote_vips)) {
            throw new \InvalidArgumentException('non-nullable quote_vips cannot be null');
        }

        $this->container['quote_vips'] = $quote_vips;

        return $this;
    }

    /**
     * Gets quote_yearly_interest_rate
     *
     * @return string|null
     */
    public function getQuoteYearlyInterestRate()
    {
        return $this->container['quote_yearly_interest_rate'];
    }

    /**
     * Sets quote_yearly_interest_rate
     *
     * @param string|null $quote_yearly_interest_rate quote_yearly_interest_rate
     *
     * @return self
     */
    public function setQuoteYearlyInterestRate($quote_yearly_interest_rate)
    {

        if (is_null($quote_yearly_interest_rate)) {
            throw new \InvalidArgumentException('non-nullable quote_yearly_interest_rate cannot be null');
        }

        $this->container['quote_yearly_interest_rate'] = $quote_yearly_interest_rate;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string|null
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string|null $symbol symbol
     *
     * @return self
     */
    public function setSymbol($symbol)
    {

        if (is_null($symbol)) {
            throw new \InvalidArgumentException('non-nullable symbol cannot be null');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


