<?php
/**
 * MerchantAdvInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Model;

use \ArrayAccess;
use \Bitget\ObjectSerializer;

/**
 * MerchantAdvInfo Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantAdvInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantAdvInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adv_id' => 'string',
        'adv_no' => 'string',
        'amount' => 'string',
        'coin' => 'string',
        'coin_precision' => 'string',
        'ctime' => 'string',
        'deal_amount' => 'string',
        'fiat_code' => 'string',
        'fiat_precision' => 'string',
        'fiat_symbol' => 'string',
        'hide' => 'string',
        'max_amount' => 'string',
        'min_amount' => 'string',
        'pay_duration' => 'string',
        'payment_method' => '\Bitget\Model\FiatPaymentInfo[]',
        'price' => 'string',
        'remark' => 'string',
        'status' => 'string',
        'turnover_num' => 'string',
        'turnover_rate' => 'string',
        'type' => 'string',
        'user_limit' => '\Bitget\Model\MerchantAdvUserLimitInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adv_id' => null,
        'adv_no' => null,
        'amount' => null,
        'coin' => null,
        'coin_precision' => null,
        'ctime' => null,
        'deal_amount' => null,
        'fiat_code' => null,
        'fiat_precision' => null,
        'fiat_symbol' => null,
        'hide' => null,
        'max_amount' => null,
        'min_amount' => null,
        'pay_duration' => null,
        'payment_method' => null,
        'price' => null,
        'remark' => null,
        'status' => null,
        'turnover_num' => null,
        'turnover_rate' => null,
        'type' => null,
        'user_limit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adv_id' => false,
		'adv_no' => false,
		'amount' => false,
		'coin' => false,
		'coin_precision' => false,
		'ctime' => false,
		'deal_amount' => false,
		'fiat_code' => false,
		'fiat_precision' => false,
		'fiat_symbol' => false,
		'hide' => false,
		'max_amount' => false,
		'min_amount' => false,
		'pay_duration' => false,
		'payment_method' => false,
		'price' => false,
		'remark' => false,
		'status' => false,
		'turnover_num' => false,
		'turnover_rate' => false,
		'type' => false,
		'user_limit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adv_id' => 'advId',
        'adv_no' => 'advNo',
        'amount' => 'amount',
        'coin' => 'coin',
        'coin_precision' => 'coinPrecision',
        'ctime' => 'ctime',
        'deal_amount' => 'dealAmount',
        'fiat_code' => 'fiatCode',
        'fiat_precision' => 'fiatPrecision',
        'fiat_symbol' => 'fiatSymbol',
        'hide' => 'hide',
        'max_amount' => 'maxAmount',
        'min_amount' => 'minAmount',
        'pay_duration' => 'payDuration',
        'payment_method' => 'paymentMethod',
        'price' => 'price',
        'remark' => 'remark',
        'status' => 'status',
        'turnover_num' => 'turnoverNum',
        'turnover_rate' => 'turnoverRate',
        'type' => 'type',
        'user_limit' => 'userLimit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adv_id' => 'setAdvId',
        'adv_no' => 'setAdvNo',
        'amount' => 'setAmount',
        'coin' => 'setCoin',
        'coin_precision' => 'setCoinPrecision',
        'ctime' => 'setCtime',
        'deal_amount' => 'setDealAmount',
        'fiat_code' => 'setFiatCode',
        'fiat_precision' => 'setFiatPrecision',
        'fiat_symbol' => 'setFiatSymbol',
        'hide' => 'setHide',
        'max_amount' => 'setMaxAmount',
        'min_amount' => 'setMinAmount',
        'pay_duration' => 'setPayDuration',
        'payment_method' => 'setPaymentMethod',
        'price' => 'setPrice',
        'remark' => 'setRemark',
        'status' => 'setStatus',
        'turnover_num' => 'setTurnoverNum',
        'turnover_rate' => 'setTurnoverRate',
        'type' => 'setType',
        'user_limit' => 'setUserLimit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adv_id' => 'getAdvId',
        'adv_no' => 'getAdvNo',
        'amount' => 'getAmount',
        'coin' => 'getCoin',
        'coin_precision' => 'getCoinPrecision',
        'ctime' => 'getCtime',
        'deal_amount' => 'getDealAmount',
        'fiat_code' => 'getFiatCode',
        'fiat_precision' => 'getFiatPrecision',
        'fiat_symbol' => 'getFiatSymbol',
        'hide' => 'getHide',
        'max_amount' => 'getMaxAmount',
        'min_amount' => 'getMinAmount',
        'pay_duration' => 'getPayDuration',
        'payment_method' => 'getPaymentMethod',
        'price' => 'getPrice',
        'remark' => 'getRemark',
        'status' => 'getStatus',
        'turnover_num' => 'getTurnoverNum',
        'turnover_rate' => 'getTurnoverRate',
        'type' => 'getType',
        'user_limit' => 'getUserLimit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('adv_id', $data ?? [], null);
        $this->setIfExists('adv_no', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('coin', $data ?? [], null);
        $this->setIfExists('coin_precision', $data ?? [], null);
        $this->setIfExists('ctime', $data ?? [], null);
        $this->setIfExists('deal_amount', $data ?? [], null);
        $this->setIfExists('fiat_code', $data ?? [], null);
        $this->setIfExists('fiat_precision', $data ?? [], null);
        $this->setIfExists('fiat_symbol', $data ?? [], null);
        $this->setIfExists('hide', $data ?? [], null);
        $this->setIfExists('max_amount', $data ?? [], null);
        $this->setIfExists('min_amount', $data ?? [], null);
        $this->setIfExists('pay_duration', $data ?? [], null);
        $this->setIfExists('payment_method', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('remark', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('turnover_num', $data ?? [], null);
        $this->setIfExists('turnover_rate', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('user_limit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adv_id
     *
     * @return string|null
     */
    public function getAdvId()
    {
        return $this->container['adv_id'];
    }

    /**
     * Sets adv_id
     *
     * @param string|null $adv_id adv_id
     *
     * @return self
     */
    public function setAdvId($adv_id)
    {

        if (is_null($adv_id)) {
            throw new \InvalidArgumentException('non-nullable adv_id cannot be null');
        }

        $this->container['adv_id'] = $adv_id;

        return $this;
    }

    /**
     * Gets adv_no
     *
     * @return string|null
     */
    public function getAdvNo()
    {
        return $this->container['adv_no'];
    }

    /**
     * Sets adv_no
     *
     * @param string|null $adv_no adv_no
     *
     * @return self
     */
    public function setAdvNo($adv_no)
    {

        if (is_null($adv_no)) {
            throw new \InvalidArgumentException('non-nullable adv_no cannot be null');
        }

        $this->container['adv_no'] = $adv_no;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets coin
     *
     * @return string|null
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string|null $coin coin
     *
     * @return self
     */
    public function setCoin($coin)
    {

        if (is_null($coin)) {
            throw new \InvalidArgumentException('non-nullable coin cannot be null');
        }

        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets coin_precision
     *
     * @return string|null
     */
    public function getCoinPrecision()
    {
        return $this->container['coin_precision'];
    }

    /**
     * Sets coin_precision
     *
     * @param string|null $coin_precision coin_precision
     *
     * @return self
     */
    public function setCoinPrecision($coin_precision)
    {

        if (is_null($coin_precision)) {
            throw new \InvalidArgumentException('non-nullable coin_precision cannot be null');
        }

        $this->container['coin_precision'] = $coin_precision;

        return $this;
    }

    /**
     * Gets ctime
     *
     * @return string|null
     */
    public function getCtime()
    {
        return $this->container['ctime'];
    }

    /**
     * Sets ctime
     *
     * @param string|null $ctime ctime
     *
     * @return self
     */
    public function setCtime($ctime)
    {

        if (is_null($ctime)) {
            throw new \InvalidArgumentException('non-nullable ctime cannot be null');
        }

        $this->container['ctime'] = $ctime;

        return $this;
    }

    /**
     * Gets deal_amount
     *
     * @return string|null
     */
    public function getDealAmount()
    {
        return $this->container['deal_amount'];
    }

    /**
     * Sets deal_amount
     *
     * @param string|null $deal_amount deal_amount
     *
     * @return self
     */
    public function setDealAmount($deal_amount)
    {

        if (is_null($deal_amount)) {
            throw new \InvalidArgumentException('non-nullable deal_amount cannot be null');
        }

        $this->container['deal_amount'] = $deal_amount;

        return $this;
    }

    /**
     * Gets fiat_code
     *
     * @return string|null
     */
    public function getFiatCode()
    {
        return $this->container['fiat_code'];
    }

    /**
     * Sets fiat_code
     *
     * @param string|null $fiat_code fiat_code
     *
     * @return self
     */
    public function setFiatCode($fiat_code)
    {

        if (is_null($fiat_code)) {
            throw new \InvalidArgumentException('non-nullable fiat_code cannot be null');
        }

        $this->container['fiat_code'] = $fiat_code;

        return $this;
    }

    /**
     * Gets fiat_precision
     *
     * @return string|null
     */
    public function getFiatPrecision()
    {
        return $this->container['fiat_precision'];
    }

    /**
     * Sets fiat_precision
     *
     * @param string|null $fiat_precision fiat_precision
     *
     * @return self
     */
    public function setFiatPrecision($fiat_precision)
    {

        if (is_null($fiat_precision)) {
            throw new \InvalidArgumentException('non-nullable fiat_precision cannot be null');
        }

        $this->container['fiat_precision'] = $fiat_precision;

        return $this;
    }

    /**
     * Gets fiat_symbol
     *
     * @return string|null
     */
    public function getFiatSymbol()
    {
        return $this->container['fiat_symbol'];
    }

    /**
     * Sets fiat_symbol
     *
     * @param string|null $fiat_symbol fiat_symbol
     *
     * @return self
     */
    public function setFiatSymbol($fiat_symbol)
    {

        if (is_null($fiat_symbol)) {
            throw new \InvalidArgumentException('non-nullable fiat_symbol cannot be null');
        }

        $this->container['fiat_symbol'] = $fiat_symbol;

        return $this;
    }

    /**
     * Gets hide
     *
     * @return string|null
     */
    public function getHide()
    {
        return $this->container['hide'];
    }

    /**
     * Sets hide
     *
     * @param string|null $hide hide
     *
     * @return self
     */
    public function setHide($hide)
    {

        if (is_null($hide)) {
            throw new \InvalidArgumentException('non-nullable hide cannot be null');
        }

        $this->container['hide'] = $hide;

        return $this;
    }

    /**
     * Gets max_amount
     *
     * @return string|null
     */
    public function getMaxAmount()
    {
        return $this->container['max_amount'];
    }

    /**
     * Sets max_amount
     *
     * @param string|null $max_amount max_amount
     *
     * @return self
     */
    public function setMaxAmount($max_amount)
    {

        if (is_null($max_amount)) {
            throw new \InvalidArgumentException('non-nullable max_amount cannot be null');
        }

        $this->container['max_amount'] = $max_amount;

        return $this;
    }

    /**
     * Gets min_amount
     *
     * @return string|null
     */
    public function getMinAmount()
    {
        return $this->container['min_amount'];
    }

    /**
     * Sets min_amount
     *
     * @param string|null $min_amount min_amount
     *
     * @return self
     */
    public function setMinAmount($min_amount)
    {

        if (is_null($min_amount)) {
            throw new \InvalidArgumentException('non-nullable min_amount cannot be null');
        }

        $this->container['min_amount'] = $min_amount;

        return $this;
    }

    /**
     * Gets pay_duration
     *
     * @return string|null
     */
    public function getPayDuration()
    {
        return $this->container['pay_duration'];
    }

    /**
     * Sets pay_duration
     *
     * @param string|null $pay_duration pay_duration
     *
     * @return self
     */
    public function setPayDuration($pay_duration)
    {

        if (is_null($pay_duration)) {
            throw new \InvalidArgumentException('non-nullable pay_duration cannot be null');
        }

        $this->container['pay_duration'] = $pay_duration;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return \Bitget\Model\FiatPaymentInfo[]|null
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param \Bitget\Model\FiatPaymentInfo[]|null $payment_method payment_method
     *
     * @return self
     */
    public function setPaymentMethod($payment_method)
    {

        if (is_null($payment_method)) {
            throw new \InvalidArgumentException('non-nullable payment_method cannot be null');
        }

        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string|null
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string|null $remark remark
     *
     * @return self
     */
    public function setRemark($remark)
    {

        if (is_null($remark)) {
            throw new \InvalidArgumentException('non-nullable remark cannot be null');
        }

        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets turnover_num
     *
     * @return string|null
     */
    public function getTurnoverNum()
    {
        return $this->container['turnover_num'];
    }

    /**
     * Sets turnover_num
     *
     * @param string|null $turnover_num turnover_num
     *
     * @return self
     */
    public function setTurnoverNum($turnover_num)
    {

        if (is_null($turnover_num)) {
            throw new \InvalidArgumentException('non-nullable turnover_num cannot be null');
        }

        $this->container['turnover_num'] = $turnover_num;

        return $this;
    }

    /**
     * Gets turnover_rate
     *
     * @return string|null
     */
    public function getTurnoverRate()
    {
        return $this->container['turnover_rate'];
    }

    /**
     * Sets turnover_rate
     *
     * @param string|null $turnover_rate turnover_rate
     *
     * @return self
     */
    public function setTurnoverRate($turnover_rate)
    {

        if (is_null($turnover_rate)) {
            throw new \InvalidArgumentException('non-nullable turnover_rate cannot be null');
        }

        $this->container['turnover_rate'] = $turnover_rate;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_limit
     *
     * @return \Bitget\Model\MerchantAdvUserLimitInfo|null
     */
    public function getUserLimit()
    {
        return $this->container['user_limit'];
    }

    /**
     * Sets user_limit
     *
     * @param \Bitget\Model\MerchantAdvUserLimitInfo|null $user_limit user_limit
     *
     * @return self
     */
    public function setUserLimit($user_limit)
    {

        if (is_null($user_limit)) {
            throw new \InvalidArgumentException('non-nullable user_limit cannot be null');
        }

        $this->container['user_limit'] = $user_limit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


