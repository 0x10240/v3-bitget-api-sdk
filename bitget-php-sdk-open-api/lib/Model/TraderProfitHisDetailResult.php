<?php
/**
 * TraderProfitHisDetailResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Model;

use \ArrayAccess;
use \Bitget\ObjectSerializer;

/**
 * TraderProfitHisDetailResult Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TraderProfitHisDetailResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TraderProfitHisDetailResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'coin_name' => 'string',
        'distribute_ratio' => 'string',
        'head_pic' => 'string',
        'nick_name' => 'string',
        'profit' => 'string',
        'tracer_nick_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'coin_name' => null,
        'distribute_ratio' => null,
        'head_pic' => null,
        'nick_name' => null,
        'profit' => null,
        'tracer_nick_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'coin_name' => false,
		'distribute_ratio' => false,
		'head_pic' => false,
		'nick_name' => false,
		'profit' => false,
		'tracer_nick_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coin_name' => 'coinName',
        'distribute_ratio' => 'distributeRatio',
        'head_pic' => 'headPic',
        'nick_name' => 'nickName',
        'profit' => 'profit',
        'tracer_nick_name' => 'tracerNickName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coin_name' => 'setCoinName',
        'distribute_ratio' => 'setDistributeRatio',
        'head_pic' => 'setHeadPic',
        'nick_name' => 'setNickName',
        'profit' => 'setProfit',
        'tracer_nick_name' => 'setTracerNickName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coin_name' => 'getCoinName',
        'distribute_ratio' => 'getDistributeRatio',
        'head_pic' => 'getHeadPic',
        'nick_name' => 'getNickName',
        'profit' => 'getProfit',
        'tracer_nick_name' => 'getTracerNickName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('coin_name', $data ?? [], null);
        $this->setIfExists('distribute_ratio', $data ?? [], null);
        $this->setIfExists('head_pic', $data ?? [], null);
        $this->setIfExists('nick_name', $data ?? [], null);
        $this->setIfExists('profit', $data ?? [], null);
        $this->setIfExists('tracer_nick_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coin_name
     *
     * @return string|null
     */
    public function getCoinName()
    {
        return $this->container['coin_name'];
    }

    /**
     * Sets coin_name
     *
     * @param string|null $coin_name coin_name
     *
     * @return self
     */
    public function setCoinName($coin_name)
    {

        if (is_null($coin_name)) {
            throw new \InvalidArgumentException('non-nullable coin_name cannot be null');
        }

        $this->container['coin_name'] = $coin_name;

        return $this;
    }

    /**
     * Gets distribute_ratio
     *
     * @return string|null
     */
    public function getDistributeRatio()
    {
        return $this->container['distribute_ratio'];
    }

    /**
     * Sets distribute_ratio
     *
     * @param string|null $distribute_ratio distribute_ratio
     *
     * @return self
     */
    public function setDistributeRatio($distribute_ratio)
    {

        if (is_null($distribute_ratio)) {
            throw new \InvalidArgumentException('non-nullable distribute_ratio cannot be null');
        }

        $this->container['distribute_ratio'] = $distribute_ratio;

        return $this;
    }

    /**
     * Gets head_pic
     *
     * @return string|null
     */
    public function getHeadPic()
    {
        return $this->container['head_pic'];
    }

    /**
     * Sets head_pic
     *
     * @param string|null $head_pic head_pic
     *
     * @return self
     */
    public function setHeadPic($head_pic)
    {

        if (is_null($head_pic)) {
            throw new \InvalidArgumentException('non-nullable head_pic cannot be null');
        }

        $this->container['head_pic'] = $head_pic;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name nick_name
     *
     * @return self
     */
    public function setNickName($nick_name)
    {

        if (is_null($nick_name)) {
            throw new \InvalidArgumentException('non-nullable nick_name cannot be null');
        }

        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets profit
     *
     * @return string|null
     */
    public function getProfit()
    {
        return $this->container['profit'];
    }

    /**
     * Sets profit
     *
     * @param string|null $profit profit
     *
     * @return self
     */
    public function setProfit($profit)
    {

        if (is_null($profit)) {
            throw new \InvalidArgumentException('non-nullable profit cannot be null');
        }

        $this->container['profit'] = $profit;

        return $this;
    }

    /**
     * Gets tracer_nick_name
     *
     * @return string|null
     */
    public function getTracerNickName()
    {
        return $this->container['tracer_nick_name'];
    }

    /**
     * Sets tracer_nick_name
     *
     * @param string|null $tracer_nick_name tracer_nick_name
     *
     * @return self
     */
    public function setTracerNickName($tracer_nick_name)
    {

        if (is_null($tracer_nick_name)) {
            throw new \InvalidArgumentException('non-nullable tracer_nick_name cannot be null');
        }

        $this->container['tracer_nick_name'] = $tracer_nick_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


