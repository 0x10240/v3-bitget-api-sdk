<?php
/**
 * MerchantPersonInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Model;

use \ArrayAccess;
use \Bitget\ObjectSerializer;

/**
 * MerchantPersonInfo Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantPersonInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantPersonInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'average_payment' => 'string',
        'average_realese' => 'string',
        'email' => 'string',
        'email_bind_flag' => 'bool',
        'kyc_flag' => 'bool',
        'merchant_id' => 'string',
        'mobile' => 'string',
        'mobile_bind_flag' => 'bool',
        'nick_name' => 'string',
        'real_name' => 'string',
        'register_time' => 'string',
        'thirty_buy' => 'string',
        'thirty_completion_rate' => 'string',
        'thirty_sell' => 'string',
        'thirty_trades' => 'string',
        'total_buy' => 'string',
        'total_completion_rate' => 'string',
        'total_sell' => 'string',
        'total_trades' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'average_payment' => null,
        'average_realese' => null,
        'email' => null,
        'email_bind_flag' => null,
        'kyc_flag' => null,
        'merchant_id' => null,
        'mobile' => null,
        'mobile_bind_flag' => null,
        'nick_name' => null,
        'real_name' => null,
        'register_time' => null,
        'thirty_buy' => null,
        'thirty_completion_rate' => null,
        'thirty_sell' => null,
        'thirty_trades' => null,
        'total_buy' => null,
        'total_completion_rate' => null,
        'total_sell' => null,
        'total_trades' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'average_payment' => false,
		'average_realese' => false,
		'email' => false,
		'email_bind_flag' => false,
		'kyc_flag' => false,
		'merchant_id' => false,
		'mobile' => false,
		'mobile_bind_flag' => false,
		'nick_name' => false,
		'real_name' => false,
		'register_time' => false,
		'thirty_buy' => false,
		'thirty_completion_rate' => false,
		'thirty_sell' => false,
		'thirty_trades' => false,
		'total_buy' => false,
		'total_completion_rate' => false,
		'total_sell' => false,
		'total_trades' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'average_payment' => 'averagePayment',
        'average_realese' => 'averageRealese',
        'email' => 'email',
        'email_bind_flag' => 'emailBindFlag',
        'kyc_flag' => 'kycFlag',
        'merchant_id' => 'merchantId',
        'mobile' => 'mobile',
        'mobile_bind_flag' => 'mobileBindFlag',
        'nick_name' => 'nickName',
        'real_name' => 'realName',
        'register_time' => 'registerTime',
        'thirty_buy' => 'thirtyBuy',
        'thirty_completion_rate' => 'thirtyCompletionRate',
        'thirty_sell' => 'thirtySell',
        'thirty_trades' => 'thirtyTrades',
        'total_buy' => 'totalBuy',
        'total_completion_rate' => 'totalCompletionRate',
        'total_sell' => 'totalSell',
        'total_trades' => 'totalTrades'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'average_payment' => 'setAveragePayment',
        'average_realese' => 'setAverageRealese',
        'email' => 'setEmail',
        'email_bind_flag' => 'setEmailBindFlag',
        'kyc_flag' => 'setKycFlag',
        'merchant_id' => 'setMerchantId',
        'mobile' => 'setMobile',
        'mobile_bind_flag' => 'setMobileBindFlag',
        'nick_name' => 'setNickName',
        'real_name' => 'setRealName',
        'register_time' => 'setRegisterTime',
        'thirty_buy' => 'setThirtyBuy',
        'thirty_completion_rate' => 'setThirtyCompletionRate',
        'thirty_sell' => 'setThirtySell',
        'thirty_trades' => 'setThirtyTrades',
        'total_buy' => 'setTotalBuy',
        'total_completion_rate' => 'setTotalCompletionRate',
        'total_sell' => 'setTotalSell',
        'total_trades' => 'setTotalTrades'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'average_payment' => 'getAveragePayment',
        'average_realese' => 'getAverageRealese',
        'email' => 'getEmail',
        'email_bind_flag' => 'getEmailBindFlag',
        'kyc_flag' => 'getKycFlag',
        'merchant_id' => 'getMerchantId',
        'mobile' => 'getMobile',
        'mobile_bind_flag' => 'getMobileBindFlag',
        'nick_name' => 'getNickName',
        'real_name' => 'getRealName',
        'register_time' => 'getRegisterTime',
        'thirty_buy' => 'getThirtyBuy',
        'thirty_completion_rate' => 'getThirtyCompletionRate',
        'thirty_sell' => 'getThirtySell',
        'thirty_trades' => 'getThirtyTrades',
        'total_buy' => 'getTotalBuy',
        'total_completion_rate' => 'getTotalCompletionRate',
        'total_sell' => 'getTotalSell',
        'total_trades' => 'getTotalTrades'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('average_payment', $data ?? [], null);
        $this->setIfExists('average_realese', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('email_bind_flag', $data ?? [], null);
        $this->setIfExists('kyc_flag', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('mobile', $data ?? [], null);
        $this->setIfExists('mobile_bind_flag', $data ?? [], null);
        $this->setIfExists('nick_name', $data ?? [], null);
        $this->setIfExists('real_name', $data ?? [], null);
        $this->setIfExists('register_time', $data ?? [], null);
        $this->setIfExists('thirty_buy', $data ?? [], null);
        $this->setIfExists('thirty_completion_rate', $data ?? [], null);
        $this->setIfExists('thirty_sell', $data ?? [], null);
        $this->setIfExists('thirty_trades', $data ?? [], null);
        $this->setIfExists('total_buy', $data ?? [], null);
        $this->setIfExists('total_completion_rate', $data ?? [], null);
        $this->setIfExists('total_sell', $data ?? [], null);
        $this->setIfExists('total_trades', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets average_payment
     *
     * @return string|null
     */
    public function getAveragePayment()
    {
        return $this->container['average_payment'];
    }

    /**
     * Sets average_payment
     *
     * @param string|null $average_payment average_payment
     *
     * @return self
     */
    public function setAveragePayment($average_payment)
    {

        if (is_null($average_payment)) {
            throw new \InvalidArgumentException('non-nullable average_payment cannot be null');
        }

        $this->container['average_payment'] = $average_payment;

        return $this;
    }

    /**
     * Gets average_realese
     *
     * @return string|null
     */
    public function getAverageRealese()
    {
        return $this->container['average_realese'];
    }

    /**
     * Sets average_realese
     *
     * @param string|null $average_realese average_realese
     *
     * @return self
     */
    public function setAverageRealese($average_realese)
    {

        if (is_null($average_realese)) {
            throw new \InvalidArgumentException('non-nullable average_realese cannot be null');
        }

        $this->container['average_realese'] = $average_realese;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_bind_flag
     *
     * @return bool|null
     */
    public function getEmailBindFlag()
    {
        return $this->container['email_bind_flag'];
    }

    /**
     * Sets email_bind_flag
     *
     * @param bool|null $email_bind_flag email_bind_flag
     *
     * @return self
     */
    public function setEmailBindFlag($email_bind_flag)
    {

        if (is_null($email_bind_flag)) {
            throw new \InvalidArgumentException('non-nullable email_bind_flag cannot be null');
        }

        $this->container['email_bind_flag'] = $email_bind_flag;

        return $this;
    }

    /**
     * Gets kyc_flag
     *
     * @return bool|null
     */
    public function getKycFlag()
    {
        return $this->container['kyc_flag'];
    }

    /**
     * Sets kyc_flag
     *
     * @param bool|null $kyc_flag kyc_flag
     *
     * @return self
     */
    public function setKycFlag($kyc_flag)
    {

        if (is_null($kyc_flag)) {
            throw new \InvalidArgumentException('non-nullable kyc_flag cannot be null');
        }

        $this->container['kyc_flag'] = $kyc_flag;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {

        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }

        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile mobile
     *
     * @return self
     */
    public function setMobile($mobile)
    {

        if (is_null($mobile)) {
            throw new \InvalidArgumentException('non-nullable mobile cannot be null');
        }

        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets mobile_bind_flag
     *
     * @return bool|null
     */
    public function getMobileBindFlag()
    {
        return $this->container['mobile_bind_flag'];
    }

    /**
     * Sets mobile_bind_flag
     *
     * @param bool|null $mobile_bind_flag mobile_bind_flag
     *
     * @return self
     */
    public function setMobileBindFlag($mobile_bind_flag)
    {

        if (is_null($mobile_bind_flag)) {
            throw new \InvalidArgumentException('non-nullable mobile_bind_flag cannot be null');
        }

        $this->container['mobile_bind_flag'] = $mobile_bind_flag;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name nick_name
     *
     * @return self
     */
    public function setNickName($nick_name)
    {

        if (is_null($nick_name)) {
            throw new \InvalidArgumentException('non-nullable nick_name cannot be null');
        }

        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets real_name
     *
     * @return string|null
     */
    public function getRealName()
    {
        return $this->container['real_name'];
    }

    /**
     * Sets real_name
     *
     * @param string|null $real_name real_name
     *
     * @return self
     */
    public function setRealName($real_name)
    {

        if (is_null($real_name)) {
            throw new \InvalidArgumentException('non-nullable real_name cannot be null');
        }

        $this->container['real_name'] = $real_name;

        return $this;
    }

    /**
     * Gets register_time
     *
     * @return string|null
     */
    public function getRegisterTime()
    {
        return $this->container['register_time'];
    }

    /**
     * Sets register_time
     *
     * @param string|null $register_time register_time
     *
     * @return self
     */
    public function setRegisterTime($register_time)
    {

        if (is_null($register_time)) {
            throw new \InvalidArgumentException('non-nullable register_time cannot be null');
        }

        $this->container['register_time'] = $register_time;

        return $this;
    }

    /**
     * Gets thirty_buy
     *
     * @return string|null
     */
    public function getThirtyBuy()
    {
        return $this->container['thirty_buy'];
    }

    /**
     * Sets thirty_buy
     *
     * @param string|null $thirty_buy thirty_buy
     *
     * @return self
     */
    public function setThirtyBuy($thirty_buy)
    {

        if (is_null($thirty_buy)) {
            throw new \InvalidArgumentException('non-nullable thirty_buy cannot be null');
        }

        $this->container['thirty_buy'] = $thirty_buy;

        return $this;
    }

    /**
     * Gets thirty_completion_rate
     *
     * @return string|null
     */
    public function getThirtyCompletionRate()
    {
        return $this->container['thirty_completion_rate'];
    }

    /**
     * Sets thirty_completion_rate
     *
     * @param string|null $thirty_completion_rate thirty_completion_rate
     *
     * @return self
     */
    public function setThirtyCompletionRate($thirty_completion_rate)
    {

        if (is_null($thirty_completion_rate)) {
            throw new \InvalidArgumentException('non-nullable thirty_completion_rate cannot be null');
        }

        $this->container['thirty_completion_rate'] = $thirty_completion_rate;

        return $this;
    }

    /**
     * Gets thirty_sell
     *
     * @return string|null
     */
    public function getThirtySell()
    {
        return $this->container['thirty_sell'];
    }

    /**
     * Sets thirty_sell
     *
     * @param string|null $thirty_sell thirty_sell
     *
     * @return self
     */
    public function setThirtySell($thirty_sell)
    {

        if (is_null($thirty_sell)) {
            throw new \InvalidArgumentException('non-nullable thirty_sell cannot be null');
        }

        $this->container['thirty_sell'] = $thirty_sell;

        return $this;
    }

    /**
     * Gets thirty_trades
     *
     * @return string|null
     */
    public function getThirtyTrades()
    {
        return $this->container['thirty_trades'];
    }

    /**
     * Sets thirty_trades
     *
     * @param string|null $thirty_trades thirty_trades
     *
     * @return self
     */
    public function setThirtyTrades($thirty_trades)
    {

        if (is_null($thirty_trades)) {
            throw new \InvalidArgumentException('non-nullable thirty_trades cannot be null');
        }

        $this->container['thirty_trades'] = $thirty_trades;

        return $this;
    }

    /**
     * Gets total_buy
     *
     * @return string|null
     */
    public function getTotalBuy()
    {
        return $this->container['total_buy'];
    }

    /**
     * Sets total_buy
     *
     * @param string|null $total_buy total_buy
     *
     * @return self
     */
    public function setTotalBuy($total_buy)
    {

        if (is_null($total_buy)) {
            throw new \InvalidArgumentException('non-nullable total_buy cannot be null');
        }

        $this->container['total_buy'] = $total_buy;

        return $this;
    }

    /**
     * Gets total_completion_rate
     *
     * @return string|null
     */
    public function getTotalCompletionRate()
    {
        return $this->container['total_completion_rate'];
    }

    /**
     * Sets total_completion_rate
     *
     * @param string|null $total_completion_rate total_completion_rate
     *
     * @return self
     */
    public function setTotalCompletionRate($total_completion_rate)
    {

        if (is_null($total_completion_rate)) {
            throw new \InvalidArgumentException('non-nullable total_completion_rate cannot be null');
        }

        $this->container['total_completion_rate'] = $total_completion_rate;

        return $this;
    }

    /**
     * Gets total_sell
     *
     * @return string|null
     */
    public function getTotalSell()
    {
        return $this->container['total_sell'];
    }

    /**
     * Sets total_sell
     *
     * @param string|null $total_sell total_sell
     *
     * @return self
     */
    public function setTotalSell($total_sell)
    {

        if (is_null($total_sell)) {
            throw new \InvalidArgumentException('non-nullable total_sell cannot be null');
        }

        $this->container['total_sell'] = $total_sell;

        return $this;
    }

    /**
     * Gets total_trades
     *
     * @return string|null
     */
    public function getTotalTrades()
    {
        return $this->container['total_trades'];
    }

    /**
     * Sets total_trades
     *
     * @param string|null $total_trades total_trades
     *
     * @return self
     */
    public function setTotalTrades($total_trades)
    {

        if (is_null($total_trades)) {
            throw new \InvalidArgumentException('non-nullable total_trades cannot be null');
        }

        $this->container['total_trades'] = $total_trades;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


