<?php
/**
 * MarginTradeDetailInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Bitget Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitget\Model;

use \ArrayAccess;
use \Bitget\ObjectSerializer;

/**
 * MarginTradeDetailInfo Class Doc Comment
 *
 * @category Class
 * @package  Bitget
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MarginTradeDetailInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MarginTradeDetailInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ctime' => 'string',
        'fee_ccy' => 'string',
        'fees' => 'string',
        'fill_id' => 'string',
        'fill_price' => 'string',
        'fill_quantity' => 'string',
        'fill_total_amount' => 'string',
        'order_id' => 'string',
        'order_type' => 'string',
        'side' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ctime' => null,
        'fee_ccy' => null,
        'fees' => null,
        'fill_id' => null,
        'fill_price' => null,
        'fill_quantity' => null,
        'fill_total_amount' => null,
        'order_id' => null,
        'order_type' => null,
        'side' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ctime' => false,
		'fee_ccy' => false,
		'fees' => false,
		'fill_id' => false,
		'fill_price' => false,
		'fill_quantity' => false,
		'fill_total_amount' => false,
		'order_id' => false,
		'order_type' => false,
		'side' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ctime' => 'ctime',
        'fee_ccy' => 'feeCcy',
        'fees' => 'fees',
        'fill_id' => 'fillId',
        'fill_price' => 'fillPrice',
        'fill_quantity' => 'fillQuantity',
        'fill_total_amount' => 'fillTotalAmount',
        'order_id' => 'orderId',
        'order_type' => 'orderType',
        'side' => 'side'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ctime' => 'setCtime',
        'fee_ccy' => 'setFeeCcy',
        'fees' => 'setFees',
        'fill_id' => 'setFillId',
        'fill_price' => 'setFillPrice',
        'fill_quantity' => 'setFillQuantity',
        'fill_total_amount' => 'setFillTotalAmount',
        'order_id' => 'setOrderId',
        'order_type' => 'setOrderType',
        'side' => 'setSide'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ctime' => 'getCtime',
        'fee_ccy' => 'getFeeCcy',
        'fees' => 'getFees',
        'fill_id' => 'getFillId',
        'fill_price' => 'getFillPrice',
        'fill_quantity' => 'getFillQuantity',
        'fill_total_amount' => 'getFillTotalAmount',
        'order_id' => 'getOrderId',
        'order_type' => 'getOrderType',
        'side' => 'getSide'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ctime', $data ?? [], null);
        $this->setIfExists('fee_ccy', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('fill_id', $data ?? [], null);
        $this->setIfExists('fill_price', $data ?? [], null);
        $this->setIfExists('fill_quantity', $data ?? [], null);
        $this->setIfExists('fill_total_amount', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('order_type', $data ?? [], null);
        $this->setIfExists('side', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ctime
     *
     * @return string|null
     */
    public function getCtime()
    {
        return $this->container['ctime'];
    }

    /**
     * Sets ctime
     *
     * @param string|null $ctime ctime
     *
     * @return self
     */
    public function setCtime($ctime)
    {

        if (is_null($ctime)) {
            throw new \InvalidArgumentException('non-nullable ctime cannot be null');
        }

        $this->container['ctime'] = $ctime;

        return $this;
    }

    /**
     * Gets fee_ccy
     *
     * @return string|null
     */
    public function getFeeCcy()
    {
        return $this->container['fee_ccy'];
    }

    /**
     * Sets fee_ccy
     *
     * @param string|null $fee_ccy fee_ccy
     *
     * @return self
     */
    public function setFeeCcy($fee_ccy)
    {

        if (is_null($fee_ccy)) {
            throw new \InvalidArgumentException('non-nullable fee_ccy cannot be null');
        }

        $this->container['fee_ccy'] = $fee_ccy;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return string|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param string|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {

        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }

        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets fill_id
     *
     * @return string|null
     */
    public function getFillId()
    {
        return $this->container['fill_id'];
    }

    /**
     * Sets fill_id
     *
     * @param string|null $fill_id fill_id
     *
     * @return self
     */
    public function setFillId($fill_id)
    {

        if (is_null($fill_id)) {
            throw new \InvalidArgumentException('non-nullable fill_id cannot be null');
        }

        $this->container['fill_id'] = $fill_id;

        return $this;
    }

    /**
     * Gets fill_price
     *
     * @return string|null
     */
    public function getFillPrice()
    {
        return $this->container['fill_price'];
    }

    /**
     * Sets fill_price
     *
     * @param string|null $fill_price fill_price
     *
     * @return self
     */
    public function setFillPrice($fill_price)
    {

        if (is_null($fill_price)) {
            throw new \InvalidArgumentException('non-nullable fill_price cannot be null');
        }

        $this->container['fill_price'] = $fill_price;

        return $this;
    }

    /**
     * Gets fill_quantity
     *
     * @return string|null
     */
    public function getFillQuantity()
    {
        return $this->container['fill_quantity'];
    }

    /**
     * Sets fill_quantity
     *
     * @param string|null $fill_quantity fill_quantity
     *
     * @return self
     */
    public function setFillQuantity($fill_quantity)
    {

        if (is_null($fill_quantity)) {
            throw new \InvalidArgumentException('non-nullable fill_quantity cannot be null');
        }

        $this->container['fill_quantity'] = $fill_quantity;

        return $this;
    }

    /**
     * Gets fill_total_amount
     *
     * @return string|null
     */
    public function getFillTotalAmount()
    {
        return $this->container['fill_total_amount'];
    }

    /**
     * Sets fill_total_amount
     *
     * @param string|null $fill_total_amount fill_total_amount
     *
     * @return self
     */
    public function setFillTotalAmount($fill_total_amount)
    {

        if (is_null($fill_total_amount)) {
            throw new \InvalidArgumentException('non-nullable fill_total_amount cannot be null');
        }

        $this->container['fill_total_amount'] = $fill_total_amount;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {

        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string|null
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string|null $order_type order_type
     *
     * @return self
     */
    public function setOrderType($order_type)
    {

        if (is_null($order_type)) {
            throw new \InvalidArgumentException('non-nullable order_type cannot be null');
        }

        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets side
     *
     * @return string|null
     */
    public function getSide()
    {
        return $this->container['side'];
    }

    /**
     * Sets side
     *
     * @param string|null $side side
     *
     * @return self
     */
    public function setSide($side)
    {

        if (is_null($side)) {
            throw new \InvalidArgumentException('non-nullable side cannot be null');
        }

        $this->container['side'] = $side;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


